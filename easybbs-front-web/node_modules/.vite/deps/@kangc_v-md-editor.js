import {
  EMPTY_OBJ,
  NO,
  NOOP,
  PatchFlagNames,
  camelize,
  capitalize,
  extend,
  generateCodeFrame,
  hyphenate,
  init_runtime_dom_esm_bundler,
  init_shared_esm_bundler,
  isArray,
  isBuiltInDirective,
  isHTMLTag,
  isObject,
  isOn,
  isReservedProp,
  isSVGTag,
  isString,
  isSymbol,
  isVoidTag,
  makeMap,
  parseStringStyle,
  runtime_dom_esm_bundler_exports,
  shared_esm_bundler_exports,
  slotFlagsText,
  toHandlerKey
} from "./chunk-5FOALJWP.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-AC2VUBZ6.js";

// node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js
function defaultOnError(error) {
  throw error;
}
function defaultOnWarn(msg) {
  console.warn(`[Vue warn] ${msg.message}`);
}
function createCompilerError(code, loc, messages, additionalMessage) {
  const msg = true ? (messages || errorMessages)[code] + (additionalMessage || ``) : code;
  const error = new SyntaxError(String(msg));
  error.code = code;
  error.loc = loc;
  return error;
}
function registerRuntimeHelpers(helpers) {
  Object.getOwnPropertySymbols(helpers).forEach((s) => {
    helperNameMap[s] = helpers[s];
  });
}
function createRoot(children, loc = locStub) {
  return {
    type: 0,
    children,
    helpers: /* @__PURE__ */ new Set(),
    components: [],
    directives: [],
    hoists: [],
    imports: [],
    cached: 0,
    temps: 0,
    codegenNode: void 0,
    loc
  };
}
function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent2 = false, loc = locStub) {
  if (context) {
    if (isBlock) {
      context.helper(OPEN_BLOCK);
      context.helper(getVNodeBlockHelper(context.inSSR, isComponent2));
    } else {
      context.helper(getVNodeHelper(context.inSSR, isComponent2));
    }
    if (directives) {
      context.helper(WITH_DIRECTIVES);
    }
  }
  return {
    type: 13,
    tag,
    props,
    children,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2,
    loc
  };
}
function createArrayExpression(elements, loc = locStub) {
  return {
    type: 17,
    loc,
    elements
  };
}
function createObjectExpression(properties, loc = locStub) {
  return {
    type: 15,
    loc,
    properties
  };
}
function createObjectProperty(key, value) {
  return {
    type: 16,
    loc: locStub,
    key: isString(key) ? createSimpleExpression(key, true) : key,
    value
  };
}
function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {
  return {
    type: 4,
    loc,
    content,
    isStatic,
    constType: isStatic ? 3 : constType
  };
}
function createInterpolation(content, loc) {
  return {
    type: 5,
    loc,
    content: isString(content) ? createSimpleExpression(content, false, loc) : content
  };
}
function createCompoundExpression(children, loc = locStub) {
  return {
    type: 8,
    loc,
    children
  };
}
function createCallExpression(callee, args = [], loc = locStub) {
  return {
    type: 14,
    loc,
    callee,
    arguments: args
  };
}
function createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {
  return {
    type: 18,
    params,
    returns,
    newline,
    isSlot,
    loc
  };
}
function createConditionalExpression(test, consequent, alternate, newline = true) {
  return {
    type: 19,
    test,
    consequent,
    alternate,
    newline,
    loc: locStub
  };
}
function createCacheExpression(index, value, isVNode = false) {
  return {
    type: 20,
    index,
    value,
    isVNode,
    loc: locStub
  };
}
function createBlockStatement(body) {
  return {
    type: 21,
    body,
    loc: locStub
  };
}
function createTemplateLiteral(elements) {
  return {
    type: 22,
    elements,
    loc: locStub
  };
}
function createIfStatement(test, consequent, alternate) {
  return {
    type: 23,
    test,
    consequent,
    alternate,
    loc: locStub
  };
}
function createAssignmentExpression(left, right) {
  return {
    type: 24,
    left,
    right,
    loc: locStub
  };
}
function createSequenceExpression(expressions) {
  return {
    type: 25,
    expressions,
    loc: locStub
  };
}
function createReturnStatement(returns) {
  return {
    type: 26,
    returns,
    loc: locStub
  };
}
function getVNodeHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
}
function getVNodeBlockHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
}
function convertToBlock(node, { helper, removeHelper, inSSR }) {
  if (!node.isBlock) {
    node.isBlock = true;
    removeHelper(getVNodeHelper(inSSR, node.isComponent));
    helper(OPEN_BLOCK);
    helper(getVNodeBlockHelper(inSSR, node.isComponent));
  }
}
function isCoreComponent(tag) {
  if (isBuiltInType(tag, "Teleport")) {
    return TELEPORT;
  } else if (isBuiltInType(tag, "Suspense")) {
    return SUSPENSE;
  } else if (isBuiltInType(tag, "KeepAlive")) {
    return KEEP_ALIVE;
  } else if (isBuiltInType(tag, "BaseTransition")) {
    return BASE_TRANSITION;
  }
}
function getInnerRange(loc, offset, length) {
  const source = loc.source.slice(offset, offset + length);
  const newLoc = {
    source,
    start: advancePositionWithClone(loc.start, loc.source, offset),
    end: loc.end
  };
  if (length != null) {
    newLoc.end = advancePositionWithClone(
      loc.start,
      loc.source,
      offset + length
    );
  }
  return newLoc;
}
function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
  return advancePositionWithMutation(
    extend({}, pos),
    source,
    numberOfCharacters
  );
}
function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
  let linesCount = 0;
  let lastNewLinePos = -1;
  for (let i = 0; i < numberOfCharacters; i++) {
    if (source.charCodeAt(i) === 10) {
      linesCount++;
      lastNewLinePos = i;
    }
  }
  pos.offset += numberOfCharacters;
  pos.line += linesCount;
  pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
  return pos;
}
function assert(condition, msg) {
  if (!condition) {
    throw new Error(msg || `unexpected compiler condition`);
  }
}
function findDir(node, name, allowEmpty = false) {
  for (let i = 0; i < node.props.length; i++) {
    const p = node.props[i];
    if (p.type === 7 && (allowEmpty || p.exp) && (isString(name) ? p.name === name : name.test(p.name))) {
      return p;
    }
  }
}
function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
  for (let i = 0; i < node.props.length; i++) {
    const p = node.props[i];
    if (p.type === 6) {
      if (dynamicOnly)
        continue;
      if (p.name === name && (p.value || allowEmpty)) {
        return p;
      }
    } else if (p.name === "bind" && (p.exp || allowEmpty) && isStaticArgOf(p.arg, name)) {
      return p;
    }
  }
}
function isStaticArgOf(arg, name) {
  return !!(arg && isStaticExp(arg) && arg.content === name);
}
function hasDynamicKeyVBind(node) {
  return node.props.some(
    (p) => p.type === 7 && p.name === "bind" && (!p.arg || // v-bind="obj"
    p.arg.type !== 4 || // v-bind:[_ctx.foo]
    !p.arg.isStatic)
    // v-bind:[foo]
  );
}
function isText$1(node) {
  return node.type === 5 || node.type === 2;
}
function isVSlot(p) {
  return p.type === 7 && p.name === "slot";
}
function isTemplateNode(node) {
  return node.type === 1 && node.tagType === 3;
}
function isSlotOutlet(node) {
  return node.type === 1 && node.tagType === 2;
}
function getUnnormalizedProps(props, callPath = []) {
  if (props && !isString(props) && props.type === 14) {
    const callee = props.callee;
    if (!isString(callee) && propsHelperSet.has(callee)) {
      return getUnnormalizedProps(
        props.arguments[0],
        callPath.concat(props)
      );
    }
  }
  return [props, callPath];
}
function injectProp(node, prop, context) {
  let propsWithInjection;
  let props = node.type === 13 ? node.props : node.arguments[2];
  let callPath = [];
  let parentCall;
  if (props && !isString(props) && props.type === 14) {
    const ret = getUnnormalizedProps(props);
    props = ret[0];
    callPath = ret[1];
    parentCall = callPath[callPath.length - 1];
  }
  if (props == null || isString(props)) {
    propsWithInjection = createObjectExpression([prop]);
  } else if (props.type === 14) {
    const first = props.arguments[0];
    if (!isString(first) && first.type === 15) {
      if (!hasProp(prop, first)) {
        first.properties.unshift(prop);
      }
    } else {
      if (props.callee === TO_HANDLERS) {
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
          createObjectExpression([prop]),
          props
        ]);
      } else {
        props.arguments.unshift(createObjectExpression([prop]));
      }
    }
    !propsWithInjection && (propsWithInjection = props);
  } else if (props.type === 15) {
    if (!hasProp(prop, props)) {
      props.properties.unshift(prop);
    }
    propsWithInjection = props;
  } else {
    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
      createObjectExpression([prop]),
      props
    ]);
    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
      parentCall = callPath[callPath.length - 2];
    }
  }
  if (node.type === 13) {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node.props = propsWithInjection;
    }
  } else {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node.arguments[2] = propsWithInjection;
    }
  }
}
function hasProp(prop, props) {
  let result = false;
  if (prop.key.type === 4) {
    const propKeyName = prop.key.content;
    result = props.properties.some(
      (p) => p.key.type === 4 && p.key.content === propKeyName
    );
  }
  return result;
}
function toValidAssetId(name, type) {
  return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
    return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
  })}`;
}
function hasScopeRef(node, ids) {
  if (!node || Object.keys(ids).length === 0) {
    return false;
  }
  switch (node.type) {
    case 1:
      for (let i = 0; i < node.props.length; i++) {
        const p = node.props[i];
        if (p.type === 7 && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {
          return true;
        }
      }
      return node.children.some((c) => hasScopeRef(c, ids));
    case 11:
      if (hasScopeRef(node.source, ids)) {
        return true;
      }
      return node.children.some((c) => hasScopeRef(c, ids));
    case 9:
      return node.branches.some((b) => hasScopeRef(b, ids));
    case 10:
      if (hasScopeRef(node.condition, ids)) {
        return true;
      }
      return node.children.some((c) => hasScopeRef(c, ids));
    case 4:
      return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];
    case 8:
      return node.children.some((c) => isObject(c) && hasScopeRef(c, ids));
    case 5:
    case 12:
      return hasScopeRef(node.content, ids);
    case 2:
    case 3:
      return false;
    default:
      if (true)
        ;
      return false;
  }
}
function getMemoedVNodeCall(node) {
  if (node.type === 14 && node.callee === WITH_MEMO) {
    return node.arguments[1].returns;
  } else {
    return node;
  }
}
function getCompatValue(key, context) {
  const config = context.options ? context.options.compatConfig : context.compatConfig;
  const value = config && config[key];
  if (key === "MODE") {
    return value || 3;
  } else {
    return value;
  }
}
function isCompatEnabled(key, context) {
  const mode = getCompatValue("MODE", context);
  const value = getCompatValue(key, context);
  return mode === 3 ? value === true : value !== false;
}
function checkCompatEnabled(key, context, loc, ...args) {
  const enabled = isCompatEnabled(key, context);
  if (enabled) {
    warnDeprecation(key, context, loc, ...args);
  }
  return enabled;
}
function warnDeprecation(key, context, loc, ...args) {
  const val = getCompatValue(key, context);
  if (val === "suppress-warning") {
    return;
  }
  const { message, link } = deprecationData[key];
  const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `
  Details: ${link}` : ``}`;
  const err = new SyntaxError(msg);
  err.code = key;
  if (loc)
    err.loc = loc;
  context.onWarn(err);
}
function baseParse(content, options = {}) {
  const context = createParserContext(content, options);
  const start = getCursor(context);
  return createRoot(
    parseChildren(context, 0, []),
    getSelection(context, start)
  );
}
function createParserContext(content, rawOptions) {
  const options = extend({}, defaultParserOptions);
  let key;
  for (key in rawOptions) {
    options[key] = rawOptions[key] === void 0 ? defaultParserOptions[key] : rawOptions[key];
  }
  return {
    options,
    column: 1,
    line: 1,
    offset: 0,
    originalSource: content,
    source: content,
    inPre: false,
    inVPre: false,
    onWarn: options.onWarn
  };
}
function parseChildren(context, mode, ancestors) {
  const parent = last(ancestors);
  const ns = parent ? parent.ns : 0;
  const nodes = [];
  while (!isEnd(context, mode, ancestors)) {
    const s = context.source;
    let node = void 0;
    if (mode === 0 || mode === 1) {
      if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {
        node = parseInterpolation(context, mode);
      } else if (mode === 0 && s[0] === "<") {
        if (s.length === 1) {
          emitError(context, 5, 1);
        } else if (s[1] === "!") {
          if (startsWith(s, "<!--")) {
            node = parseComment(context);
          } else if (startsWith(s, "<!DOCTYPE")) {
            node = parseBogusComment(context);
          } else if (startsWith(s, "<![CDATA[")) {
            if (ns !== 0) {
              node = parseCDATA(context, ancestors);
            } else {
              emitError(context, 1);
              node = parseBogusComment(context);
            }
          } else {
            emitError(context, 11);
            node = parseBogusComment(context);
          }
        } else if (s[1] === "/") {
          if (s.length === 2) {
            emitError(context, 5, 2);
          } else if (s[2] === ">") {
            emitError(context, 14, 2);
            advanceBy(context, 3);
            continue;
          } else if (/[a-z]/i.test(s[2])) {
            emitError(context, 23);
            parseTag(context, TagType.End, parent);
            continue;
          } else {
            emitError(
              context,
              12,
              2
            );
            node = parseBogusComment(context);
          }
        } else if (/[a-z]/i.test(s[1])) {
          node = parseElement(context, ancestors);
          if (isCompatEnabled(
            "COMPILER_NATIVE_TEMPLATE",
            context
          ) && node && node.tag === "template" && !node.props.some(
            (p) => p.type === 7 && isSpecialTemplateDirective(p.name)
          )) {
            warnDeprecation(
              "COMPILER_NATIVE_TEMPLATE",
              context,
              node.loc
            );
            node = node.children;
          }
        } else if (s[1] === "?") {
          emitError(
            context,
            21,
            1
          );
          node = parseBogusComment(context);
        } else {
          emitError(context, 12, 1);
        }
      }
    }
    if (!node) {
      node = parseText(context, mode);
    }
    if (isArray(node)) {
      for (let i = 0; i < node.length; i++) {
        pushNode(nodes, node[i]);
      }
    } else {
      pushNode(nodes, node);
    }
  }
  let removedWhitespace = false;
  if (mode !== 2 && mode !== 1) {
    const shouldCondense = context.options.whitespace !== "preserve";
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];
      if (node.type === 2) {
        if (!context.inPre) {
          if (!/[^\t\r\n\f ]/.test(node.content)) {
            const prev = nodes[i - 1];
            const next = nodes[i + 1];
            if (!prev || !next || shouldCondense && (prev.type === 3 && next.type === 3 || prev.type === 3 && next.type === 1 || prev.type === 1 && next.type === 3 || prev.type === 1 && next.type === 1 && /[\r\n]/.test(node.content))) {
              removedWhitespace = true;
              nodes[i] = null;
            } else {
              node.content = " ";
            }
          } else if (shouldCondense) {
            node.content = node.content.replace(/[\t\r\n\f ]+/g, " ");
          }
        } else {
          node.content = node.content.replace(/\r\n/g, "\n");
        }
      } else if (node.type === 3 && !context.options.comments) {
        removedWhitespace = true;
        nodes[i] = null;
      }
    }
    if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
      const first = nodes[0];
      if (first && first.type === 2) {
        first.content = first.content.replace(/^\r?\n/, "");
      }
    }
  }
  return removedWhitespace ? nodes.filter(Boolean) : nodes;
}
function pushNode(nodes, node) {
  if (node.type === 2) {
    const prev = last(nodes);
    if (prev && prev.type === 2 && prev.loc.end.offset === node.loc.start.offset) {
      prev.content += node.content;
      prev.loc.end = node.loc.end;
      prev.loc.source += node.loc.source;
      return;
    }
  }
  nodes.push(node);
}
function parseCDATA(context, ancestors) {
  advanceBy(context, 9);
  const nodes = parseChildren(context, 3, ancestors);
  if (context.source.length === 0) {
    emitError(context, 6);
  } else {
    advanceBy(context, 3);
  }
  return nodes;
}
function parseComment(context) {
  const start = getCursor(context);
  let content;
  const match = /--(\!)?>/.exec(context.source);
  if (!match) {
    content = context.source.slice(4);
    advanceBy(context, context.source.length);
    emitError(context, 7);
  } else {
    if (match.index <= 3) {
      emitError(context, 0);
    }
    if (match[1]) {
      emitError(context, 10);
    }
    content = context.source.slice(4, match.index);
    const s = context.source.slice(0, match.index);
    let prevIndex = 1, nestedIndex = 0;
    while ((nestedIndex = s.indexOf("<!--", prevIndex)) !== -1) {
      advanceBy(context, nestedIndex - prevIndex + 1);
      if (nestedIndex + 4 < s.length) {
        emitError(context, 16);
      }
      prevIndex = nestedIndex + 1;
    }
    advanceBy(context, match.index + match[0].length - prevIndex + 1);
  }
  return {
    type: 3,
    content,
    loc: getSelection(context, start)
  };
}
function parseBogusComment(context) {
  const start = getCursor(context);
  const contentStart = context.source[1] === "?" ? 1 : 2;
  let content;
  const closeIndex = context.source.indexOf(">");
  if (closeIndex === -1) {
    content = context.source.slice(contentStart);
    advanceBy(context, context.source.length);
  } else {
    content = context.source.slice(contentStart, closeIndex);
    advanceBy(context, closeIndex + 1);
  }
  return {
    type: 3,
    content,
    loc: getSelection(context, start)
  };
}
function parseElement(context, ancestors) {
  const wasInPre = context.inPre;
  const wasInVPre = context.inVPre;
  const parent = last(ancestors);
  const element = parseTag(context, TagType.Start, parent);
  const isPreBoundary = context.inPre && !wasInPre;
  const isVPreBoundary = context.inVPre && !wasInVPre;
  if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
    if (isPreBoundary) {
      context.inPre = false;
    }
    if (isVPreBoundary) {
      context.inVPre = false;
    }
    return element;
  }
  ancestors.push(element);
  const mode = context.options.getTextMode(element, parent);
  const children = parseChildren(context, mode, ancestors);
  ancestors.pop();
  {
    const inlineTemplateProp = element.props.find(
      (p) => p.type === 6 && p.name === "inline-template"
    );
    if (inlineTemplateProp && checkCompatEnabled(
      "COMPILER_INLINE_TEMPLATE",
      context,
      inlineTemplateProp.loc
    )) {
      const loc = getSelection(context, element.loc.end);
      inlineTemplateProp.value = {
        type: 2,
        content: loc.source,
        loc
      };
    }
  }
  element.children = children;
  if (startsWithEndTagOpen(context.source, element.tag)) {
    parseTag(context, TagType.End, parent);
  } else {
    emitError(context, 24, 0, element.loc.start);
    if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
      const first = children[0];
      if (first && startsWith(first.loc.source, "<!--")) {
        emitError(context, 8);
      }
    }
  }
  element.loc = getSelection(context, element.loc.start);
  if (isPreBoundary) {
    context.inPre = false;
  }
  if (isVPreBoundary) {
    context.inVPre = false;
  }
  return element;
}
function parseTag(context, type, parent) {
  const start = getCursor(context);
  const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
  const tag = match[1];
  const ns = context.options.getNamespace(tag, parent);
  advanceBy(context, match[0].length);
  advanceSpaces(context);
  const cursor = getCursor(context);
  const currentSource = context.source;
  if (context.options.isPreTag(tag)) {
    context.inPre = true;
  }
  let props = parseAttributes(context, type);
  if (type === 0 && !context.inVPre && props.some((p) => p.type === 7 && p.name === "pre")) {
    context.inVPre = true;
    extend(context, cursor);
    context.source = currentSource;
    props = parseAttributes(context, type).filter((p) => p.name !== "v-pre");
  }
  let isSelfClosing = false;
  if (context.source.length === 0) {
    emitError(context, 9);
  } else {
    isSelfClosing = startsWith(context.source, "/>");
    if (type === 1 && isSelfClosing) {
      emitError(context, 4);
    }
    advanceBy(context, isSelfClosing ? 2 : 1);
  }
  if (type === 1) {
    return;
  }
  if (isCompatEnabled(
    "COMPILER_V_IF_V_FOR_PRECEDENCE",
    context
  )) {
    let hasIf = false;
    let hasFor = false;
    for (let i = 0; i < props.length; i++) {
      const p = props[i];
      if (p.type === 7) {
        if (p.name === "if") {
          hasIf = true;
        } else if (p.name === "for") {
          hasFor = true;
        }
      }
      if (hasIf && hasFor) {
        warnDeprecation(
          "COMPILER_V_IF_V_FOR_PRECEDENCE",
          context,
          getSelection(context, start)
        );
        break;
      }
    }
  }
  let tagType = 0;
  if (!context.inVPre) {
    if (tag === "slot") {
      tagType = 2;
    } else if (tag === "template") {
      if (props.some(
        (p) => p.type === 7 && isSpecialTemplateDirective(p.name)
      )) {
        tagType = 3;
      }
    } else if (isComponent(tag, props, context)) {
      tagType = 1;
    }
  }
  return {
    type: 1,
    ns,
    tag,
    tagType,
    props,
    isSelfClosing,
    children: [],
    loc: getSelection(context, start),
    codegenNode: void 0
    // to be created during transform phase
  };
}
function isComponent(tag, props, context) {
  const options = context.options;
  if (options.isCustomElement(tag)) {
    return false;
  }
  if (tag === "component" || /^[A-Z]/.test(tag) || isCoreComponent(tag) || options.isBuiltInComponent && options.isBuiltInComponent(tag) || options.isNativeTag && !options.isNativeTag(tag)) {
    return true;
  }
  for (let i = 0; i < props.length; i++) {
    const p = props[i];
    if (p.type === 6) {
      if (p.name === "is" && p.value) {
        if (p.value.content.startsWith("vue:")) {
          return true;
        } else if (checkCompatEnabled(
          "COMPILER_IS_ON_ELEMENT",
          context,
          p.loc
        )) {
          return true;
        }
      }
    } else {
      if (p.name === "is") {
        return true;
      } else if (
        // :is on plain element - only treat as component in compat mode
        p.name === "bind" && isStaticArgOf(p.arg, "is") && true && checkCompatEnabled(
          "COMPILER_IS_ON_ELEMENT",
          context,
          p.loc
        )
      ) {
        return true;
      }
    }
  }
}
function parseAttributes(context, type) {
  const props = [];
  const attributeNames = /* @__PURE__ */ new Set();
  while (context.source.length > 0 && !startsWith(context.source, ">") && !startsWith(context.source, "/>")) {
    if (startsWith(context.source, "/")) {
      emitError(context, 22);
      advanceBy(context, 1);
      advanceSpaces(context);
      continue;
    }
    if (type === 1) {
      emitError(context, 3);
    }
    const attr = parseAttribute(context, attributeNames);
    if (attr.type === 6 && attr.value && attr.name === "class") {
      attr.value.content = attr.value.content.replace(/\s+/g, " ").trim();
    }
    if (type === 0) {
      props.push(attr);
    }
    if (/^[^\t\r\n\f />]/.test(context.source)) {
      emitError(context, 15);
    }
    advanceSpaces(context);
  }
  return props;
}
function parseAttribute(context, nameSet) {
  var _a;
  const start = getCursor(context);
  const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
  const name = match[0];
  if (nameSet.has(name)) {
    emitError(context, 2);
  }
  nameSet.add(name);
  if (name[0] === "=") {
    emitError(context, 19);
  }
  {
    const pattern = /["'<]/g;
    let m;
    while (m = pattern.exec(name)) {
      emitError(
        context,
        17,
        m.index
      );
    }
  }
  advanceBy(context, name.length);
  let value = void 0;
  if (/^[\t\r\n\f ]*=/.test(context.source)) {
    advanceSpaces(context);
    advanceBy(context, 1);
    advanceSpaces(context);
    value = parseAttributeValue(context);
    if (!value) {
      emitError(context, 13);
    }
  }
  const loc = getSelection(context, start);
  if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(name)) {
    const match2 = /(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(
      name
    );
    let isPropShorthand = startsWith(name, ".");
    let dirName = match2[1] || (isPropShorthand || startsWith(name, ":") ? "bind" : startsWith(name, "@") ? "on" : "slot");
    let arg;
    if (match2[2]) {
      const isSlot = dirName === "slot";
      const startOffset = name.lastIndexOf(
        match2[2],
        name.length - (((_a = match2[3]) == null ? void 0 : _a.length) || 0)
      );
      const loc2 = getSelection(
        context,
        getNewPosition(context, start, startOffset),
        getNewPosition(
          context,
          start,
          startOffset + match2[2].length + (isSlot && match2[3] || "").length
        )
      );
      let content = match2[2];
      let isStatic = true;
      if (content.startsWith("[")) {
        isStatic = false;
        if (!content.endsWith("]")) {
          emitError(
            context,
            27
          );
          content = content.slice(1);
        } else {
          content = content.slice(1, content.length - 1);
        }
      } else if (isSlot) {
        content += match2[3] || "";
      }
      arg = {
        type: 4,
        content,
        isStatic,
        constType: isStatic ? 3 : 0,
        loc: loc2
      };
    }
    if (value && value.isQuoted) {
      const valueLoc = value.loc;
      valueLoc.start.offset++;
      valueLoc.start.column++;
      valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);
      valueLoc.source = valueLoc.source.slice(1, -1);
    }
    const modifiers = match2[3] ? match2[3].slice(1).split(".") : [];
    if (isPropShorthand)
      modifiers.push("prop");
    if (dirName === "bind" && arg) {
      if (modifiers.includes("sync") && checkCompatEnabled(
        "COMPILER_V_BIND_SYNC",
        context,
        loc,
        arg.loc.source
      )) {
        dirName = "model";
        modifiers.splice(modifiers.indexOf("sync"), 1);
      }
      if (modifiers.includes("prop")) {
        checkCompatEnabled(
          "COMPILER_V_BIND_PROP",
          context,
          loc
        );
      }
    }
    return {
      type: 7,
      name: dirName,
      exp: value && {
        type: 4,
        content: value.content,
        isStatic: false,
        // Treat as non-constant by default. This can be potentially set to
        // other values by `transformExpression` to make it eligible for hoisting.
        constType: 0,
        loc: value.loc
      },
      arg,
      modifiers,
      loc
    };
  }
  if (!context.inVPre && startsWith(name, "v-")) {
    emitError(context, 26);
  }
  return {
    type: 6,
    name,
    value: value && {
      type: 2,
      content: value.content,
      loc: value.loc
    },
    loc
  };
}
function parseAttributeValue(context) {
  const start = getCursor(context);
  let content;
  const quote = context.source[0];
  const isQuoted = quote === `"` || quote === `'`;
  if (isQuoted) {
    advanceBy(context, 1);
    const endIndex = context.source.indexOf(quote);
    if (endIndex === -1) {
      content = parseTextData(
        context,
        context.source.length,
        4
      );
    } else {
      content = parseTextData(context, endIndex, 4);
      advanceBy(context, 1);
    }
  } else {
    const match = /^[^\t\r\n\f >]+/.exec(context.source);
    if (!match) {
      return void 0;
    }
    const unexpectedChars = /["'<=`]/g;
    let m;
    while (m = unexpectedChars.exec(match[0])) {
      emitError(
        context,
        18,
        m.index
      );
    }
    content = parseTextData(context, match[0].length, 4);
  }
  return { content, isQuoted, loc: getSelection(context, start) };
}
function parseInterpolation(context, mode) {
  const [open, close] = context.options.delimiters;
  const closeIndex = context.source.indexOf(close, open.length);
  if (closeIndex === -1) {
    emitError(context, 25);
    return void 0;
  }
  const start = getCursor(context);
  advanceBy(context, open.length);
  const innerStart = getCursor(context);
  const innerEnd = getCursor(context);
  const rawContentLength = closeIndex - open.length;
  const rawContent = context.source.slice(0, rawContentLength);
  const preTrimContent = parseTextData(context, rawContentLength, mode);
  const content = preTrimContent.trim();
  const startOffset = preTrimContent.indexOf(content);
  if (startOffset > 0) {
    advancePositionWithMutation(innerStart, rawContent, startOffset);
  }
  const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
  advancePositionWithMutation(innerEnd, rawContent, endOffset);
  advanceBy(context, close.length);
  return {
    type: 5,
    content: {
      type: 4,
      isStatic: false,
      // Set `isConstant` to false by default and will decide in transformExpression
      constType: 0,
      content,
      loc: getSelection(context, innerStart, innerEnd)
    },
    loc: getSelection(context, start)
  };
}
function parseText(context, mode) {
  const endTokens = mode === 3 ? ["]]>"] : ["<", context.options.delimiters[0]];
  let endIndex = context.source.length;
  for (let i = 0; i < endTokens.length; i++) {
    const index = context.source.indexOf(endTokens[i], 1);
    if (index !== -1 && endIndex > index) {
      endIndex = index;
    }
  }
  const start = getCursor(context);
  const content = parseTextData(context, endIndex, mode);
  return {
    type: 2,
    content,
    loc: getSelection(context, start)
  };
}
function parseTextData(context, length, mode) {
  const rawText = context.source.slice(0, length);
  advanceBy(context, length);
  if (mode === 2 || mode === 3 || !rawText.includes("&")) {
    return rawText;
  } else {
    return context.options.decodeEntities(
      rawText,
      mode === 4
    );
  }
}
function getCursor(context) {
  const { column, line, offset } = context;
  return { column, line, offset };
}
function getSelection(context, start, end) {
  end = end || getCursor(context);
  return {
    start,
    end,
    source: context.originalSource.slice(start.offset, end.offset)
  };
}
function last(xs) {
  return xs[xs.length - 1];
}
function startsWith(source, searchString) {
  return source.startsWith(searchString);
}
function advanceBy(context, numberOfCharacters) {
  const { source } = context;
  advancePositionWithMutation(context, source, numberOfCharacters);
  context.source = source.slice(numberOfCharacters);
}
function advanceSpaces(context) {
  const match = /^[\t\r\n\f ]+/.exec(context.source);
  if (match) {
    advanceBy(context, match[0].length);
  }
}
function getNewPosition(context, start, numberOfCharacters) {
  return advancePositionWithClone(
    start,
    context.originalSource.slice(start.offset, numberOfCharacters),
    numberOfCharacters
  );
}
function emitError(context, code, offset, loc = getCursor(context)) {
  if (offset) {
    loc.offset += offset;
    loc.column += offset;
  }
  context.options.onError(
    createCompilerError(code, {
      start: loc,
      end: loc,
      source: ""
    })
  );
}
function isEnd(context, mode, ancestors) {
  const s = context.source;
  switch (mode) {
    case 0:
      if (startsWith(s, "</")) {
        for (let i = ancestors.length - 1; i >= 0; --i) {
          if (startsWithEndTagOpen(s, ancestors[i].tag)) {
            return true;
          }
        }
      }
      break;
    case 1:
    case 2: {
      const parent = last(ancestors);
      if (parent && startsWithEndTagOpen(s, parent.tag)) {
        return true;
      }
      break;
    }
    case 3:
      if (startsWith(s, "]]>")) {
        return true;
      }
      break;
  }
  return !s;
}
function startsWithEndTagOpen(source, tag) {
  return startsWith(source, "</") && source.slice(2, 2 + tag.length).toLowerCase() === tag.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag.length] || ">");
}
function hoistStatic(root, context) {
  walk(
    root,
    context,
    // Root node is unfortunately non-hoistable due to potential parent
    // fallthrough attributes.
    isSingleElementRoot(root, root.children[0])
  );
}
function isSingleElementRoot(root, child) {
  const { children } = root;
  return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
}
function walk(node, context, doNotHoistNode = false) {
  const { children } = node;
  const originalCount = children.length;
  let hoistedCount = 0;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (child.type === 1 && child.tagType === 0) {
      const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
      if (constantType > 0) {
        if (constantType >= 2) {
          child.codegenNode.patchFlag = -1 + (true ? ` /* HOISTED */` : ``);
          child.codegenNode = context.hoist(child.codegenNode);
          hoistedCount++;
          continue;
        }
      } else {
        const codegenNode = child.codegenNode;
        if (codegenNode.type === 13) {
          const flag = getPatchFlag(codegenNode);
          if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
            const props = getNodeProps(child);
            if (props) {
              codegenNode.props = context.hoist(props);
            }
          }
          if (codegenNode.dynamicProps) {
            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
          }
        }
      }
    }
    if (child.type === 1) {
      const isComponent2 = child.tagType === 1;
      if (isComponent2) {
        context.scopes.vSlot++;
      }
      walk(child, context);
      if (isComponent2) {
        context.scopes.vSlot--;
      }
    } else if (child.type === 11) {
      walk(child, context, child.children.length === 1);
    } else if (child.type === 9) {
      for (let i2 = 0; i2 < child.branches.length; i2++) {
        walk(
          child.branches[i2],
          context,
          child.branches[i2].children.length === 1
        );
      }
    }
  }
  if (hoistedCount && context.transformHoist) {
    context.transformHoist(children, context, node);
  }
  if (hoistedCount && hoistedCount === originalCount && node.type === 1 && node.tagType === 0 && node.codegenNode && node.codegenNode.type === 13 && isArray(node.codegenNode.children)) {
    node.codegenNode.children = context.hoist(
      createArrayExpression(node.codegenNode.children)
    );
  }
}
function getConstantType(node, context) {
  const { constantCache } = context;
  switch (node.type) {
    case 1:
      if (node.tagType !== 0) {
        return 0;
      }
      const cached = constantCache.get(node);
      if (cached !== void 0) {
        return cached;
      }
      const codegenNode = node.codegenNode;
      if (codegenNode.type !== 13) {
        return 0;
      }
      if (codegenNode.isBlock && node.tag !== "svg" && node.tag !== "foreignObject") {
        return 0;
      }
      const flag = getPatchFlag(codegenNode);
      if (!flag) {
        let returnType2 = 3;
        const generatedPropsType = getGeneratedPropsConstantType(node, context);
        if (generatedPropsType === 0) {
          constantCache.set(node, 0);
          return 0;
        }
        if (generatedPropsType < returnType2) {
          returnType2 = generatedPropsType;
        }
        for (let i = 0; i < node.children.length; i++) {
          const childType = getConstantType(node.children[i], context);
          if (childType === 0) {
            constantCache.set(node, 0);
            return 0;
          }
          if (childType < returnType2) {
            returnType2 = childType;
          }
        }
        if (returnType2 > 1) {
          for (let i = 0; i < node.props.length; i++) {
            const p = node.props[i];
            if (p.type === 7 && p.name === "bind" && p.exp) {
              const expType = getConstantType(p.exp, context);
              if (expType === 0) {
                constantCache.set(node, 0);
                return 0;
              }
              if (expType < returnType2) {
                returnType2 = expType;
              }
            }
          }
        }
        if (codegenNode.isBlock) {
          for (let i = 0; i < node.props.length; i++) {
            const p = node.props[i];
            if (p.type === 7) {
              constantCache.set(node, 0);
              return 0;
            }
          }
          context.removeHelper(OPEN_BLOCK);
          context.removeHelper(
            getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)
          );
          codegenNode.isBlock = false;
          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
        }
        constantCache.set(node, returnType2);
        return returnType2;
      } else {
        constantCache.set(node, 0);
        return 0;
      }
    case 2:
    case 3:
      return 3;
    case 9:
    case 11:
    case 10:
      return 0;
    case 5:
    case 12:
      return getConstantType(node.content, context);
    case 4:
      return node.constType;
    case 8:
      let returnType = 3;
      for (let i = 0; i < node.children.length; i++) {
        const child = node.children[i];
        if (isString(child) || isSymbol(child)) {
          continue;
        }
        const childType = getConstantType(child, context);
        if (childType === 0) {
          return 0;
        } else if (childType < returnType) {
          returnType = childType;
        }
      }
      return returnType;
    default:
      if (true)
        ;
      return 0;
  }
}
function getConstantTypeOfHelperCall(value, context) {
  if (value.type === 14 && !isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {
    const arg = value.arguments[0];
    if (arg.type === 4) {
      return getConstantType(arg, context);
    } else if (arg.type === 14) {
      return getConstantTypeOfHelperCall(arg, context);
    }
  }
  return 0;
}
function getGeneratedPropsConstantType(node, context) {
  let returnType = 3;
  const props = getNodeProps(node);
  if (props && props.type === 15) {
    const { properties } = props;
    for (let i = 0; i < properties.length; i++) {
      const { key, value } = properties[i];
      const keyType = getConstantType(key, context);
      if (keyType === 0) {
        return keyType;
      }
      if (keyType < returnType) {
        returnType = keyType;
      }
      let valueType;
      if (value.type === 4) {
        valueType = getConstantType(value, context);
      } else if (value.type === 14) {
        valueType = getConstantTypeOfHelperCall(value, context);
      } else {
        valueType = 0;
      }
      if (valueType === 0) {
        return valueType;
      }
      if (valueType < returnType) {
        returnType = valueType;
      }
    }
  }
  return returnType;
}
function getNodeProps(node) {
  const codegenNode = node.codegenNode;
  if (codegenNode.type === 13) {
    return codegenNode.props;
  }
}
function getPatchFlag(node) {
  const flag = node.patchFlag;
  return flag ? parseInt(flag, 10) : void 0;
}
function createTransformContext(root, {
  filename = "",
  prefixIdentifiers = false,
  hoistStatic: hoistStatic2 = false,
  cacheHandlers = false,
  nodeTransforms = [],
  directiveTransforms = {},
  transformHoist = null,
  isBuiltInComponent = NOOP,
  isCustomElement = NOOP,
  expressionPlugins = [],
  scopeId = null,
  slotted = true,
  ssr = false,
  inSSR = false,
  ssrCssVars = ``,
  bindingMetadata = EMPTY_OBJ,
  inline = false,
  isTS = false,
  onError = defaultOnError,
  onWarn = defaultOnWarn,
  compatConfig
}) {
  const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
  const context = {
    // options
    selfName: nameMatch && capitalize(camelize(nameMatch[1])),
    prefixIdentifiers,
    hoistStatic: hoistStatic2,
    cacheHandlers,
    nodeTransforms,
    directiveTransforms,
    transformHoist,
    isBuiltInComponent,
    isCustomElement,
    expressionPlugins,
    scopeId,
    slotted,
    ssr,
    inSSR,
    ssrCssVars,
    bindingMetadata,
    inline,
    isTS,
    onError,
    onWarn,
    compatConfig,
    // state
    root,
    helpers: /* @__PURE__ */ new Map(),
    components: /* @__PURE__ */ new Set(),
    directives: /* @__PURE__ */ new Set(),
    hoists: [],
    imports: [],
    constantCache: /* @__PURE__ */ new Map(),
    temps: 0,
    cached: 0,
    identifiers: /* @__PURE__ */ Object.create(null),
    scopes: {
      vFor: 0,
      vSlot: 0,
      vPre: 0,
      vOnce: 0
    },
    parent: null,
    currentNode: root,
    childIndex: 0,
    inVOnce: false,
    // methods
    helper(name) {
      const count = context.helpers.get(name) || 0;
      context.helpers.set(name, count + 1);
      return name;
    },
    removeHelper(name) {
      const count = context.helpers.get(name);
      if (count) {
        const currentCount = count - 1;
        if (!currentCount) {
          context.helpers.delete(name);
        } else {
          context.helpers.set(name, currentCount);
        }
      }
    },
    helperString(name) {
      return `_${helperNameMap[context.helper(name)]}`;
    },
    replaceNode(node) {
      if (true) {
        if (!context.currentNode) {
          throw new Error(`Node being replaced is already removed.`);
        }
        if (!context.parent) {
          throw new Error(`Cannot replace root node.`);
        }
      }
      context.parent.children[context.childIndex] = context.currentNode = node;
    },
    removeNode(node) {
      if (!context.parent) {
        throw new Error(`Cannot remove root node.`);
      }
      const list = context.parent.children;
      const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;
      if (removalIndex < 0) {
        throw new Error(`node being removed is not a child of current parent`);
      }
      if (!node || node === context.currentNode) {
        context.currentNode = null;
        context.onNodeRemoved();
      } else {
        if (context.childIndex > removalIndex) {
          context.childIndex--;
          context.onNodeRemoved();
        }
      }
      context.parent.children.splice(removalIndex, 1);
    },
    onNodeRemoved: () => {
    },
    addIdentifiers(exp) {
    },
    removeIdentifiers(exp) {
    },
    hoist(exp) {
      if (isString(exp))
        exp = createSimpleExpression(exp);
      context.hoists.push(exp);
      const identifier = createSimpleExpression(
        `_hoisted_${context.hoists.length}`,
        false,
        exp.loc,
        2
      );
      identifier.hoisted = exp;
      return identifier;
    },
    cache(exp, isVNode = false) {
      return createCacheExpression(context.cached++, exp, isVNode);
    }
  };
  {
    context.filters = /* @__PURE__ */ new Set();
  }
  return context;
}
function transform(root, options) {
  const context = createTransformContext(root, options);
  traverseNode(root, context);
  if (options.hoistStatic) {
    hoistStatic(root, context);
  }
  if (!options.ssr) {
    createRootCodegen(root, context);
  }
  root.helpers = /* @__PURE__ */ new Set([...context.helpers.keys()]);
  root.components = [...context.components];
  root.directives = [...context.directives];
  root.imports = context.imports;
  root.hoists = context.hoists;
  root.temps = context.temps;
  root.cached = context.cached;
  {
    root.filters = [...context.filters];
  }
}
function createRootCodegen(root, context) {
  const { helper } = context;
  const { children } = root;
  if (children.length === 1) {
    const child = children[0];
    if (isSingleElementRoot(root, child) && child.codegenNode) {
      const codegenNode = child.codegenNode;
      if (codegenNode.type === 13) {
        convertToBlock(codegenNode, context);
      }
      root.codegenNode = codegenNode;
    } else {
      root.codegenNode = child;
    }
  } else if (children.length > 1) {
    let patchFlag = 64;
    let patchFlagText = PatchFlagNames[64];
    if (children.filter((c) => c.type !== 3).length === 1) {
      patchFlag |= 2048;
      patchFlagText += `, ${PatchFlagNames[2048]}`;
    }
    root.codegenNode = createVNodeCall(
      context,
      helper(FRAGMENT),
      void 0,
      root.children,
      patchFlag + (true ? ` /* ${patchFlagText} */` : ``),
      void 0,
      void 0,
      true,
      void 0,
      false
      /* isComponent */
    );
  } else
    ;
}
function traverseChildren(parent, context) {
  let i = 0;
  const nodeRemoved = () => {
    i--;
  };
  for (; i < parent.children.length; i++) {
    const child = parent.children[i];
    if (isString(child))
      continue;
    context.parent = parent;
    context.childIndex = i;
    context.onNodeRemoved = nodeRemoved;
    traverseNode(child, context);
  }
}
function traverseNode(node, context) {
  context.currentNode = node;
  const { nodeTransforms } = context;
  const exitFns = [];
  for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
    const onExit = nodeTransforms[i2](node, context);
    if (onExit) {
      if (isArray(onExit)) {
        exitFns.push(...onExit);
      } else {
        exitFns.push(onExit);
      }
    }
    if (!context.currentNode) {
      return;
    } else {
      node = context.currentNode;
    }
  }
  switch (node.type) {
    case 3:
      if (!context.ssr) {
        context.helper(CREATE_COMMENT);
      }
      break;
    case 5:
      if (!context.ssr) {
        context.helper(TO_DISPLAY_STRING);
      }
      break;
    case 9:
      for (let i2 = 0; i2 < node.branches.length; i2++) {
        traverseNode(node.branches[i2], context);
      }
      break;
    case 10:
    case 11:
    case 1:
    case 0:
      traverseChildren(node, context);
      break;
  }
  context.currentNode = node;
  let i = exitFns.length;
  while (i--) {
    exitFns[i]();
  }
}
function createStructuralDirectiveTransform(name, fn) {
  const matches = isString(name) ? (n) => n === name : (n) => name.test(n);
  return (node, context) => {
    if (node.type === 1) {
      const { props } = node;
      if (node.tagType === 3 && props.some(isVSlot)) {
        return;
      }
      const exitFns = [];
      for (let i = 0; i < props.length; i++) {
        const prop = props[i];
        if (prop.type === 7 && matches(prop.name)) {
          props.splice(i, 1);
          i--;
          const onExit = fn(node, prop, context);
          if (onExit)
            exitFns.push(onExit);
        }
      }
      return exitFns;
    }
  };
}
function createCodegenContext(ast, {
  mode = "function",
  prefixIdentifiers = mode === "module",
  sourceMap = false,
  filename = `template.vue.html`,
  scopeId = null,
  optimizeImports = false,
  runtimeGlobalName = `Vue`,
  runtimeModuleName = `vue`,
  ssrRuntimeModuleName = "vue/server-renderer",
  ssr = false,
  isTS = false,
  inSSR = false
}) {
  const context = {
    mode,
    prefixIdentifiers,
    sourceMap,
    filename,
    scopeId,
    optimizeImports,
    runtimeGlobalName,
    runtimeModuleName,
    ssrRuntimeModuleName,
    ssr,
    isTS,
    inSSR,
    source: ast.loc.source,
    code: ``,
    column: 1,
    line: 1,
    offset: 0,
    indentLevel: 0,
    pure: false,
    map: void 0,
    helper(key) {
      return `_${helperNameMap[key]}`;
    },
    push(code, node) {
      context.code += code;
    },
    indent() {
      newline(++context.indentLevel);
    },
    deindent(withoutNewLine = false) {
      if (withoutNewLine) {
        --context.indentLevel;
      } else {
        newline(--context.indentLevel);
      }
    },
    newline() {
      newline(context.indentLevel);
    }
  };
  function newline(n) {
    context.push("\n" + `  `.repeat(n));
  }
  return context;
}
function generate(ast, options = {}) {
  const context = createCodegenContext(ast, options);
  if (options.onContextCreated)
    options.onContextCreated(context);
  const {
    mode,
    push,
    prefixIdentifiers,
    indent,
    deindent,
    newline,
    scopeId,
    ssr
  } = context;
  const helpers = Array.from(ast.helpers);
  const hasHelpers = helpers.length > 0;
  const useWithBlock = !prefixIdentifiers && mode !== "module";
  const isSetupInlined = false;
  const preambleContext = isSetupInlined ? createCodegenContext(ast, options) : context;
  {
    genFunctionPreamble(ast, preambleContext);
  }
  const functionName = ssr ? `ssrRender` : `render`;
  const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
  const signature = args.join(", ");
  {
    push(`function ${functionName}(${signature}) {`);
  }
  indent();
  if (useWithBlock) {
    push(`with (_ctx) {`);
    indent();
    if (hasHelpers) {
      push(`const { ${helpers.map(aliasHelper).join(", ")} } = _Vue`);
      push(`
`);
      newline();
    }
  }
  if (ast.components.length) {
    genAssets(ast.components, "component", context);
    if (ast.directives.length || ast.temps > 0) {
      newline();
    }
  }
  if (ast.directives.length) {
    genAssets(ast.directives, "directive", context);
    if (ast.temps > 0) {
      newline();
    }
  }
  if (ast.filters && ast.filters.length) {
    newline();
    genAssets(ast.filters, "filter", context);
    newline();
  }
  if (ast.temps > 0) {
    push(`let `);
    for (let i = 0; i < ast.temps; i++) {
      push(`${i > 0 ? `, ` : ``}_temp${i}`);
    }
  }
  if (ast.components.length || ast.directives.length || ast.temps) {
    push(`
`);
    newline();
  }
  if (!ssr) {
    push(`return `);
  }
  if (ast.codegenNode) {
    genNode(ast.codegenNode, context);
  } else {
    push(`null`);
  }
  if (useWithBlock) {
    deindent();
    push(`}`);
  }
  deindent();
  push(`}`);
  return {
    ast,
    code: context.code,
    preamble: isSetupInlined ? preambleContext.code : ``,
    // SourceMapGenerator does have toJSON() method but it's not in the types
    map: context.map ? context.map.toJSON() : void 0
  };
}
function genFunctionPreamble(ast, context) {
  const {
    ssr,
    prefixIdentifiers,
    push,
    newline,
    runtimeModuleName,
    runtimeGlobalName,
    ssrRuntimeModuleName
  } = context;
  const VueBinding = runtimeGlobalName;
  const helpers = Array.from(ast.helpers);
  if (helpers.length > 0) {
    {
      push(`const _Vue = ${VueBinding}
`);
      if (ast.hoists.length) {
        const staticHelpers = [
          CREATE_VNODE,
          CREATE_ELEMENT_VNODE,
          CREATE_COMMENT,
          CREATE_TEXT,
          CREATE_STATIC
        ].filter((helper) => helpers.includes(helper)).map(aliasHelper).join(", ");
        push(`const { ${staticHelpers} } = _Vue
`);
      }
    }
  }
  genHoists(ast.hoists, context);
  newline();
  push(`return `);
}
function genAssets(assets, type, { helper, push, newline, isTS }) {
  const resolver = helper(
    type === "filter" ? RESOLVE_FILTER : type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE
  );
  for (let i = 0; i < assets.length; i++) {
    let id = assets[i];
    const maybeSelfReference = id.endsWith("__self");
    if (maybeSelfReference) {
      id = id.slice(0, -6);
    }
    push(
      `const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`
    );
    if (i < assets.length - 1) {
      newline();
    }
  }
}
function genHoists(hoists, context) {
  if (!hoists.length) {
    return;
  }
  context.pure = true;
  const { push, newline, helper, scopeId, mode } = context;
  newline();
  for (let i = 0; i < hoists.length; i++) {
    const exp = hoists[i];
    if (exp) {
      push(
        `const _hoisted_${i + 1} = ${``}`
      );
      genNode(exp, context);
      newline();
    }
  }
  context.pure = false;
}
function isText(n) {
  return isString(n) || n.type === 4 || n.type === 2 || n.type === 5 || n.type === 8;
}
function genNodeListAsArray(nodes, context) {
  const multilines = nodes.length > 3 || nodes.some((n) => isArray(n) || !isText(n));
  context.push(`[`);
  multilines && context.indent();
  genNodeList(nodes, context, multilines);
  multilines && context.deindent();
  context.push(`]`);
}
function genNodeList(nodes, context, multilines = false, comma = true) {
  const { push, newline } = context;
  for (let i = 0; i < nodes.length; i++) {
    const node = nodes[i];
    if (isString(node)) {
      push(node);
    } else if (isArray(node)) {
      genNodeListAsArray(node, context);
    } else {
      genNode(node, context);
    }
    if (i < nodes.length - 1) {
      if (multilines) {
        comma && push(",");
        newline();
      } else {
        comma && push(", ");
      }
    }
  }
}
function genNode(node, context) {
  if (isString(node)) {
    context.push(node);
    return;
  }
  if (isSymbol(node)) {
    context.push(context.helper(node));
    return;
  }
  switch (node.type) {
    case 1:
    case 9:
    case 11:
      assert(
        node.codegenNode != null,
        `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`
      );
      genNode(node.codegenNode, context);
      break;
    case 2:
      genText(node, context);
      break;
    case 4:
      genExpression(node, context);
      break;
    case 5:
      genInterpolation(node, context);
      break;
    case 12:
      genNode(node.codegenNode, context);
      break;
    case 8:
      genCompoundExpression(node, context);
      break;
    case 3:
      genComment(node, context);
      break;
    case 13:
      genVNodeCall(node, context);
      break;
    case 14:
      genCallExpression(node, context);
      break;
    case 15:
      genObjectExpression(node, context);
      break;
    case 17:
      genArrayExpression(node, context);
      break;
    case 18:
      genFunctionExpression(node, context);
      break;
    case 19:
      genConditionalExpression(node, context);
      break;
    case 20:
      genCacheExpression(node, context);
      break;
    case 21:
      genNodeList(node.body, context, true, false);
      break;
    case 22:
      break;
    case 23:
      break;
    case 24:
      break;
    case 25:
      break;
    case 26:
      break;
    case 10:
      break;
    default:
      if (true) {
        assert(false, `unhandled codegen node type: ${node.type}`);
        const exhaustiveCheck = node;
        return exhaustiveCheck;
      }
  }
}
function genText(node, context) {
  context.push(JSON.stringify(node.content), node);
}
function genExpression(node, context) {
  const { content, isStatic } = node;
  context.push(isStatic ? JSON.stringify(content) : content, node);
}
function genInterpolation(node, context) {
  const { push, helper, pure } = context;
  if (pure)
    push(PURE_ANNOTATION);
  push(`${helper(TO_DISPLAY_STRING)}(`);
  genNode(node.content, context);
  push(`)`);
}
function genCompoundExpression(node, context) {
  for (let i = 0; i < node.children.length; i++) {
    const child = node.children[i];
    if (isString(child)) {
      context.push(child);
    } else {
      genNode(child, context);
    }
  }
}
function genExpressionAsPropertyKey(node, context) {
  const { push } = context;
  if (node.type === 8) {
    push(`[`);
    genCompoundExpression(node, context);
    push(`]`);
  } else if (node.isStatic) {
    const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
    push(text, node);
  } else {
    push(`[${node.content}]`, node);
  }
}
function genComment(node, context) {
  const { push, helper, pure } = context;
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);
}
function genVNodeCall(node, context) {
  const { push, helper, pure } = context;
  const {
    tag,
    props,
    children,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2
  } = node;
  if (directives) {
    push(helper(WITH_DIRECTIVES) + `(`);
  }
  if (isBlock) {
    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
  }
  if (pure) {
    push(PURE_ANNOTATION);
  }
  const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent2) : getVNodeHelper(context.inSSR, isComponent2);
  push(helper(callHelper) + `(`, node);
  genNodeList(
    genNullableArgs([tag, props, children, patchFlag, dynamicProps]),
    context
  );
  push(`)`);
  if (isBlock) {
    push(`)`);
  }
  if (directives) {
    push(`, `);
    genNode(directives, context);
    push(`)`);
  }
}
function genNullableArgs(args) {
  let i = args.length;
  while (i--) {
    if (args[i] != null)
      break;
  }
  return args.slice(0, i + 1).map((arg) => arg || `null`);
}
function genCallExpression(node, context) {
  const { push, helper, pure } = context;
  const callee = isString(node.callee) ? node.callee : helper(node.callee);
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(callee + `(`, node);
  genNodeList(node.arguments, context);
  push(`)`);
}
function genObjectExpression(node, context) {
  const { push, indent, deindent, newline } = context;
  const { properties } = node;
  if (!properties.length) {
    push(`{}`, node);
    return;
  }
  const multilines = properties.length > 1 || properties.some((p) => p.value.type !== 4);
  push(multilines ? `{` : `{ `);
  multilines && indent();
  for (let i = 0; i < properties.length; i++) {
    const { key, value } = properties[i];
    genExpressionAsPropertyKey(key, context);
    push(`: `);
    genNode(value, context);
    if (i < properties.length - 1) {
      push(`,`);
      newline();
    }
  }
  multilines && deindent();
  push(multilines ? `}` : ` }`);
}
function genArrayExpression(node, context) {
  genNodeListAsArray(node.elements, context);
}
function genFunctionExpression(node, context) {
  const { push, indent, deindent } = context;
  const { params, returns, body, newline, isSlot } = node;
  if (isSlot) {
    push(`_${helperNameMap[WITH_CTX]}(`);
  }
  push(`(`, node);
  if (isArray(params)) {
    genNodeList(params, context);
  } else if (params) {
    genNode(params, context);
  }
  push(`) => `);
  if (newline || body) {
    push(`{`);
    indent();
  }
  if (returns) {
    if (newline) {
      push(`return `);
    }
    if (isArray(returns)) {
      genNodeListAsArray(returns, context);
    } else {
      genNode(returns, context);
    }
  } else if (body) {
    genNode(body, context);
  }
  if (newline || body) {
    deindent();
    push(`}`);
  }
  if (isSlot) {
    if (node.isNonScopedSlot) {
      push(`, undefined, true`);
    }
    push(`)`);
  }
}
function genConditionalExpression(node, context) {
  const { test, consequent, alternate, newline: needNewline } = node;
  const { push, indent, deindent, newline } = context;
  if (test.type === 4) {
    const needsParens = !isSimpleIdentifier(test.content);
    needsParens && push(`(`);
    genExpression(test, context);
    needsParens && push(`)`);
  } else {
    push(`(`);
    genNode(test, context);
    push(`)`);
  }
  needNewline && indent();
  context.indentLevel++;
  needNewline || push(` `);
  push(`? `);
  genNode(consequent, context);
  context.indentLevel--;
  needNewline && newline();
  needNewline || push(` `);
  push(`: `);
  const isNested = alternate.type === 19;
  if (!isNested) {
    context.indentLevel++;
  }
  genNode(alternate, context);
  if (!isNested) {
    context.indentLevel--;
  }
  needNewline && deindent(
    true
    /* without newline */
  );
}
function genCacheExpression(node, context) {
  const { push, helper, indent, deindent, newline } = context;
  push(`_cache[${node.index}] || (`);
  if (node.isVNode) {
    indent();
    push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
    newline();
  }
  push(`_cache[${node.index}] = `);
  genNode(node.value, context);
  if (node.isVNode) {
    push(`,`);
    newline();
    push(`${helper(SET_BLOCK_TRACKING)}(1),`);
    newline();
    push(`_cache[${node.index}]`);
    deindent();
  }
  push(`)`);
}
function walkIdentifiers(root, onIdentifier, includeAll = false, parentStack = [], knownIds = /* @__PURE__ */ Object.create(null)) {
  {
    return;
  }
}
function isReferencedIdentifier(id, parent, parentStack) {
  {
    return false;
  }
}
function isInDestructureAssignment(parent, parentStack) {
  if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
    let i = parentStack.length;
    while (i--) {
      const p = parentStack[i];
      if (p.type === "AssignmentExpression") {
        return true;
      } else if (p.type !== "ObjectProperty" && !p.type.endsWith("Pattern")) {
        break;
      }
    }
  }
  return false;
}
function walkFunctionParams(node, onIdent) {
  for (const p of node.params) {
    for (const id of extractIdentifiers(p)) {
      onIdent(id);
    }
  }
}
function walkBlockDeclarations(block, onIdent) {
  for (const stmt of block.body) {
    if (stmt.type === "VariableDeclaration") {
      if (stmt.declare)
        continue;
      for (const decl of stmt.declarations) {
        for (const id of extractIdentifiers(decl.id)) {
          onIdent(id);
        }
      }
    } else if (stmt.type === "FunctionDeclaration" || stmt.type === "ClassDeclaration") {
      if (stmt.declare || !stmt.id)
        continue;
      onIdent(stmt.id);
    }
  }
}
function extractIdentifiers(param, nodes = []) {
  switch (param.type) {
    case "Identifier":
      nodes.push(param);
      break;
    case "MemberExpression":
      let object = param;
      while (object.type === "MemberExpression") {
        object = object.object;
      }
      nodes.push(object);
      break;
    case "ObjectPattern":
      for (const prop of param.properties) {
        if (prop.type === "RestElement") {
          extractIdentifiers(prop.argument, nodes);
        } else {
          extractIdentifiers(prop.value, nodes);
        }
      }
      break;
    case "ArrayPattern":
      param.elements.forEach((element) => {
        if (element)
          extractIdentifiers(element, nodes);
      });
      break;
    case "RestElement":
      extractIdentifiers(param.argument, nodes);
      break;
    case "AssignmentPattern":
      extractIdentifiers(param.left, nodes);
      break;
  }
  return nodes;
}
function validateBrowserExpression(node, context, asParams = false, asRawStatements = false) {
  const exp = node.content;
  if (!exp.trim()) {
    return;
  }
  try {
    new Function(
      asRawStatements ? ` ${exp} ` : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`
    );
  } catch (e) {
    let message = e.message;
    const keywordMatch = exp.replace(stripStringRE, "").match(prohibitedKeywordRE);
    if (keywordMatch) {
      message = `avoid using JavaScript keyword as property name: "${keywordMatch[0]}"`;
    }
    context.onError(
      createCompilerError(
        45,
        node.loc,
        void 0,
        message
      )
    );
  }
}
function processExpression(node, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {
  {
    if (true) {
      validateBrowserExpression(node, context, asParams, asRawStatements);
    }
    return node;
  }
}
function stringifyExpression(exp) {
  if (isString(exp)) {
    return exp;
  } else if (exp.type === 4) {
    return exp.content;
  } else {
    return exp.children.map(stringifyExpression).join("");
  }
}
function processIf(node, dir, context, processCodegen) {
  if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
    const loc = dir.exp ? dir.exp.loc : node.loc;
    context.onError(
      createCompilerError(28, dir.loc)
    );
    dir.exp = createSimpleExpression(`true`, false, loc);
  }
  if (dir.exp) {
    validateBrowserExpression(dir.exp, context);
  }
  if (dir.name === "if") {
    const branch = createIfBranch(node, dir);
    const ifNode = {
      type: 9,
      loc: node.loc,
      branches: [branch]
    };
    context.replaceNode(ifNode);
    if (processCodegen) {
      return processCodegen(ifNode, branch, true);
    }
  } else {
    const siblings = context.parent.children;
    const comments = [];
    let i = siblings.indexOf(node);
    while (i-- >= -1) {
      const sibling = siblings[i];
      if (sibling && sibling.type === 3) {
        context.removeNode(sibling);
        comments.unshift(sibling);
        continue;
      }
      if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
        context.removeNode(sibling);
        continue;
      }
      if (sibling && sibling.type === 9) {
        if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
          context.onError(
            createCompilerError(30, node.loc)
          );
        }
        context.removeNode();
        const branch = createIfBranch(node, dir);
        if (comments.length && // #3619 ignore comments if the v-if is direct child of <transition>
        !(context.parent && context.parent.type === 1 && isBuiltInType(context.parent.tag, "transition"))) {
          branch.children = [...comments, ...branch.children];
        }
        if (true) {
          const key = branch.userKey;
          if (key) {
            sibling.branches.forEach(({ userKey }) => {
              if (isSameKey(userKey, key)) {
                context.onError(
                  createCompilerError(
                    29,
                    branch.userKey.loc
                  )
                );
              }
            });
          }
        }
        sibling.branches.push(branch);
        const onExit = processCodegen && processCodegen(sibling, branch, false);
        traverseNode(branch, context);
        if (onExit)
          onExit();
        context.currentNode = null;
      } else {
        context.onError(
          createCompilerError(30, node.loc)
        );
      }
      break;
    }
  }
}
function createIfBranch(node, dir) {
  const isTemplateIf = node.tagType === 3;
  return {
    type: 10,
    loc: node.loc,
    condition: dir.name === "else" ? void 0 : dir.exp,
    children: isTemplateIf && !findDir(node, "for") ? node.children : [node],
    userKey: findProp(node, `key`),
    isTemplateIf
  };
}
function createCodegenNodeForBranch(branch, keyIndex, context) {
  if (branch.condition) {
    return createConditionalExpression(
      branch.condition,
      createChildrenCodegenNode(branch, keyIndex, context),
      // make sure to pass in asBlock: true so that the comment node call
      // closes the current block.
      createCallExpression(context.helper(CREATE_COMMENT), [
        true ? '"v-if"' : '""',
        "true"
      ])
    );
  } else {
    return createChildrenCodegenNode(branch, keyIndex, context);
  }
}
function createChildrenCodegenNode(branch, keyIndex, context) {
  const { helper } = context;
  const keyProperty = createObjectProperty(
    `key`,
    createSimpleExpression(
      `${keyIndex}`,
      false,
      locStub,
      2
    )
  );
  const { children } = branch;
  const firstChild = children[0];
  const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
  if (needFragmentWrapper) {
    if (children.length === 1 && firstChild.type === 11) {
      const vnodeCall = firstChild.codegenNode;
      injectProp(vnodeCall, keyProperty, context);
      return vnodeCall;
    } else {
      let patchFlag = 64;
      let patchFlagText = PatchFlagNames[64];
      if (!branch.isTemplateIf && children.filter((c) => c.type !== 3).length === 1) {
        patchFlag |= 2048;
        patchFlagText += `, ${PatchFlagNames[2048]}`;
      }
      return createVNodeCall(
        context,
        helper(FRAGMENT),
        createObjectExpression([keyProperty]),
        children,
        patchFlag + (true ? ` /* ${patchFlagText} */` : ``),
        void 0,
        void 0,
        true,
        false,
        false,
        branch.loc
      );
    }
  } else {
    const ret = firstChild.codegenNode;
    const vnodeCall = getMemoedVNodeCall(ret);
    if (vnodeCall.type === 13) {
      convertToBlock(vnodeCall, context);
    }
    injectProp(vnodeCall, keyProperty, context);
    return ret;
  }
}
function isSameKey(a, b) {
  if (!a || a.type !== b.type) {
    return false;
  }
  if (a.type === 6) {
    if (a.value.content !== b.value.content) {
      return false;
    }
  } else {
    const exp = a.exp;
    const branchExp = b.exp;
    if (exp.type !== branchExp.type) {
      return false;
    }
    if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {
      return false;
    }
  }
  return true;
}
function getParentCondition(node) {
  while (true) {
    if (node.type === 19) {
      if (node.alternate.type === 19) {
        node = node.alternate;
      } else {
        return node;
      }
    } else if (node.type === 20) {
      node = node.value;
    }
  }
}
function processFor(node, dir, context, processCodegen) {
  if (!dir.exp) {
    context.onError(
      createCompilerError(31, dir.loc)
    );
    return;
  }
  const parseResult = parseForExpression(
    // can only be simple expression because vFor transform is applied
    // before expression transform.
    dir.exp,
    context
  );
  if (!parseResult) {
    context.onError(
      createCompilerError(32, dir.loc)
    );
    return;
  }
  const { addIdentifiers, removeIdentifiers, scopes } = context;
  const { source, value, key, index } = parseResult;
  const forNode = {
    type: 11,
    loc: dir.loc,
    source,
    valueAlias: value,
    keyAlias: key,
    objectIndexAlias: index,
    parseResult,
    children: isTemplateNode(node) ? node.children : [node]
  };
  context.replaceNode(forNode);
  scopes.vFor++;
  const onExit = processCodegen && processCodegen(forNode);
  return () => {
    scopes.vFor--;
    if (onExit)
      onExit();
  };
}
function parseForExpression(input, context) {
  const loc = input.loc;
  const exp = input.content;
  const inMatch = exp.match(forAliasRE);
  if (!inMatch)
    return;
  const [, LHS, RHS] = inMatch;
  const result = {
    source: createAliasExpression(
      loc,
      RHS.trim(),
      exp.indexOf(RHS, LHS.length)
    ),
    value: void 0,
    key: void 0,
    index: void 0
  };
  if (true) {
    validateBrowserExpression(result.source, context);
  }
  let valueContent = LHS.trim().replace(stripParensRE, "").trim();
  const trimmedOffset = LHS.indexOf(valueContent);
  const iteratorMatch = valueContent.match(forIteratorRE);
  if (iteratorMatch) {
    valueContent = valueContent.replace(forIteratorRE, "").trim();
    const keyContent = iteratorMatch[1].trim();
    let keyOffset;
    if (keyContent) {
      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
      result.key = createAliasExpression(loc, keyContent, keyOffset);
      if (true) {
        validateBrowserExpression(
          result.key,
          context,
          true
        );
      }
    }
    if (iteratorMatch[2]) {
      const indexContent = iteratorMatch[2].trim();
      if (indexContent) {
        result.index = createAliasExpression(
          loc,
          indexContent,
          exp.indexOf(
            indexContent,
            result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length
          )
        );
        if (true) {
          validateBrowserExpression(
            result.index,
            context,
            true
          );
        }
      }
    }
  }
  if (valueContent) {
    result.value = createAliasExpression(loc, valueContent, trimmedOffset);
    if (true) {
      validateBrowserExpression(
        result.value,
        context,
        true
      );
    }
  }
  return result;
}
function createAliasExpression(range, content, offset) {
  return createSimpleExpression(
    content,
    false,
    getInnerRange(range, offset, content.length)
  );
}
function createForLoopParams({ value, key, index }, memoArgs = []) {
  return createParamsList([value, key, index, ...memoArgs]);
}
function createParamsList(args) {
  let i = args.length;
  while (i--) {
    if (args[i])
      break;
  }
  return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression(`_`.repeat(i2 + 1), false));
}
function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
  context.helper(WITH_CTX);
  const { children, loc } = node;
  const slotsProperties = [];
  const dynamicSlots = [];
  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
  const onComponentSlot = findDir(node, "slot", true);
  if (onComponentSlot) {
    const { arg, exp } = onComponentSlot;
    if (arg && !isStaticExp(arg)) {
      hasDynamicSlots = true;
    }
    slotsProperties.push(
      createObjectProperty(
        arg || createSimpleExpression("default", true),
        buildSlotFn(exp, children, loc)
      )
    );
  }
  let hasTemplateSlots = false;
  let hasNamedDefaultSlot = false;
  const implicitDefaultChildren = [];
  const seenSlotNames = /* @__PURE__ */ new Set();
  let conditionalBranchIndex = 0;
  for (let i = 0; i < children.length; i++) {
    const slotElement = children[i];
    let slotDir;
    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
      if (slotElement.type !== 3) {
        implicitDefaultChildren.push(slotElement);
      }
      continue;
    }
    if (onComponentSlot) {
      context.onError(
        createCompilerError(37, slotDir.loc)
      );
      break;
    }
    hasTemplateSlots = true;
    const { children: slotChildren, loc: slotLoc } = slotElement;
    const {
      arg: slotName = createSimpleExpression(`default`, true),
      exp: slotProps,
      loc: dirLoc
    } = slotDir;
    let staticSlotName;
    if (isStaticExp(slotName)) {
      staticSlotName = slotName ? slotName.content : `default`;
    } else {
      hasDynamicSlots = true;
    }
    const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
    let vIf;
    let vElse;
    let vFor;
    if (vIf = findDir(slotElement, "if")) {
      hasDynamicSlots = true;
      dynamicSlots.push(
        createConditionalExpression(
          vIf.exp,
          buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++),
          defaultFallback
        )
      );
    } else if (vElse = findDir(
      slotElement,
      /^else(-if)?$/,
      true
      /* allowEmpty */
    )) {
      let j = i;
      let prev;
      while (j--) {
        prev = children[j];
        if (prev.type !== 3) {
          break;
        }
      }
      if (prev && isTemplateNode(prev) && findDir(prev, "if")) {
        children.splice(i, 1);
        i--;
        let conditional = dynamicSlots[dynamicSlots.length - 1];
        while (conditional.alternate.type === 19) {
          conditional = conditional.alternate;
        }
        conditional.alternate = vElse.exp ? createConditionalExpression(
          vElse.exp,
          buildDynamicSlot(
            slotName,
            slotFunction,
            conditionalBranchIndex++
          ),
          defaultFallback
        ) : buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++);
      } else {
        context.onError(
          createCompilerError(30, vElse.loc)
        );
      }
    } else if (vFor = findDir(slotElement, "for")) {
      hasDynamicSlots = true;
      const parseResult = vFor.parseResult || parseForExpression(vFor.exp, context);
      if (parseResult) {
        dynamicSlots.push(
          createCallExpression(context.helper(RENDER_LIST), [
            parseResult.source,
            createFunctionExpression(
              createForLoopParams(parseResult),
              buildDynamicSlot(slotName, slotFunction),
              true
              /* force newline */
            )
          ])
        );
      } else {
        context.onError(
          createCompilerError(32, vFor.loc)
        );
      }
    } else {
      if (staticSlotName) {
        if (seenSlotNames.has(staticSlotName)) {
          context.onError(
            createCompilerError(
              38,
              dirLoc
            )
          );
          continue;
        }
        seenSlotNames.add(staticSlotName);
        if (staticSlotName === "default") {
          hasNamedDefaultSlot = true;
        }
      }
      slotsProperties.push(createObjectProperty(slotName, slotFunction));
    }
  }
  if (!onComponentSlot) {
    const buildDefaultSlotProperty = (props, children2) => {
      const fn = buildSlotFn(props, children2, loc);
      if (context.compatConfig) {
        fn.isNonScopedSlot = true;
      }
      return createObjectProperty(`default`, fn);
    };
    if (!hasTemplateSlots) {
      slotsProperties.push(buildDefaultSlotProperty(void 0, children));
    } else if (implicitDefaultChildren.length && // #3766
    // with whitespace: 'preserve', whitespaces between slots will end up in
    // implicitDefaultChildren. Ignore if all implicit children are whitespaces.
    implicitDefaultChildren.some((node2) => isNonWhitespaceContent(node2))) {
      if (hasNamedDefaultSlot) {
        context.onError(
          createCompilerError(
            39,
            implicitDefaultChildren[0].loc
          )
        );
      } else {
        slotsProperties.push(
          buildDefaultSlotProperty(void 0, implicitDefaultChildren)
        );
      }
    }
  }
  const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;
  let slots = createObjectExpression(
    slotsProperties.concat(
      createObjectProperty(
        `_`,
        // 2 = compiled but dynamic = can skip normalization, but must run diff
        // 1 = compiled and static = can skip normalization AND diff as optimized
        createSimpleExpression(
          slotFlag + (true ? ` /* ${slotFlagsText[slotFlag]} */` : ``),
          false
        )
      )
    ),
    loc
  );
  if (dynamicSlots.length) {
    slots = createCallExpression(context.helper(CREATE_SLOTS), [
      slots,
      createArrayExpression(dynamicSlots)
    ]);
  }
  return {
    slots,
    hasDynamicSlots
  };
}
function buildDynamicSlot(name, fn, index) {
  const props = [
    createObjectProperty(`name`, name),
    createObjectProperty(`fn`, fn)
  ];
  if (index != null) {
    props.push(
      createObjectProperty(`key`, createSimpleExpression(String(index), true))
    );
  }
  return createObjectExpression(props);
}
function hasForwardedSlots(children) {
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    switch (child.type) {
      case 1:
        if (child.tagType === 2 || hasForwardedSlots(child.children)) {
          return true;
        }
        break;
      case 9:
        if (hasForwardedSlots(child.branches))
          return true;
        break;
      case 10:
      case 11:
        if (hasForwardedSlots(child.children))
          return true;
        break;
    }
  }
  return false;
}
function isNonWhitespaceContent(node) {
  if (node.type !== 2 && node.type !== 12)
    return true;
  return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);
}
function resolveComponentType(node, context, ssr = false) {
  let { tag } = node;
  const isExplicitDynamic = isComponentTag(tag);
  const isProp = findProp(node, "is");
  if (isProp) {
    if (isExplicitDynamic || isCompatEnabled(
      "COMPILER_IS_ON_ELEMENT",
      context
    )) {
      const exp = isProp.type === 6 ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;
      if (exp) {
        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
          exp
        ]);
      }
    } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
      tag = isProp.value.content.slice(4);
    }
  }
  const isDir = !isExplicitDynamic && findDir(node, "is");
  if (isDir && isDir.exp) {
    if (true) {
      context.onWarn(
        createCompilerError(52, isDir.loc)
      );
    }
    return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
      isDir.exp
    ]);
  }
  const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
  if (builtIn) {
    if (!ssr)
      context.helper(builtIn);
    return builtIn;
  }
  context.helper(RESOLVE_COMPONENT);
  context.components.add(tag);
  return toValidAssetId(tag, `component`);
}
function buildProps(node, context, props = node.props, isComponent2, isDynamicComponent, ssr = false) {
  const { tag, loc: elementLoc, children } = node;
  let properties = [];
  const mergeArgs = [];
  const runtimeDirectives = [];
  const hasChildren = children.length > 0;
  let shouldUseBlock = false;
  let patchFlag = 0;
  let hasRef = false;
  let hasClassBinding = false;
  let hasStyleBinding = false;
  let hasHydrationEventBinding = false;
  let hasDynamicKeys = false;
  let hasVnodeHook = false;
  const dynamicPropNames = [];
  const pushMergeArg = (arg) => {
    if (properties.length) {
      mergeArgs.push(
        createObjectExpression(dedupeProperties(properties), elementLoc)
      );
      properties = [];
    }
    if (arg)
      mergeArgs.push(arg);
  };
  const analyzePatchFlag = ({ key, value }) => {
    if (isStaticExp(key)) {
      const name = key.content;
      const isEventHandler = isOn(name);
      if (isEventHandler && (!isComponent2 || isDynamicComponent) && // omit the flag for click handlers because hydration gives click
      // dedicated fast path.
      name.toLowerCase() !== "onclick" && // omit v-model handlers
      name !== "onUpdate:modelValue" && // omit onVnodeXXX hooks
      !isReservedProp(name)) {
        hasHydrationEventBinding = true;
      }
      if (isEventHandler && isReservedProp(name)) {
        hasVnodeHook = true;
      }
      if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) {
        return;
      }
      if (name === "ref") {
        hasRef = true;
      } else if (name === "class") {
        hasClassBinding = true;
      } else if (name === "style") {
        hasStyleBinding = true;
      } else if (name !== "key" && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
      if (isComponent2 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
    } else {
      hasDynamicKeys = true;
    }
  };
  for (let i = 0; i < props.length; i++) {
    const prop = props[i];
    if (prop.type === 6) {
      const { loc, name, value } = prop;
      let isStatic = true;
      if (name === "ref") {
        hasRef = true;
        if (context.scopes.vFor > 0) {
          properties.push(
            createObjectProperty(
              createSimpleExpression("ref_for", true),
              createSimpleExpression("true")
            )
          );
        }
      }
      if (name === "is" && (isComponentTag(tag) || value && value.content.startsWith("vue:") || isCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        context
      ))) {
        continue;
      }
      properties.push(
        createObjectProperty(
          createSimpleExpression(
            name,
            true,
            getInnerRange(loc, 0, name.length)
          ),
          createSimpleExpression(
            value ? value.content : "",
            isStatic,
            value ? value.loc : loc
          )
        )
      );
    } else {
      const { name, arg, exp, loc } = prop;
      const isVBind = name === "bind";
      const isVOn = name === "on";
      if (name === "slot") {
        if (!isComponent2) {
          context.onError(
            createCompilerError(40, loc)
          );
        }
        continue;
      }
      if (name === "once" || name === "memo") {
        continue;
      }
      if (name === "is" || isVBind && isStaticArgOf(arg, "is") && (isComponentTag(tag) || isCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        context
      ))) {
        continue;
      }
      if (isVOn && ssr) {
        continue;
      }
      if (
        // #938: elements with dynamic keys should be forced into blocks
        isVBind && isStaticArgOf(arg, "key") || // inline before-update hooks need to force block so that it is invoked
        // before children
        isVOn && hasChildren && isStaticArgOf(arg, "vue:before-update")
      ) {
        shouldUseBlock = true;
      }
      if (isVBind && isStaticArgOf(arg, "ref") && context.scopes.vFor > 0) {
        properties.push(
          createObjectProperty(
            createSimpleExpression("ref_for", true),
            createSimpleExpression("true")
          )
        );
      }
      if (!arg && (isVBind || isVOn)) {
        hasDynamicKeys = true;
        if (exp) {
          if (isVBind) {
            pushMergeArg();
            {
              if (true) {
                const hasOverridableKeys = mergeArgs.some((arg2) => {
                  if (arg2.type === 15) {
                    return arg2.properties.some(({ key }) => {
                      if (key.type !== 4 || !key.isStatic) {
                        return true;
                      }
                      return key.content !== "class" && key.content !== "style" && !isOn(key.content);
                    });
                  } else {
                    return true;
                  }
                });
                if (hasOverridableKeys) {
                  checkCompatEnabled(
                    "COMPILER_V_BIND_OBJECT_ORDER",
                    context,
                    loc
                  );
                }
              }
              if (isCompatEnabled(
                "COMPILER_V_BIND_OBJECT_ORDER",
                context
              )) {
                mergeArgs.unshift(exp);
                continue;
              }
            }
            mergeArgs.push(exp);
          } else {
            pushMergeArg({
              type: 14,
              loc,
              callee: context.helper(TO_HANDLERS),
              arguments: isComponent2 ? [exp] : [exp, `true`]
            });
          }
        } else {
          context.onError(
            createCompilerError(
              isVBind ? 34 : 35,
              loc
            )
          );
        }
        continue;
      }
      const directiveTransform = context.directiveTransforms[name];
      if (directiveTransform) {
        const { props: props2, needRuntime } = directiveTransform(prop, node, context);
        !ssr && props2.forEach(analyzePatchFlag);
        if (isVOn && arg && !isStaticExp(arg)) {
          pushMergeArg(createObjectExpression(props2, elementLoc));
        } else {
          properties.push(...props2);
        }
        if (needRuntime) {
          runtimeDirectives.push(prop);
          if (isSymbol(needRuntime)) {
            directiveImportMap.set(prop, needRuntime);
          }
        }
      } else if (!isBuiltInDirective(name)) {
        runtimeDirectives.push(prop);
        if (hasChildren) {
          shouldUseBlock = true;
        }
      }
    }
  }
  let propsExpression = void 0;
  if (mergeArgs.length) {
    pushMergeArg();
    if (mergeArgs.length > 1) {
      propsExpression = createCallExpression(
        context.helper(MERGE_PROPS),
        mergeArgs,
        elementLoc
      );
    } else {
      propsExpression = mergeArgs[0];
    }
  } else if (properties.length) {
    propsExpression = createObjectExpression(
      dedupeProperties(properties),
      elementLoc
    );
  }
  if (hasDynamicKeys) {
    patchFlag |= 16;
  } else {
    if (hasClassBinding && !isComponent2) {
      patchFlag |= 2;
    }
    if (hasStyleBinding && !isComponent2) {
      patchFlag |= 4;
    }
    if (dynamicPropNames.length) {
      patchFlag |= 8;
    }
    if (hasHydrationEventBinding) {
      patchFlag |= 32;
    }
  }
  if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
    patchFlag |= 512;
  }
  if (!context.inSSR && propsExpression) {
    switch (propsExpression.type) {
      case 15:
        let classKeyIndex = -1;
        let styleKeyIndex = -1;
        let hasDynamicKey = false;
        for (let i = 0; i < propsExpression.properties.length; i++) {
          const key = propsExpression.properties[i].key;
          if (isStaticExp(key)) {
            if (key.content === "class") {
              classKeyIndex = i;
            } else if (key.content === "style") {
              styleKeyIndex = i;
            }
          } else if (!key.isHandlerKey) {
            hasDynamicKey = true;
          }
        }
        const classProp = propsExpression.properties[classKeyIndex];
        const styleProp = propsExpression.properties[styleKeyIndex];
        if (!hasDynamicKey) {
          if (classProp && !isStaticExp(classProp.value)) {
            classProp.value = createCallExpression(
              context.helper(NORMALIZE_CLASS),
              [classProp.value]
            );
          }
          if (styleProp && // the static style is compiled into an object,
          // so use `hasStyleBinding` to ensure that it is a dynamic style binding
          (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` || // v-bind:style and style both exist,
          // v-bind:style with static literal object
          styleProp.value.type === 17)) {
            styleProp.value = createCallExpression(
              context.helper(NORMALIZE_STYLE),
              [styleProp.value]
            );
          }
        } else {
          propsExpression = createCallExpression(
            context.helper(NORMALIZE_PROPS),
            [propsExpression]
          );
        }
        break;
      case 14:
        break;
      default:
        propsExpression = createCallExpression(
          context.helper(NORMALIZE_PROPS),
          [
            createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
              propsExpression
            ])
          ]
        );
        break;
    }
  }
  return {
    props: propsExpression,
    directives: runtimeDirectives,
    patchFlag,
    dynamicPropNames,
    shouldUseBlock
  };
}
function dedupeProperties(properties) {
  const knownProps = /* @__PURE__ */ new Map();
  const deduped = [];
  for (let i = 0; i < properties.length; i++) {
    const prop = properties[i];
    if (prop.key.type === 8 || !prop.key.isStatic) {
      deduped.push(prop);
      continue;
    }
    const name = prop.key.content;
    const existing = knownProps.get(name);
    if (existing) {
      if (name === "style" || name === "class" || isOn(name)) {
        mergeAsArray(existing, prop);
      }
    } else {
      knownProps.set(name, prop);
      deduped.push(prop);
    }
  }
  return deduped;
}
function mergeAsArray(existing, incoming) {
  if (existing.value.type === 17) {
    existing.value.elements.push(incoming.value);
  } else {
    existing.value = createArrayExpression(
      [existing.value, incoming.value],
      existing.loc
    );
  }
}
function buildDirectiveArgs(dir, context) {
  const dirArgs = [];
  const runtime = directiveImportMap.get(dir);
  if (runtime) {
    dirArgs.push(context.helperString(runtime));
  } else {
    {
      context.helper(RESOLVE_DIRECTIVE);
      context.directives.add(dir.name);
      dirArgs.push(toValidAssetId(dir.name, `directive`));
    }
  }
  const { loc } = dir;
  if (dir.exp)
    dirArgs.push(dir.exp);
  if (dir.arg) {
    if (!dir.exp) {
      dirArgs.push(`void 0`);
    }
    dirArgs.push(dir.arg);
  }
  if (Object.keys(dir.modifiers).length) {
    if (!dir.arg) {
      if (!dir.exp) {
        dirArgs.push(`void 0`);
      }
      dirArgs.push(`void 0`);
    }
    const trueExpression = createSimpleExpression(`true`, false, loc);
    dirArgs.push(
      createObjectExpression(
        dir.modifiers.map(
          (modifier) => createObjectProperty(modifier, trueExpression)
        ),
        loc
      )
    );
  }
  return createArrayExpression(dirArgs, dir.loc);
}
function stringifyDynamicPropNames(props) {
  let propsNamesString = `[`;
  for (let i = 0, l = props.length; i < l; i++) {
    propsNamesString += JSON.stringify(props[i]);
    if (i < l - 1)
      propsNamesString += ", ";
  }
  return propsNamesString + `]`;
}
function isComponentTag(tag) {
  return tag === "component" || tag === "Component";
}
function processSlotOutlet(node, context) {
  let slotName = `"default"`;
  let slotProps = void 0;
  const nonNameProps = [];
  for (let i = 0; i < node.props.length; i++) {
    const p = node.props[i];
    if (p.type === 6) {
      if (p.value) {
        if (p.name === "name") {
          slotName = JSON.stringify(p.value.content);
        } else {
          p.name = camelize(p.name);
          nonNameProps.push(p);
        }
      }
    } else {
      if (p.name === "bind" && isStaticArgOf(p.arg, "name")) {
        if (p.exp)
          slotName = p.exp;
      } else {
        if (p.name === "bind" && p.arg && isStaticExp(p.arg)) {
          p.arg.content = camelize(p.arg.content);
        }
        nonNameProps.push(p);
      }
    }
  }
  if (nonNameProps.length > 0) {
    const { props, directives } = buildProps(
      node,
      context,
      nonNameProps,
      false,
      false
    );
    slotProps = props;
    if (directives.length) {
      context.onError(
        createCompilerError(
          36,
          directives[0].loc
        )
      );
    }
  }
  return {
    slotName,
    slotProps
  };
}
function createTransformProps(props = []) {
  return { props };
}
function rewriteFilter(node, context) {
  if (node.type === 4) {
    parseFilter(node, context);
  } else {
    for (let i = 0; i < node.children.length; i++) {
      const child = node.children[i];
      if (typeof child !== "object")
        continue;
      if (child.type === 4) {
        parseFilter(child, context);
      } else if (child.type === 8) {
        rewriteFilter(node, context);
      } else if (child.type === 5) {
        rewriteFilter(child.content, context);
      }
    }
  }
}
function parseFilter(node, context) {
  const exp = node.content;
  let inSingle = false;
  let inDouble = false;
  let inTemplateString = false;
  let inRegex = false;
  let curly = 0;
  let square = 0;
  let paren = 0;
  let lastFilterIndex = 0;
  let c, prev, i, expression, filters = [];
  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 39 && prev !== 92)
        inSingle = false;
    } else if (inDouble) {
      if (c === 34 && prev !== 92)
        inDouble = false;
    } else if (inTemplateString) {
      if (c === 96 && prev !== 92)
        inTemplateString = false;
    } else if (inRegex) {
      if (c === 47 && prev !== 92)
        inRegex = false;
    } else if (c === 124 && // pipe
    exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
      if (expression === void 0) {
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 34:
          inDouble = true;
          break;
        case 39:
          inSingle = true;
          break;
        case 96:
          inTemplateString = true;
          break;
        case 40:
          paren++;
          break;
        case 41:
          paren--;
          break;
        case 91:
          square++;
          break;
        case 93:
          square--;
          break;
        case 123:
          curly++;
          break;
        case 125:
          curly--;
          break;
      }
      if (c === 47) {
        let j = i - 1;
        let p;
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== " ")
            break;
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }
  if (expression === void 0) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }
  function pushFilter() {
    filters.push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }
  if (filters.length) {
    warnDeprecation(
      "COMPILER_FILTER",
      context,
      node.loc
    );
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i], context);
    }
    node.content = expression;
  }
}
function wrapFilter(exp, filter, context) {
  context.helper(RESOLVE_FILTER);
  const i = filter.indexOf("(");
  if (i < 0) {
    context.filters.add(filter);
    return `${toValidAssetId(filter, "filter")}(${exp})`;
  } else {
    const name = filter.slice(0, i);
    const args = filter.slice(i + 1);
    context.filters.add(name);
    return `${toValidAssetId(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
  }
}
function getBaseTransformPreset(prefixIdentifiers) {
  return [
    [
      transformOnce,
      transformIf,
      transformMemo,
      transformFor,
      ...[transformFilter],
      ...true ? [transformExpression] : [],
      transformSlotOutlet,
      transformElement,
      trackSlotScopes,
      transformText
    ],
    {
      on: transformOn,
      bind: transformBind,
      model: transformModel
    }
  ];
}
function baseCompile(template, options = {}) {
  const onError = options.onError || defaultOnError;
  const isModuleMode = options.mode === "module";
  {
    if (options.prefixIdentifiers === true) {
      onError(createCompilerError(47));
    } else if (isModuleMode) {
      onError(createCompilerError(48));
    }
  }
  const prefixIdentifiers = false;
  if (options.cacheHandlers) {
    onError(createCompilerError(49));
  }
  if (options.scopeId && !isModuleMode) {
    onError(createCompilerError(50));
  }
  const ast = isString(template) ? baseParse(template, options) : template;
  const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();
  transform(
    ast,
    extend({}, options, {
      prefixIdentifiers,
      nodeTransforms: [
        ...nodeTransforms,
        ...options.nodeTransforms || []
        // user transforms
      ],
      directiveTransforms: extend(
        {},
        directiveTransforms,
        options.directiveTransforms || {}
        // user transforms
      )
    })
  );
  return generate(
    ast,
    extend({}, options, {
      prefixIdentifiers
    })
  );
}
var errorMessages, FRAGMENT, TELEPORT, SUSPENSE, KEEP_ALIVE, BASE_TRANSITION, OPEN_BLOCK, CREATE_BLOCK, CREATE_ELEMENT_BLOCK, CREATE_VNODE, CREATE_ELEMENT_VNODE, CREATE_COMMENT, CREATE_TEXT, CREATE_STATIC, RESOLVE_COMPONENT, RESOLVE_DYNAMIC_COMPONENT, RESOLVE_DIRECTIVE, RESOLVE_FILTER, WITH_DIRECTIVES, RENDER_LIST, RENDER_SLOT, CREATE_SLOTS, TO_DISPLAY_STRING, MERGE_PROPS, NORMALIZE_CLASS, NORMALIZE_STYLE, NORMALIZE_PROPS, GUARD_REACTIVE_PROPS, TO_HANDLERS, CAMELIZE, CAPITALIZE, TO_HANDLER_KEY, SET_BLOCK_TRACKING, PUSH_SCOPE_ID, POP_SCOPE_ID, WITH_CTX, UNREF, IS_REF, WITH_MEMO, IS_MEMO_SAME, helperNameMap, locStub, isStaticExp, isBuiltInType, nonIdentifierRE, isSimpleIdentifier, validFirstIdentCharRE, validIdentCharRE, whitespaceRE, isMemberExpressionBrowser, isMemberExpressionNode, isMemberExpression, propsHelperSet, deprecationData, decodeRE, decodeMap, defaultParserOptions, TagType, isSpecialTemplateDirective, allowHoistedHelperSet, PURE_ANNOTATION, aliasHelper, isFunctionType, isStaticProperty, isStaticPropertyKey, TS_NODE_TYPES, prohibitedKeywordRE, stripStringRE, transformExpression, transformIf, transformFor, forAliasRE, forIteratorRE, stripParensRE, defaultFallback, trackSlotScopes, trackVForSlotScopes, buildClientSlotFn, directiveImportMap, transformElement, transformSlotOutlet, fnExpRE, transformOn, transformBind, injectPrefix, transformText, seen$1, transformOnce, transformModel, validDivisionCharRE, transformFilter, seen, transformMemo, noopDirectiveTransform;
var init_compiler_core_esm_bundler = __esm({
  "node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js"() {
    init_shared_esm_bundler();
    init_shared_esm_bundler();
    errorMessages = {
      // parse errors
      [0]: "Illegal comment.",
      [1]: "CDATA section is allowed only in XML context.",
      [2]: "Duplicate attribute.",
      [3]: "End tag cannot have attributes.",
      [4]: "Illegal '/' in tags.",
      [5]: "Unexpected EOF in tag.",
      [6]: "Unexpected EOF in CDATA section.",
      [7]: "Unexpected EOF in comment.",
      [8]: "Unexpected EOF in script.",
      [9]: "Unexpected EOF in tag.",
      [10]: "Incorrectly closed comment.",
      [11]: "Incorrectly opened comment.",
      [12]: "Illegal tag name. Use '&lt;' to print '<'.",
      [13]: "Attribute value was expected.",
      [14]: "End tag name was expected.",
      [15]: "Whitespace was expected.",
      [16]: "Unexpected '<!--' in comment.",
      [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
      [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
      [19]: "Attribute name cannot start with '='.",
      [21]: "'<?' is allowed only in XML context.",
      [20]: `Unexpected null character.`,
      [22]: "Illegal '/' in tags.",
      // Vue-specific parse errors
      [23]: "Invalid end tag.",
      [24]: "Element is missing end tag.",
      [25]: "Interpolation end sign was not found.",
      [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
      [26]: "Legal directive name was expected.",
      // transform errors
      [28]: `v-if/v-else-if is missing expression.`,
      [29]: `v-if/else branches must use unique keys.`,
      [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
      [31]: `v-for is missing expression.`,
      [32]: `v-for has invalid expression.`,
      [33]: `<template v-for> key should be placed on the <template> tag.`,
      [34]: `v-bind is missing expression.`,
      [35]: `v-on is missing expression.`,
      [36]: `Unexpected custom directive on <slot> outlet.`,
      [37]: `Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
      [38]: `Duplicate slot names found. `,
      [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
      [40]: `v-slot can only be used on components or <template> tags.`,
      [41]: `v-model is missing expression.`,
      [42]: `v-model value must be a valid JavaScript member expression.`,
      [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
      [44]: `v-model cannot be used on a prop, because local prop bindings are not writable.
Use a v-bind binding combined with a v-on listener that emits update:x event instead.`,
      [45]: `Error parsing JavaScript expression: `,
      [46]: `<KeepAlive> expects exactly one child component.`,
      // generic errors
      [47]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
      [48]: `ES module mode is not supported in this build of compiler.`,
      [49]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
      [50]: `"scopeId" option is only supported in module mode.`,
      // deprecations
      [51]: `@vnode-* hooks in templates are deprecated. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support will be removed in 3.4.`,
      [52]: `v-is="component-name" has been deprecated. Use is="vue:component-name" instead. v-is support will be removed in 3.4.`,
      // just to fulfill types
      [53]: ``
    };
    FRAGMENT = Symbol(true ? `Fragment` : ``);
    TELEPORT = Symbol(true ? `Teleport` : ``);
    SUSPENSE = Symbol(true ? `Suspense` : ``);
    KEEP_ALIVE = Symbol(true ? `KeepAlive` : ``);
    BASE_TRANSITION = Symbol(true ? `BaseTransition` : ``);
    OPEN_BLOCK = Symbol(true ? `openBlock` : ``);
    CREATE_BLOCK = Symbol(true ? `createBlock` : ``);
    CREATE_ELEMENT_BLOCK = Symbol(true ? `createElementBlock` : ``);
    CREATE_VNODE = Symbol(true ? `createVNode` : ``);
    CREATE_ELEMENT_VNODE = Symbol(true ? `createElementVNode` : ``);
    CREATE_COMMENT = Symbol(true ? `createCommentVNode` : ``);
    CREATE_TEXT = Symbol(true ? `createTextVNode` : ``);
    CREATE_STATIC = Symbol(true ? `createStaticVNode` : ``);
    RESOLVE_COMPONENT = Symbol(true ? `resolveComponent` : ``);
    RESOLVE_DYNAMIC_COMPONENT = Symbol(
      true ? `resolveDynamicComponent` : ``
    );
    RESOLVE_DIRECTIVE = Symbol(true ? `resolveDirective` : ``);
    RESOLVE_FILTER = Symbol(true ? `resolveFilter` : ``);
    WITH_DIRECTIVES = Symbol(true ? `withDirectives` : ``);
    RENDER_LIST = Symbol(true ? `renderList` : ``);
    RENDER_SLOT = Symbol(true ? `renderSlot` : ``);
    CREATE_SLOTS = Symbol(true ? `createSlots` : ``);
    TO_DISPLAY_STRING = Symbol(true ? `toDisplayString` : ``);
    MERGE_PROPS = Symbol(true ? `mergeProps` : ``);
    NORMALIZE_CLASS = Symbol(true ? `normalizeClass` : ``);
    NORMALIZE_STYLE = Symbol(true ? `normalizeStyle` : ``);
    NORMALIZE_PROPS = Symbol(true ? `normalizeProps` : ``);
    GUARD_REACTIVE_PROPS = Symbol(true ? `guardReactiveProps` : ``);
    TO_HANDLERS = Symbol(true ? `toHandlers` : ``);
    CAMELIZE = Symbol(true ? `camelize` : ``);
    CAPITALIZE = Symbol(true ? `capitalize` : ``);
    TO_HANDLER_KEY = Symbol(true ? `toHandlerKey` : ``);
    SET_BLOCK_TRACKING = Symbol(true ? `setBlockTracking` : ``);
    PUSH_SCOPE_ID = Symbol(true ? `pushScopeId` : ``);
    POP_SCOPE_ID = Symbol(true ? `popScopeId` : ``);
    WITH_CTX = Symbol(true ? `withCtx` : ``);
    UNREF = Symbol(true ? `unref` : ``);
    IS_REF = Symbol(true ? `isRef` : ``);
    WITH_MEMO = Symbol(true ? `withMemo` : ``);
    IS_MEMO_SAME = Symbol(true ? `isMemoSame` : ``);
    helperNameMap = {
      [FRAGMENT]: `Fragment`,
      [TELEPORT]: `Teleport`,
      [SUSPENSE]: `Suspense`,
      [KEEP_ALIVE]: `KeepAlive`,
      [BASE_TRANSITION]: `BaseTransition`,
      [OPEN_BLOCK]: `openBlock`,
      [CREATE_BLOCK]: `createBlock`,
      [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
      [CREATE_VNODE]: `createVNode`,
      [CREATE_ELEMENT_VNODE]: `createElementVNode`,
      [CREATE_COMMENT]: `createCommentVNode`,
      [CREATE_TEXT]: `createTextVNode`,
      [CREATE_STATIC]: `createStaticVNode`,
      [RESOLVE_COMPONENT]: `resolveComponent`,
      [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
      [RESOLVE_DIRECTIVE]: `resolveDirective`,
      [RESOLVE_FILTER]: `resolveFilter`,
      [WITH_DIRECTIVES]: `withDirectives`,
      [RENDER_LIST]: `renderList`,
      [RENDER_SLOT]: `renderSlot`,
      [CREATE_SLOTS]: `createSlots`,
      [TO_DISPLAY_STRING]: `toDisplayString`,
      [MERGE_PROPS]: `mergeProps`,
      [NORMALIZE_CLASS]: `normalizeClass`,
      [NORMALIZE_STYLE]: `normalizeStyle`,
      [NORMALIZE_PROPS]: `normalizeProps`,
      [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
      [TO_HANDLERS]: `toHandlers`,
      [CAMELIZE]: `camelize`,
      [CAPITALIZE]: `capitalize`,
      [TO_HANDLER_KEY]: `toHandlerKey`,
      [SET_BLOCK_TRACKING]: `setBlockTracking`,
      [PUSH_SCOPE_ID]: `pushScopeId`,
      [POP_SCOPE_ID]: `popScopeId`,
      [WITH_CTX]: `withCtx`,
      [UNREF]: `unref`,
      [IS_REF]: `isRef`,
      [WITH_MEMO]: `withMemo`,
      [IS_MEMO_SAME]: `isMemoSame`
    };
    locStub = {
      source: "",
      start: { line: 1, column: 1, offset: 0 },
      end: { line: 1, column: 1, offset: 0 }
    };
    isStaticExp = (p) => p.type === 4 && p.isStatic;
    isBuiltInType = (tag, expected) => tag === expected || tag === hyphenate(expected);
    nonIdentifierRE = /^\d|[^\$\w]/;
    isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
    validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
    validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
    whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
    isMemberExpressionBrowser = (path) => {
      path = path.trim().replace(whitespaceRE, (s) => s.trim());
      let state = 0;
      let stateStack = [];
      let currentOpenBracketCount = 0;
      let currentOpenParensCount = 0;
      let currentStringType = null;
      for (let i = 0; i < path.length; i++) {
        const char = path.charAt(i);
        switch (state) {
          case 0:
            if (char === "[") {
              stateStack.push(state);
              state = 1;
              currentOpenBracketCount++;
            } else if (char === "(") {
              stateStack.push(state);
              state = 2;
              currentOpenParensCount++;
            } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {
              return false;
            }
            break;
          case 1:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `[`) {
              currentOpenBracketCount++;
            } else if (char === `]`) {
              if (!--currentOpenBracketCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 2:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `(`) {
              currentOpenParensCount++;
            } else if (char === `)`) {
              if (i === path.length - 1) {
                return false;
              }
              if (!--currentOpenParensCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 3:
            if (char === currentStringType) {
              state = stateStack.pop();
              currentStringType = null;
            }
            break;
        }
      }
      return !currentOpenBracketCount && !currentOpenParensCount;
    };
    isMemberExpressionNode = NOOP;
    isMemberExpression = isMemberExpressionBrowser;
    propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);
    deprecationData = {
      ["COMPILER_IS_ON_ELEMENT"]: {
        message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
        link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`
      },
      ["COMPILER_V_BIND_SYNC"]: {
        message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`
      },
      ["COMPILER_V_BIND_PROP"]: {
        message: `.prop modifier for v-bind has been removed and no longer necessary. Vue 3 will automatically set a binding as DOM property when appropriate.`
      },
      ["COMPILER_V_BIND_OBJECT_ORDER"]: {
        message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`
      },
      ["COMPILER_V_ON_NATIVE"]: {
        message: `.native modifier for v-on has been removed as is no longer necessary.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`
      },
      ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
        message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`
      },
      ["COMPILER_NATIVE_TEMPLATE"]: {
        message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`
      },
      ["COMPILER_INLINE_TEMPLATE"]: {
        message: `"inline-template" has been removed in Vue 3.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`
      },
      ["COMPILER_FILTER"]: {
        message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`
      }
    };
    decodeRE = /&(gt|lt|amp|apos|quot);/g;
    decodeMap = {
      gt: ">",
      lt: "<",
      amp: "&",
      apos: "'",
      quot: '"'
    };
    defaultParserOptions = {
      delimiters: [`{{`, `}}`],
      getNamespace: () => 0,
      getTextMode: () => 0,
      isVoidTag: NO,
      isPreTag: NO,
      isCustomElement: NO,
      decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),
      onError: defaultOnError,
      onWarn: defaultOnWarn,
      comments: true
    };
    TagType = ((TagType2) => {
      TagType2[TagType2["Start"] = 0] = "Start";
      TagType2[TagType2["End"] = 1] = "End";
      return TagType2;
    })(TagType || {});
    isSpecialTemplateDirective = makeMap(
      `if,else,else-if,for,slot`
    );
    allowHoistedHelperSet = /* @__PURE__ */ new Set([
      NORMALIZE_CLASS,
      NORMALIZE_STYLE,
      NORMALIZE_PROPS,
      GUARD_REACTIVE_PROPS
    ]);
    PURE_ANNOTATION = `/*#__PURE__*/`;
    aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
    isFunctionType = (node) => {
      return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
    };
    isStaticProperty = (node) => node && (node.type === "ObjectProperty" || node.type === "ObjectMethod") && !node.computed;
    isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;
    TS_NODE_TYPES = [
      "TSAsExpression",
      // foo as number
      "TSTypeAssertion",
      // (<number>foo)
      "TSNonNullExpression",
      // foo!
      "TSInstantiationExpression",
      // foo<string>
      "TSSatisfiesExpression"
      // foo satisfies T
    ];
    prohibitedKeywordRE = new RegExp(
      "\\b" + "arguments,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,let,new,return,super,switch,throw,try,var,void,while,with,yield".split(",").join("\\b|\\b") + "\\b"
    );
    stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;
    transformExpression = (node, context) => {
      if (node.type === 5) {
        node.content = processExpression(
          node.content,
          context
        );
      } else if (node.type === 1) {
        for (let i = 0; i < node.props.length; i++) {
          const dir = node.props[i];
          if (dir.type === 7 && dir.name !== "for") {
            const exp = dir.exp;
            const arg = dir.arg;
            if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
              dir.exp = processExpression(
                exp,
                context,
                // slot args must be processed as function params
                dir.name === "slot"
              );
            }
            if (arg && arg.type === 4 && !arg.isStatic) {
              dir.arg = processExpression(arg, context);
            }
          }
        }
      }
    };
    transformIf = createStructuralDirectiveTransform(
      /^(if|else|else-if)$/,
      (node, dir, context) => {
        return processIf(node, dir, context, (ifNode, branch, isRoot) => {
          const siblings = context.parent.children;
          let i = siblings.indexOf(ifNode);
          let key = 0;
          while (i-- >= 0) {
            const sibling = siblings[i];
            if (sibling && sibling.type === 9) {
              key += sibling.branches.length;
            }
          }
          return () => {
            if (isRoot) {
              ifNode.codegenNode = createCodegenNodeForBranch(
                branch,
                key,
                context
              );
            } else {
              const parentCondition = getParentCondition(ifNode.codegenNode);
              parentCondition.alternate = createCodegenNodeForBranch(
                branch,
                key + ifNode.branches.length - 1,
                context
              );
            }
          };
        });
      }
    );
    transformFor = createStructuralDirectiveTransform(
      "for",
      (node, dir, context) => {
        const { helper, removeHelper } = context;
        return processFor(node, dir, context, (forNode) => {
          const renderExp = createCallExpression(helper(RENDER_LIST), [
            forNode.source
          ]);
          const isTemplate = isTemplateNode(node);
          const memo = findDir(node, "memo");
          const keyProp = findProp(node, `key`);
          const keyExp = keyProp && (keyProp.type === 6 ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp);
          const keyProperty = keyProp ? createObjectProperty(`key`, keyExp) : null;
          const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
          const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
          forNode.codegenNode = createVNodeCall(
            context,
            helper(FRAGMENT),
            void 0,
            renderExp,
            fragmentFlag + (true ? ` /* ${PatchFlagNames[fragmentFlag]} */` : ``),
            void 0,
            void 0,
            true,
            !isStableFragment,
            false,
            node.loc
          );
          return () => {
            let childBlock;
            const { children } = forNode;
            if (isTemplate) {
              node.children.some((c) => {
                if (c.type === 1) {
                  const key = findProp(c, "key");
                  if (key) {
                    context.onError(
                      createCompilerError(
                        33,
                        key.loc
                      )
                    );
                    return true;
                  }
                }
              });
            }
            const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
            const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;
            if (slotOutlet) {
              childBlock = slotOutlet.codegenNode;
              if (isTemplate && keyProperty) {
                injectProp(childBlock, keyProperty, context);
              }
            } else if (needFragmentWrapper) {
              childBlock = createVNodeCall(
                context,
                helper(FRAGMENT),
                keyProperty ? createObjectExpression([keyProperty]) : void 0,
                node.children,
                64 + (true ? ` /* ${PatchFlagNames[64]} */` : ``),
                void 0,
                void 0,
                true,
                void 0,
                false
                /* isComponent */
              );
            } else {
              childBlock = children[0].codegenNode;
              if (isTemplate && keyProperty) {
                injectProp(childBlock, keyProperty, context);
              }
              if (childBlock.isBlock !== !isStableFragment) {
                if (childBlock.isBlock) {
                  removeHelper(OPEN_BLOCK);
                  removeHelper(
                    getVNodeBlockHelper(context.inSSR, childBlock.isComponent)
                  );
                } else {
                  removeHelper(
                    getVNodeHelper(context.inSSR, childBlock.isComponent)
                  );
                }
              }
              childBlock.isBlock = !isStableFragment;
              if (childBlock.isBlock) {
                helper(OPEN_BLOCK);
                helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
              } else {
                helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
              }
            }
            if (memo) {
              const loop = createFunctionExpression(
                createForLoopParams(forNode.parseResult, [
                  createSimpleExpression(`_cached`)
                ])
              );
              loop.body = createBlockStatement([
                createCompoundExpression([`const _memo = (`, memo.exp, `)`]),
                createCompoundExpression([
                  `if (_cached`,
                  ...keyExp ? [` && _cached.key === `, keyExp] : [],
                  ` && ${context.helperString(
                    IS_MEMO_SAME
                  )}(_cached, _memo)) return _cached`
                ]),
                createCompoundExpression([`const _item = `, childBlock]),
                createSimpleExpression(`_item.memo = _memo`),
                createSimpleExpression(`return _item`)
              ]);
              renderExp.arguments.push(
                loop,
                createSimpleExpression(`_cache`),
                createSimpleExpression(String(context.cached++))
              );
            } else {
              renderExp.arguments.push(
                createFunctionExpression(
                  createForLoopParams(forNode.parseResult),
                  childBlock,
                  true
                  /* force newline */
                )
              );
            }
          };
        });
      }
    );
    forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    stripParensRE = /^\(|\)$/g;
    defaultFallback = createSimpleExpression(`undefined`, false);
    trackSlotScopes = (node, context) => {
      if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
        const vSlot = findDir(node, "slot");
        if (vSlot) {
          vSlot.exp;
          context.scopes.vSlot++;
          return () => {
            context.scopes.vSlot--;
          };
        }
      }
    };
    trackVForSlotScopes = (node, context) => {
      let vFor;
      if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, "for"))) {
        const result = vFor.parseResult = parseForExpression(
          vFor.exp,
          context
        );
        if (result) {
          const { value, key, index } = result;
          const { addIdentifiers, removeIdentifiers } = context;
          value && addIdentifiers(value);
          key && addIdentifiers(key);
          index && addIdentifiers(index);
          return () => {
            value && removeIdentifiers(value);
            key && removeIdentifiers(key);
            index && removeIdentifiers(index);
          };
        }
      }
    };
    buildClientSlotFn = (props, children, loc) => createFunctionExpression(
      props,
      children,
      false,
      true,
      children.length ? children[0].loc : loc
    );
    directiveImportMap = /* @__PURE__ */ new WeakMap();
    transformElement = (node, context) => {
      return function postTransformElement() {
        node = context.currentNode;
        if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) {
          return;
        }
        const { tag, props } = node;
        const isComponent2 = node.tagType === 1;
        let vnodeTag = isComponent2 ? resolveComponentType(node, context) : `"${tag}"`;
        const isDynamicComponent = isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
        let vnodeProps;
        let vnodeChildren;
        let vnodePatchFlag;
        let patchFlag = 0;
        let vnodeDynamicProps;
        let dynamicPropNames;
        let vnodeDirectives;
        let shouldUseBlock = (
          // dynamic component may resolve to plain elements
          isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent2 && // <svg> and <foreignObject> must be forced into blocks so that block
          // updates inside get proper isSVG flag at runtime. (#639, #643)
          // This is technically web-specific, but splitting the logic out of core
          // leads to too much unnecessary complexity.
          (tag === "svg" || tag === "foreignObject")
        );
        if (props.length > 0) {
          const propsBuildResult = buildProps(
            node,
            context,
            void 0,
            isComponent2,
            isDynamicComponent
          );
          vnodeProps = propsBuildResult.props;
          patchFlag = propsBuildResult.patchFlag;
          dynamicPropNames = propsBuildResult.dynamicPropNames;
          const directives = propsBuildResult.directives;
          vnodeDirectives = directives && directives.length ? createArrayExpression(
            directives.map((dir) => buildDirectiveArgs(dir, context))
          ) : void 0;
          if (propsBuildResult.shouldUseBlock) {
            shouldUseBlock = true;
          }
        }
        if (node.children.length > 0) {
          if (vnodeTag === KEEP_ALIVE) {
            shouldUseBlock = true;
            patchFlag |= 1024;
            if (node.children.length > 1) {
              context.onError(
                createCompilerError(46, {
                  start: node.children[0].loc.start,
                  end: node.children[node.children.length - 1].loc.end,
                  source: ""
                })
              );
            }
          }
          const shouldBuildAsSlots = isComponent2 && // Teleport is not a real component and has dedicated runtime handling
          vnodeTag !== TELEPORT && // explained above.
          vnodeTag !== KEEP_ALIVE;
          if (shouldBuildAsSlots) {
            const { slots, hasDynamicSlots } = buildSlots(node, context);
            vnodeChildren = slots;
            if (hasDynamicSlots) {
              patchFlag |= 1024;
            }
          } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
            const child = node.children[0];
            const type = child.type;
            const hasDynamicTextChild = type === 5 || type === 8;
            if (hasDynamicTextChild && getConstantType(child, context) === 0) {
              patchFlag |= 1;
            }
            if (hasDynamicTextChild || type === 2) {
              vnodeChildren = child;
            } else {
              vnodeChildren = node.children;
            }
          } else {
            vnodeChildren = node.children;
          }
        }
        if (patchFlag !== 0) {
          if (true) {
            if (patchFlag < 0) {
              vnodePatchFlag = patchFlag + ` /* ${PatchFlagNames[patchFlag]} */`;
            } else {
              const flagNames = Object.keys(PatchFlagNames).map(Number).filter((n) => n > 0 && patchFlag & n).map((n) => PatchFlagNames[n]).join(`, `);
              vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
            }
          } else {
            vnodePatchFlag = String(patchFlag);
          }
          if (dynamicPropNames && dynamicPropNames.length) {
            vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
          }
        }
        node.codegenNode = createVNodeCall(
          context,
          vnodeTag,
          vnodeProps,
          vnodeChildren,
          vnodePatchFlag,
          vnodeDynamicProps,
          vnodeDirectives,
          !!shouldUseBlock,
          false,
          isComponent2,
          node.loc
        );
      };
    };
    transformSlotOutlet = (node, context) => {
      if (isSlotOutlet(node)) {
        const { children, loc } = node;
        const { slotName, slotProps } = processSlotOutlet(node, context);
        const slotArgs = [
          context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
          slotName,
          "{}",
          "undefined",
          "true"
        ];
        let expectedLen = 2;
        if (slotProps) {
          slotArgs[2] = slotProps;
          expectedLen = 3;
        }
        if (children.length) {
          slotArgs[3] = createFunctionExpression([], children, false, false, loc);
          expectedLen = 4;
        }
        if (context.scopeId && !context.slotted) {
          expectedLen = 5;
        }
        slotArgs.splice(expectedLen);
        node.codegenNode = createCallExpression(
          context.helper(RENDER_SLOT),
          slotArgs,
          loc
        );
      }
    };
    fnExpRE = /^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
    transformOn = (dir, node, context, augmentor) => {
      const { loc, modifiers, arg } = dir;
      if (!dir.exp && !modifiers.length) {
        context.onError(createCompilerError(35, loc));
      }
      let eventName;
      if (arg.type === 4) {
        if (arg.isStatic) {
          let rawName = arg.content;
          if (rawName.startsWith("vnode")) {
            context.onWarn(
              createCompilerError(51, arg.loc)
            );
          }
          if (rawName.startsWith("vue:")) {
            rawName = `vnode-${rawName.slice(4)}`;
          }
          const eventString = node.tagType !== 0 || rawName.startsWith("vnode") || !/[A-Z]/.test(rawName) ? (
            // for non-element and vnode lifecycle event listeners, auto convert
            // it to camelCase. See issue #2249
            toHandlerKey(camelize(rawName))
          ) : (
            // preserve case for plain element listeners that have uppercase
            // letters, as these may be custom elements' custom events
            `on:${rawName}`
          );
          eventName = createSimpleExpression(eventString, true, arg.loc);
        } else {
          eventName = createCompoundExpression([
            `${context.helperString(TO_HANDLER_KEY)}(`,
            arg,
            `)`
          ]);
        }
      } else {
        eventName = arg;
        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
        eventName.children.push(`)`);
      }
      let exp = dir.exp;
      if (exp && !exp.content.trim()) {
        exp = void 0;
      }
      let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
      if (exp) {
        const isMemberExp = isMemberExpression(exp.content);
        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
        const hasMultipleStatements = exp.content.includes(`;`);
        if (true) {
          validateBrowserExpression(
            exp,
            context,
            false,
            hasMultipleStatements
          );
        }
        if (isInlineStatement || shouldCache && isMemberExp) {
          exp = createCompoundExpression([
            `${isInlineStatement ? `$event` : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
            exp,
            hasMultipleStatements ? `}` : `)`
          ]);
        }
      }
      let ret = {
        props: [
          createObjectProperty(
            eventName,
            exp || createSimpleExpression(`() => {}`, false, loc)
          )
        ]
      };
      if (augmentor) {
        ret = augmentor(ret);
      }
      if (shouldCache) {
        ret.props[0].value = context.cache(ret.props[0].value);
      }
      ret.props.forEach((p) => p.key.isHandlerKey = true);
      return ret;
    };
    transformBind = (dir, _node, context) => {
      const { exp, modifiers, loc } = dir;
      const arg = dir.arg;
      if (arg.type !== 4) {
        arg.children.unshift(`(`);
        arg.children.push(`) || ""`);
      } else if (!arg.isStatic) {
        arg.content = `${arg.content} || ""`;
      }
      if (modifiers.includes("camel")) {
        if (arg.type === 4) {
          if (arg.isStatic) {
            arg.content = camelize(arg.content);
          } else {
            arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
          }
        } else {
          arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
          arg.children.push(`)`);
        }
      }
      if (!context.inSSR) {
        if (modifiers.includes("prop")) {
          injectPrefix(arg, ".");
        }
        if (modifiers.includes("attr")) {
          injectPrefix(arg, "^");
        }
      }
      if (!exp || exp.type === 4 && !exp.content.trim()) {
        context.onError(createCompilerError(34, loc));
        return {
          props: [createObjectProperty(arg, createSimpleExpression("", true, loc))]
        };
      }
      return {
        props: [createObjectProperty(arg, exp)]
      };
    };
    injectPrefix = (arg, prefix) => {
      if (arg.type === 4) {
        if (arg.isStatic) {
          arg.content = prefix + arg.content;
        } else {
          arg.content = `\`${prefix}\${${arg.content}}\``;
        }
      } else {
        arg.children.unshift(`'${prefix}' + (`);
        arg.children.push(`)`);
      }
    };
    transformText = (node, context) => {
      if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) {
        return () => {
          const children = node.children;
          let currentContainer = void 0;
          let hasText = false;
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText$1(child)) {
              hasText = true;
              for (let j = i + 1; j < children.length; j++) {
                const next = children[j];
                if (isText$1(next)) {
                  if (!currentContainer) {
                    currentContainer = children[i] = createCompoundExpression(
                      [child],
                      child.loc
                    );
                  }
                  currentContainer.children.push(` + `, next);
                  children.splice(j, 1);
                  j--;
                } else {
                  currentContainer = void 0;
                  break;
                }
              }
            }
          }
          if (!hasText || // if this is a plain element with a single text child, leave it
          // as-is since the runtime has dedicated fast path for this by directly
          // setting textContent of the element.
          // for component root it's always normalized anyway.
          children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 && // #3756
          // custom directives can potentially add DOM elements arbitrarily,
          // we need to avoid setting textContent of the element at runtime
          // to avoid accidentally overwriting the DOM elements added
          // by the user through custom directives.
          !node.props.find(
            (p) => p.type === 7 && !context.directiveTransforms[p.name]
          ) && // in compat mode, <template> tags with no special directives
          // will be rendered as a fragment so its children must be
          // converted into vnodes.
          !(node.tag === "template"))) {
            return;
          }
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText$1(child) || child.type === 8) {
              const callArgs = [];
              if (child.type !== 2 || child.content !== " ") {
                callArgs.push(child);
              }
              if (!context.ssr && getConstantType(child, context) === 0) {
                callArgs.push(
                  1 + (true ? ` /* ${PatchFlagNames[1]} */` : ``)
                );
              }
              children[i] = {
                type: 12,
                content: child,
                loc: child.loc,
                codegenNode: createCallExpression(
                  context.helper(CREATE_TEXT),
                  callArgs
                )
              };
            }
          }
        };
      }
    };
    seen$1 = /* @__PURE__ */ new WeakSet();
    transformOnce = (node, context) => {
      if (node.type === 1 && findDir(node, "once", true)) {
        if (seen$1.has(node) || context.inVOnce || context.inSSR) {
          return;
        }
        seen$1.add(node);
        context.inVOnce = true;
        context.helper(SET_BLOCK_TRACKING);
        return () => {
          context.inVOnce = false;
          const cur = context.currentNode;
          if (cur.codegenNode) {
            cur.codegenNode = context.cache(
              cur.codegenNode,
              true
              /* isVNode */
            );
          }
        };
      }
    };
    transformModel = (dir, node, context) => {
      const { exp, arg } = dir;
      if (!exp) {
        context.onError(
          createCompilerError(41, dir.loc)
        );
        return createTransformProps();
      }
      const rawExp = exp.loc.source;
      const expString = exp.type === 4 ? exp.content : rawExp;
      const bindingType = context.bindingMetadata[rawExp];
      if (bindingType === "props" || bindingType === "props-aliased") {
        context.onError(createCompilerError(44, exp.loc));
        return createTransformProps();
      }
      const maybeRef = false;
      if (!expString.trim() || !isMemberExpression(expString) && !maybeRef) {
        context.onError(
          createCompilerError(42, exp.loc)
        );
        return createTransformProps();
      }
      const propName = arg ? arg : createSimpleExpression("modelValue", true);
      const eventName = arg ? isStaticExp(arg) ? `onUpdate:${camelize(arg.content)}` : createCompoundExpression(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
      let assignmentExp;
      const eventArg = context.isTS ? `($event: any)` : `$event`;
      {
        assignmentExp = createCompoundExpression([
          `${eventArg} => ((`,
          exp,
          `) = $event)`
        ]);
      }
      const props = [
        // modelValue: foo
        createObjectProperty(propName, dir.exp),
        // "onUpdate:modelValue": $event => (foo = $event)
        createObjectProperty(eventName, assignmentExp)
      ];
      if (dir.modifiers.length && node.tagType === 1) {
        const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
        const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + "Modifiers"']) : `modelModifiers`;
        props.push(
          createObjectProperty(
            modifiersKey,
            createSimpleExpression(
              `{ ${modifiers} }`,
              false,
              dir.loc,
              2
            )
          )
        );
      }
      return createTransformProps(props);
    };
    validDivisionCharRE = /[\w).+\-_$\]]/;
    transformFilter = (node, context) => {
      if (!isCompatEnabled("COMPILER_FILTER", context)) {
        return;
      }
      if (node.type === 5) {
        rewriteFilter(node.content, context);
      }
      if (node.type === 1) {
        node.props.forEach((prop) => {
          if (prop.type === 7 && prop.name !== "for" && prop.exp) {
            rewriteFilter(prop.exp, context);
          }
        });
      }
    };
    seen = /* @__PURE__ */ new WeakSet();
    transformMemo = (node, context) => {
      if (node.type === 1) {
        const dir = findDir(node, "memo");
        if (!dir || seen.has(node)) {
          return;
        }
        seen.add(node);
        return () => {
          const codegenNode = node.codegenNode || context.currentNode.codegenNode;
          if (codegenNode && codegenNode.type === 13) {
            if (node.tagType !== 1) {
              convertToBlock(codegenNode, context);
            }
            node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
              dir.exp,
              createFunctionExpression(void 0, codegenNode),
              `_cache`,
              String(context.cached++)
            ]);
          }
        };
      }
    };
    noopDirectiveTransform = () => ({ props: [] });
  }
});

// node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js
var compiler_dom_esm_bundler_exports = {};
__export(compiler_dom_esm_bundler_exports, {
  BASE_TRANSITION: () => BASE_TRANSITION,
  CAMELIZE: () => CAMELIZE,
  CAPITALIZE: () => CAPITALIZE,
  CREATE_BLOCK: () => CREATE_BLOCK,
  CREATE_COMMENT: () => CREATE_COMMENT,
  CREATE_ELEMENT_BLOCK: () => CREATE_ELEMENT_BLOCK,
  CREATE_ELEMENT_VNODE: () => CREATE_ELEMENT_VNODE,
  CREATE_SLOTS: () => CREATE_SLOTS,
  CREATE_STATIC: () => CREATE_STATIC,
  CREATE_TEXT: () => CREATE_TEXT,
  CREATE_VNODE: () => CREATE_VNODE,
  DOMDirectiveTransforms: () => DOMDirectiveTransforms,
  DOMNodeTransforms: () => DOMNodeTransforms,
  FRAGMENT: () => FRAGMENT,
  GUARD_REACTIVE_PROPS: () => GUARD_REACTIVE_PROPS,
  IS_MEMO_SAME: () => IS_MEMO_SAME,
  IS_REF: () => IS_REF,
  KEEP_ALIVE: () => KEEP_ALIVE,
  MERGE_PROPS: () => MERGE_PROPS,
  NORMALIZE_CLASS: () => NORMALIZE_CLASS,
  NORMALIZE_PROPS: () => NORMALIZE_PROPS,
  NORMALIZE_STYLE: () => NORMALIZE_STYLE,
  OPEN_BLOCK: () => OPEN_BLOCK,
  POP_SCOPE_ID: () => POP_SCOPE_ID,
  PUSH_SCOPE_ID: () => PUSH_SCOPE_ID,
  RENDER_LIST: () => RENDER_LIST,
  RENDER_SLOT: () => RENDER_SLOT,
  RESOLVE_COMPONENT: () => RESOLVE_COMPONENT,
  RESOLVE_DIRECTIVE: () => RESOLVE_DIRECTIVE,
  RESOLVE_DYNAMIC_COMPONENT: () => RESOLVE_DYNAMIC_COMPONENT,
  RESOLVE_FILTER: () => RESOLVE_FILTER,
  SET_BLOCK_TRACKING: () => SET_BLOCK_TRACKING,
  SUSPENSE: () => SUSPENSE,
  TELEPORT: () => TELEPORT,
  TO_DISPLAY_STRING: () => TO_DISPLAY_STRING,
  TO_HANDLERS: () => TO_HANDLERS,
  TO_HANDLER_KEY: () => TO_HANDLER_KEY,
  TRANSITION: () => TRANSITION,
  TRANSITION_GROUP: () => TRANSITION_GROUP,
  TS_NODE_TYPES: () => TS_NODE_TYPES,
  UNREF: () => UNREF,
  V_MODEL_CHECKBOX: () => V_MODEL_CHECKBOX,
  V_MODEL_DYNAMIC: () => V_MODEL_DYNAMIC,
  V_MODEL_RADIO: () => V_MODEL_RADIO,
  V_MODEL_SELECT: () => V_MODEL_SELECT,
  V_MODEL_TEXT: () => V_MODEL_TEXT,
  V_ON_WITH_KEYS: () => V_ON_WITH_KEYS,
  V_ON_WITH_MODIFIERS: () => V_ON_WITH_MODIFIERS,
  V_SHOW: () => V_SHOW,
  WITH_CTX: () => WITH_CTX,
  WITH_DIRECTIVES: () => WITH_DIRECTIVES,
  WITH_MEMO: () => WITH_MEMO,
  advancePositionWithClone: () => advancePositionWithClone,
  advancePositionWithMutation: () => advancePositionWithMutation,
  assert: () => assert,
  baseCompile: () => baseCompile,
  baseParse: () => baseParse,
  buildDirectiveArgs: () => buildDirectiveArgs,
  buildProps: () => buildProps,
  buildSlots: () => buildSlots,
  checkCompatEnabled: () => checkCompatEnabled,
  compile: () => compile,
  convertToBlock: () => convertToBlock,
  createArrayExpression: () => createArrayExpression,
  createAssignmentExpression: () => createAssignmentExpression,
  createBlockStatement: () => createBlockStatement,
  createCacheExpression: () => createCacheExpression,
  createCallExpression: () => createCallExpression,
  createCompilerError: () => createCompilerError,
  createCompoundExpression: () => createCompoundExpression,
  createConditionalExpression: () => createConditionalExpression,
  createDOMCompilerError: () => createDOMCompilerError,
  createForLoopParams: () => createForLoopParams,
  createFunctionExpression: () => createFunctionExpression,
  createIfStatement: () => createIfStatement,
  createInterpolation: () => createInterpolation,
  createObjectExpression: () => createObjectExpression,
  createObjectProperty: () => createObjectProperty,
  createReturnStatement: () => createReturnStatement,
  createRoot: () => createRoot,
  createSequenceExpression: () => createSequenceExpression,
  createSimpleExpression: () => createSimpleExpression,
  createStructuralDirectiveTransform: () => createStructuralDirectiveTransform,
  createTemplateLiteral: () => createTemplateLiteral,
  createTransformContext: () => createTransformContext,
  createVNodeCall: () => createVNodeCall,
  extractIdentifiers: () => extractIdentifiers,
  findDir: () => findDir,
  findProp: () => findProp,
  generate: () => generate,
  generateCodeFrame: () => generateCodeFrame,
  getBaseTransformPreset: () => getBaseTransformPreset,
  getConstantType: () => getConstantType,
  getInnerRange: () => getInnerRange,
  getMemoedVNodeCall: () => getMemoedVNodeCall,
  getVNodeBlockHelper: () => getVNodeBlockHelper,
  getVNodeHelper: () => getVNodeHelper,
  hasDynamicKeyVBind: () => hasDynamicKeyVBind,
  hasScopeRef: () => hasScopeRef,
  helperNameMap: () => helperNameMap,
  injectProp: () => injectProp,
  isBuiltInType: () => isBuiltInType,
  isCoreComponent: () => isCoreComponent,
  isFunctionType: () => isFunctionType,
  isInDestructureAssignment: () => isInDestructureAssignment,
  isMemberExpression: () => isMemberExpression,
  isMemberExpressionBrowser: () => isMemberExpressionBrowser,
  isMemberExpressionNode: () => isMemberExpressionNode,
  isReferencedIdentifier: () => isReferencedIdentifier,
  isSimpleIdentifier: () => isSimpleIdentifier,
  isSlotOutlet: () => isSlotOutlet,
  isStaticArgOf: () => isStaticArgOf,
  isStaticExp: () => isStaticExp,
  isStaticProperty: () => isStaticProperty,
  isStaticPropertyKey: () => isStaticPropertyKey,
  isTemplateNode: () => isTemplateNode,
  isText: () => isText$1,
  isVSlot: () => isVSlot,
  locStub: () => locStub,
  noopDirectiveTransform: () => noopDirectiveTransform,
  parse: () => parse,
  parserOptions: () => parserOptions,
  processExpression: () => processExpression,
  processFor: () => processFor,
  processIf: () => processIf,
  processSlotOutlet: () => processSlotOutlet,
  registerRuntimeHelpers: () => registerRuntimeHelpers,
  resolveComponentType: () => resolveComponentType,
  stringifyExpression: () => stringifyExpression,
  toValidAssetId: () => toValidAssetId,
  trackSlotScopes: () => trackSlotScopes,
  trackVForSlotScopes: () => trackVForSlotScopes,
  transform: () => transform,
  transformBind: () => transformBind,
  transformElement: () => transformElement,
  transformExpression: () => transformExpression,
  transformModel: () => transformModel,
  transformOn: () => transformOn,
  transformStyle: () => transformStyle,
  traverseNode: () => traverseNode,
  walkBlockDeclarations: () => walkBlockDeclarations,
  walkFunctionParams: () => walkFunctionParams,
  walkIdentifiers: () => walkIdentifiers,
  warnDeprecation: () => warnDeprecation
});
function decodeHtmlBrowser(raw, asAttr = false) {
  if (!decoder) {
    decoder = document.createElement("div");
  }
  if (asAttr) {
    decoder.innerHTML = `<div foo="${raw.replace(/"/g, "&quot;")}">`;
    return decoder.children[0].getAttribute("foo");
  } else {
    decoder.innerHTML = raw;
    return decoder.textContent;
  }
}
function createDOMCompilerError(code, loc) {
  return createCompilerError(
    code,
    loc,
    true ? DOMErrorMessages : void 0
  );
}
function hasMultipleChildren(node) {
  const children = node.children = node.children.filter(
    (c) => c.type !== 3 && !(c.type === 2 && !c.content.trim())
  );
  const child = children[0];
  return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);
}
function compile(template, options = {}) {
  return baseCompile(
    template,
    extend({}, parserOptions, options, {
      nodeTransforms: [
        // ignore <script> and <tag>
        // this is not put inside DOMNodeTransforms because that list is used
        // by compiler-ssr to generate vnode fallback branches
        ignoreSideEffectTags,
        ...DOMNodeTransforms,
        ...options.nodeTransforms || []
      ],
      directiveTransforms: extend(
        {},
        DOMDirectiveTransforms,
        options.directiveTransforms || {}
      ),
      transformHoist: null
    })
  );
}
function parse(template, options = {}) {
  return baseParse(template, extend({}, parserOptions, options));
}
var V_MODEL_RADIO, V_MODEL_CHECKBOX, V_MODEL_TEXT, V_MODEL_SELECT, V_MODEL_DYNAMIC, V_ON_WITH_MODIFIERS, V_ON_WITH_KEYS, V_SHOW, TRANSITION, TRANSITION_GROUP, decoder, isRawTextContainer, parserOptions, transformStyle, parseInlineCSS, DOMErrorMessages, transformVHtml, transformVText, transformModel2, isEventOptionModifier, isNonKeyModifier, maybeKeyModifier, isKeyboardEvent, resolveModifiers, transformClick, transformOn2, transformShow, transformTransition, ignoreSideEffectTags, DOMNodeTransforms, DOMDirectiveTransforms;
var init_compiler_dom_esm_bundler = __esm({
  "node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js"() {
    init_compiler_core_esm_bundler();
    init_compiler_core_esm_bundler();
    init_shared_esm_bundler();
    V_MODEL_RADIO = Symbol(true ? `vModelRadio` : ``);
    V_MODEL_CHECKBOX = Symbol(true ? `vModelCheckbox` : ``);
    V_MODEL_TEXT = Symbol(true ? `vModelText` : ``);
    V_MODEL_SELECT = Symbol(true ? `vModelSelect` : ``);
    V_MODEL_DYNAMIC = Symbol(true ? `vModelDynamic` : ``);
    V_ON_WITH_MODIFIERS = Symbol(true ? `vOnModifiersGuard` : ``);
    V_ON_WITH_KEYS = Symbol(true ? `vOnKeysGuard` : ``);
    V_SHOW = Symbol(true ? `vShow` : ``);
    TRANSITION = Symbol(true ? `Transition` : ``);
    TRANSITION_GROUP = Symbol(true ? `TransitionGroup` : ``);
    registerRuntimeHelpers({
      [V_MODEL_RADIO]: `vModelRadio`,
      [V_MODEL_CHECKBOX]: `vModelCheckbox`,
      [V_MODEL_TEXT]: `vModelText`,
      [V_MODEL_SELECT]: `vModelSelect`,
      [V_MODEL_DYNAMIC]: `vModelDynamic`,
      [V_ON_WITH_MODIFIERS]: `withModifiers`,
      [V_ON_WITH_KEYS]: `withKeys`,
      [V_SHOW]: `vShow`,
      [TRANSITION]: `Transition`,
      [TRANSITION_GROUP]: `TransitionGroup`
    });
    isRawTextContainer = makeMap(
      "style,iframe,script,noscript",
      true
    );
    parserOptions = {
      isVoidTag,
      isNativeTag: (tag) => isHTMLTag(tag) || isSVGTag(tag),
      isPreTag: (tag) => tag === "pre",
      decodeEntities: decodeHtmlBrowser,
      isBuiltInComponent: (tag) => {
        if (isBuiltInType(tag, `Transition`)) {
          return TRANSITION;
        } else if (isBuiltInType(tag, `TransitionGroup`)) {
          return TRANSITION_GROUP;
        }
      },
      // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher
      getNamespace(tag, parent) {
        let ns = parent ? parent.ns : 0;
        if (parent && ns === 2) {
          if (parent.tag === "annotation-xml") {
            if (tag === "svg") {
              return 1;
            }
            if (parent.props.some(
              (a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml")
            )) {
              ns = 0;
            }
          } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== "mglyph" && tag !== "malignmark") {
            ns = 0;
          }
        } else if (parent && ns === 1) {
          if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
            ns = 0;
          }
        }
        if (ns === 0) {
          if (tag === "svg") {
            return 1;
          }
          if (tag === "math") {
            return 2;
          }
        }
        return ns;
      },
      // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments
      getTextMode({ tag, ns }) {
        if (ns === 0) {
          if (tag === "textarea" || tag === "title") {
            return 1;
          }
          if (isRawTextContainer(tag)) {
            return 2;
          }
        }
        return 0;
      }
    };
    transformStyle = (node) => {
      if (node.type === 1) {
        node.props.forEach((p, i) => {
          if (p.type === 6 && p.name === "style" && p.value) {
            node.props[i] = {
              type: 7,
              name: `bind`,
              arg: createSimpleExpression(`style`, true, p.loc),
              exp: parseInlineCSS(p.value.content, p.loc),
              modifiers: [],
              loc: p.loc
            };
          }
        });
      }
    };
    parseInlineCSS = (cssText, loc) => {
      const normalized = parseStringStyle(cssText);
      return createSimpleExpression(
        JSON.stringify(normalized),
        false,
        loc,
        3
      );
    };
    DOMErrorMessages = {
      [53]: `v-html is missing expression.`,
      [54]: `v-html will override element children.`,
      [55]: `v-text is missing expression.`,
      [56]: `v-text will override element children.`,
      [57]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
      [58]: `v-model argument is not supported on plain elements.`,
      [59]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
      [60]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
      [61]: `v-show is missing expression.`,
      [62]: `<Transition> expects exactly one child element or component.`,
      [63]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
    };
    transformVHtml = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(
          createDOMCompilerError(53, loc)
        );
      }
      if (node.children.length) {
        context.onError(
          createDOMCompilerError(54, loc)
        );
        node.children.length = 0;
      }
      return {
        props: [
          createObjectProperty(
            createSimpleExpression(`innerHTML`, true, loc),
            exp || createSimpleExpression("", true)
          )
        ]
      };
    };
    transformVText = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(
          createDOMCompilerError(55, loc)
        );
      }
      if (node.children.length) {
        context.onError(
          createDOMCompilerError(56, loc)
        );
        node.children.length = 0;
      }
      return {
        props: [
          createObjectProperty(
            createSimpleExpression(`textContent`, true),
            exp ? getConstantType(exp, context) > 0 ? exp : createCallExpression(
              context.helperString(TO_DISPLAY_STRING),
              [exp],
              loc
            ) : createSimpleExpression("", true)
          )
        ]
      };
    };
    transformModel2 = (dir, node, context) => {
      const baseResult = transformModel(dir, node, context);
      if (!baseResult.props.length || node.tagType === 1) {
        return baseResult;
      }
      if (dir.arg) {
        context.onError(
          createDOMCompilerError(
            58,
            dir.arg.loc
          )
        );
      }
      function checkDuplicatedValue() {
        const value = findProp(node, "value");
        if (value) {
          context.onError(
            createDOMCompilerError(
              60,
              value.loc
            )
          );
        }
      }
      const { tag } = node;
      const isCustomElement = context.isCustomElement(tag);
      if (tag === "input" || tag === "textarea" || tag === "select" || isCustomElement) {
        let directiveToUse = V_MODEL_TEXT;
        let isInvalidType = false;
        if (tag === "input" || isCustomElement) {
          const type = findProp(node, `type`);
          if (type) {
            if (type.type === 7) {
              directiveToUse = V_MODEL_DYNAMIC;
            } else if (type.value) {
              switch (type.value.content) {
                case "radio":
                  directiveToUse = V_MODEL_RADIO;
                  break;
                case "checkbox":
                  directiveToUse = V_MODEL_CHECKBOX;
                  break;
                case "file":
                  isInvalidType = true;
                  context.onError(
                    createDOMCompilerError(
                      59,
                      dir.loc
                    )
                  );
                  break;
                default:
                  checkDuplicatedValue();
                  break;
              }
            }
          } else if (hasDynamicKeyVBind(node)) {
            directiveToUse = V_MODEL_DYNAMIC;
          } else {
            checkDuplicatedValue();
          }
        } else if (tag === "select") {
          directiveToUse = V_MODEL_SELECT;
        } else {
          checkDuplicatedValue();
        }
        if (!isInvalidType) {
          baseResult.needRuntime = context.helper(directiveToUse);
        }
      } else {
        context.onError(
          createDOMCompilerError(
            57,
            dir.loc
          )
        );
      }
      baseResult.props = baseResult.props.filter(
        (p) => !(p.key.type === 4 && p.key.content === "modelValue")
      );
      return baseResult;
    };
    isEventOptionModifier = makeMap(`passive,once,capture`);
    isNonKeyModifier = makeMap(
      // event propagation management
      `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`
    );
    maybeKeyModifier = makeMap("left,right");
    isKeyboardEvent = makeMap(
      `onkeyup,onkeydown,onkeypress`,
      true
    );
    resolveModifiers = (key, modifiers, context, loc) => {
      const keyModifiers = [];
      const nonKeyModifiers = [];
      const eventOptionModifiers = [];
      for (let i = 0; i < modifiers.length; i++) {
        const modifier = modifiers[i];
        if (modifier === "native" && checkCompatEnabled(
          "COMPILER_V_ON_NATIVE",
          context,
          loc
        )) {
          eventOptionModifiers.push(modifier);
        } else if (isEventOptionModifier(modifier)) {
          eventOptionModifiers.push(modifier);
        } else {
          if (maybeKeyModifier(modifier)) {
            if (isStaticExp(key)) {
              if (isKeyboardEvent(key.content)) {
                keyModifiers.push(modifier);
              } else {
                nonKeyModifiers.push(modifier);
              }
            } else {
              keyModifiers.push(modifier);
              nonKeyModifiers.push(modifier);
            }
          } else {
            if (isNonKeyModifier(modifier)) {
              nonKeyModifiers.push(modifier);
            } else {
              keyModifiers.push(modifier);
            }
          }
        }
      }
      return {
        keyModifiers,
        nonKeyModifiers,
        eventOptionModifiers
      };
    };
    transformClick = (key, event) => {
      const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === "onclick";
      return isStaticClick ? createSimpleExpression(event, true) : key.type !== 4 ? createCompoundExpression([
        `(`,
        key,
        `) === "onClick" ? "${event}" : (`,
        key,
        `)`
      ]) : key;
    };
    transformOn2 = (dir, node, context) => {
      return transformOn(dir, node, context, (baseResult) => {
        const { modifiers } = dir;
        if (!modifiers.length)
          return baseResult;
        let { key, value: handlerExp } = baseResult.props[0];
        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);
        if (nonKeyModifiers.includes("right")) {
          key = transformClick(key, `onContextmenu`);
        }
        if (nonKeyModifiers.includes("middle")) {
          key = transformClick(key, `onMouseup`);
        }
        if (nonKeyModifiers.length) {
          handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
            handlerExp,
            JSON.stringify(nonKeyModifiers)
          ]);
        }
        if (keyModifiers.length && // if event name is dynamic, always wrap with keys guard
        (!isStaticExp(key) || isKeyboardEvent(key.content))) {
          handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [
            handlerExp,
            JSON.stringify(keyModifiers)
          ]);
        }
        if (eventOptionModifiers.length) {
          const modifierPostfix = eventOptionModifiers.map(capitalize).join("");
          key = isStaticExp(key) ? createSimpleExpression(`${key.content}${modifierPostfix}`, true) : createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
        }
        return {
          props: [createObjectProperty(key, handlerExp)]
        };
      });
    };
    transformShow = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(
          createDOMCompilerError(61, loc)
        );
      }
      return {
        props: [],
        needRuntime: context.helper(V_SHOW)
      };
    };
    transformTransition = (node, context) => {
      if (node.type === 1 && node.tagType === 1) {
        const component = context.isBuiltInComponent(node.tag);
        if (component === TRANSITION) {
          return () => {
            if (!node.children.length) {
              return;
            }
            if (hasMultipleChildren(node)) {
              context.onError(
                createDOMCompilerError(
                  62,
                  {
                    start: node.children[0].loc.start,
                    end: node.children[node.children.length - 1].loc.end,
                    source: ""
                  }
                )
              );
            }
            const child = node.children[0];
            if (child.type === 1) {
              for (const p of child.props) {
                if (p.type === 7 && p.name === "show") {
                  node.props.push({
                    type: 6,
                    name: "persisted",
                    value: void 0,
                    loc: node.loc
                  });
                }
              }
            }
          };
        }
      }
    };
    ignoreSideEffectTags = (node, context) => {
      if (node.type === 1 && node.tagType === 0 && (node.tag === "script" || node.tag === "style")) {
        context.onError(
          createDOMCompilerError(
            63,
            node.loc
          )
        );
        context.removeNode();
      }
    };
    DOMNodeTransforms = [
      transformStyle,
      ...true ? [transformTransition] : []
    ];
    DOMDirectiveTransforms = {
      cloak: noopDirectiveTransform,
      html: transformVHtml,
      text: transformVText,
      model: transformModel2,
      // override compiler-core
      on: transformOn2,
      // override compiler-core
      show: transformShow
    };
  }
});

// node_modules/vue/dist/vue.cjs.js
var require_vue_cjs = __commonJS({
  "node_modules/vue/dist/vue.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var compilerDom = (init_compiler_dom_esm_bundler(), __toCommonJS(compiler_dom_esm_bundler_exports));
    var runtimeDom = (init_runtime_dom_esm_bundler(), __toCommonJS(runtime_dom_esm_bundler_exports));
    var shared = (init_shared_esm_bundler(), __toCommonJS(shared_esm_bundler_exports));
    function _interopNamespaceDefault(e) {
      var n = /* @__PURE__ */ Object.create(null);
      if (e) {
        for (var k in e) {
          n[k] = e[k];
        }
      }
      n.default = e;
      return Object.freeze(n);
    }
    var runtimeDom__namespace = _interopNamespaceDefault(runtimeDom);
    var compileCache = /* @__PURE__ */ Object.create(null);
    function compileToFunction(template, options) {
      if (!shared.isString(template)) {
        if (template.nodeType) {
          template = template.innerHTML;
        } else {
          runtimeDom.warn(`invalid template option: `, template);
          return shared.NOOP;
        }
      }
      const key = template;
      const cached = compileCache[key];
      if (cached) {
        return cached;
      }
      if (template[0] === "#") {
        const el = document.querySelector(template);
        if (!el) {
          runtimeDom.warn(`Template element not found or is empty: ${template}`);
        }
        template = el ? el.innerHTML : ``;
      }
      const opts = shared.extend(
        {
          hoistStatic: true,
          onError,
          onWarn: (e) => onError(e, true)
        },
        options
      );
      if (!opts.isCustomElement && typeof customElements !== "undefined") {
        opts.isCustomElement = (tag) => !!customElements.get(tag);
      }
      const { code } = compilerDom.compile(template, opts);
      function onError(err, asWarning = false) {
        const message = asWarning ? err.message : `Template compilation error: ${err.message}`;
        const codeFrame = err.loc && shared.generateCodeFrame(
          template,
          err.loc.start.offset,
          err.loc.end.offset
        );
        runtimeDom.warn(codeFrame ? `${message}
${codeFrame}` : message);
      }
      const render = new Function("Vue", code)(runtimeDom__namespace);
      render._rc = true;
      return compileCache[key] = render;
    }
    runtimeDom.registerRuntimeCompiler(compileToFunction);
    exports.compile = compileToFunction;
    Object.keys(runtimeDom).forEach(function(k) {
      if (k !== "default" && !exports.hasOwnProperty(k))
        exports[k] = runtimeDom[k];
    });
  }
});

// node_modules/vue/index.js
var require_vue = __commonJS({
  "node_modules/vue/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_vue_cjs();
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/base-editor.js
var require_base_editor = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/base-editor.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_vue());
      else if (typeof define === "function" && define.amd)
        define("VMdEditor", ["vue"], factory);
      else if (typeof exports === "object")
        exports["VMdEditor"] = factory(require_vue());
      else
        root["VMdEditor"] = factory(root["Vue"]);
    })(typeof self !== "undefined" ? self : exports, function(__WEBPACK_EXTERNAL_MODULE__0__) {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, { enumerable: true, get: getter });
            }
          };
          __webpack_require__.r = function(exports2) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
              Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
            }
            Object.defineProperty(exports2, "__esModule", { value: true });
          };
          __webpack_require__.t = function(value, mode) {
            if (mode & 1)
              value = __webpack_require__(value);
            if (mode & 8)
              return value;
            if (mode & 4 && typeof value === "object" && value && value.__esModule)
              return value;
            var ns = /* @__PURE__ */ Object.create(null);
            __webpack_require__.r(ns);
            Object.defineProperty(ns, "default", { enumerable: true, value });
            if (mode & 2 && typeof value != "string")
              for (var key in value)
                __webpack_require__.d(ns, key, function(key2) {
                  return value[key2];
                }.bind(null, key));
            return ns;
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 108);
        }([
          /* 0 */
          /***/
          function(module2, exports2) {
            module2.exports = __WEBPACK_EXTERNAL_MODULE__0__;
          },
          /* 1 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return bold;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return clear;
            });
            __webpack_require__.d(__webpack_exports__, "c", function() {
              return code;
            });
            __webpack_require__.d(__webpack_exports__, "d", function() {
              return fullscreen;
            });
            __webpack_require__.d(__webpack_exports__, "e", function() {
              return h1;
            });
            __webpack_require__.d(__webpack_exports__, "f", function() {
              return h2;
            });
            __webpack_require__.d(__webpack_exports__, "g", function() {
              return h3;
            });
            __webpack_require__.d(__webpack_exports__, "h", function() {
              return h4;
            });
            __webpack_require__.d(__webpack_exports__, "i", function() {
              return h5;
            });
            __webpack_require__.d(__webpack_exports__, "j", function() {
              return h6;
            });
            __webpack_require__.d(__webpack_exports__, "k", function() {
              return hr;
            });
            __webpack_require__.d(__webpack_exports__, "l", function() {
              return image;
            });
            __webpack_require__.d(__webpack_exports__, "m", function() {
              return italic;
            });
            __webpack_require__.d(__webpack_exports__, "n", function() {
              return link;
            });
            __webpack_require__.d(__webpack_exports__, "o", function() {
              return ol;
            });
            __webpack_require__.d(__webpack_exports__, "p", function() {
              return quote;
            });
            __webpack_require__.d(__webpack_exports__, "q", function() {
              return redo;
            });
            __webpack_require__.d(__webpack_exports__, "r", function() {
              return strikethrough;
            });
            __webpack_require__.d(__webpack_exports__, "s", function() {
              return syncScroll;
            });
            __webpack_require__.d(__webpack_exports__, "t", function() {
              return table;
            });
            __webpack_require__.d(__webpack_exports__, "u", function() {
              return ul;
            });
            __webpack_require__.d(__webpack_exports__, "v", function() {
              return undo;
            });
            var bold = "bold";
            var clear = "clear";
            var code = "code";
            var fullscreen = "fullscreen";
            var h1 = "h1";
            var h2 = "h2";
            var h3 = "h3";
            var h4 = "h4";
            var h5 = "h5";
            var h6 = "h6";
            var hr = "hr";
            var image = "image";
            var italic = "italic";
            var link = "link";
            var ol = "ol";
            var quote = "quote";
            var redo = "redo";
            var strikethrough = "strikethrough";
            var syncScroll = "sync-scroll";
            var table = "table";
            var ul = "ul";
            var undo = "undo";
          },
          /* 2 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "f", function() {
              return isObject2;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return arraytoObject;
            });
            __webpack_require__.d(__webpack_exports__, "c", function() {
              return importAll;
            });
            __webpack_require__.d(__webpack_exports__, "d", function() {
              return inBrowser;
            });
            __webpack_require__.d(__webpack_exports__, "e", function() {
              return isKorean;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return generatorText;
            });
            var toString = Object.prototype.toString;
            var isObject2 = function isObject3(target) {
              return toString.call(target) === "[object Object]";
            };
            function extend2(to, _from) {
              Object.keys(_from).forEach(function(key) {
                to[key] = _from[key];
              });
              return to;
            }
            function arraytoObject(arr) {
              var res = {};
              for (var i = 0; i < arr.length; i++) {
                if (arr[i]) {
                  extend2(res, arr[i]);
                }
              }
              return res;
            }
            function importAll(map, r) {
              r.keys().forEach(function(filePath) {
                map[filePath] = r(filePath);
              });
            }
            var inBrowser = typeof window !== "undefined";
            function isKorean(text) {
              var reg = /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi;
              return reg.test(text);
            }
            function generatorText(_ref) {
              var selected = _ref.selected, InsertGetter = _ref.InsertGetter, _ref$selectedGetter = _ref.selectedGetter, selectedGetter = _ref$selectedGetter === void 0 ? function(selected2) {
                return selected2;
              } : _ref$selectedGetter, _ref$ignoreEmptyLine = _ref.ignoreEmptyLine, ignoreEmptyLine = _ref$ignoreEmptyLine === void 0 ? true : _ref$ignoreEmptyLine;
              var insertContent;
              var newSelected;
              if (selected) {
                newSelected = selectedGetter(selected);
                insertContent = InsertGetter(selected, 1);
                if (selected.indexOf("\n") !== -1) {
                  insertContent = selected.split("\n").map(function(rowText, index) {
                    var isEmptyLine = !rowText;
                    if (ignoreEmptyLine && isEmptyLine)
                      return "";
                    return InsertGetter(rowText, index + 1).replace(selectedGetter(null), "");
                  }).join("\n");
                  newSelected = insertContent;
                }
              } else {
                insertContent = InsertGetter(null, 1);
                newSelected = selectedGetter(selected);
              }
              return {
                insertContent,
                newSelected
              };
            }
          },
          /* 3 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "c", function() {
              return LINE_MARKUP;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return HEADING_MARKUP;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return ANCHOR_MARKUP;
            });
            var LINE_MARKUP = "data-v-md-line";
            var HEADING_MARKUP = "data-v-md-heading";
            var ANCHOR_MARKUP = "data-v-md-anchor";
          },
          /* 4 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_exports__["a"] = {
              PREVIEW: "preview",
              EDITABLE: "editable",
              EDIT: "edit"
            };
          },
          /* 5 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return _extends;
            });
            function _extends() {
              _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends.apply(this, arguments);
            }
          },
          /* 6 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return getScrollTop;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return scrollTo;
            });
            function getScrollTop(target) {
              var result = 0;
              if (target === window) {
                result = target.pageYOffset;
              } else if (target) {
                result = target.scrollTop;
              }
              return result;
            }
            function scrollTo(target, scrollTop) {
              if (target === window) {
                window.scrollTo(window.pageYOffset, scrollTop);
              } else if (target) {
                target.scrollTop = scrollTop;
              }
            }
          },
          /* 7 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var esm_extends = __webpack_require__(5);
            var lib = __webpack_require__(11);
            var lib_default = __webpack_require__.n(lib);
            var svg = {
              svg: [],
              altGlyph: [],
              altGlyphDef: [],
              altGlyphItem: [],
              animate: [],
              animateColor: [],
              animateMotion: [],
              animateTransform: [],
              circle: [],
              clipPath: [],
              "color-profile": [],
              cursor: [],
              "definition-src": [],
              defs: [],
              desc: [],
              ellipse: [],
              feBlend: [],
              feColorMatrix: [],
              feComponentTransfer: [],
              feComposite: [],
              feConvolveMatrix: [],
              feDiffuseLighting: [],
              feDisplacementMap: [],
              feDistantLight: [],
              feFlood: [],
              feFuncA: [],
              feFuncB: [],
              feFuncG: [],
              feFuncR: [],
              feGaussianBlur: [],
              feImage: [],
              feMerge: [],
              feMergeNode: [],
              feMorphology: [],
              feOffset: [],
              fePointLight: [],
              feSpecularLighting: [],
              feSpotLight: [],
              feTile: [],
              feTurbulence: [],
              filter: [],
              font: [],
              foreignObject: [],
              g: [],
              glyph: [],
              glyphRef: [],
              hkern: [],
              image: [],
              line: [],
              linearGradient: [],
              marker: [],
              mask: [],
              metadata: [],
              "missing-glyph": [],
              mpath: [],
              path: [],
              pattern: [],
              polygon: [],
              polyline: [],
              radialGradient: [],
              rect: [],
              set: [],
              stop: [],
              style: [],
              switch: [],
              symbol: [],
              text: [],
              textPath: [],
              title: [],
              tref: [],
              tspan: [],
              use: [],
              view: [],
              vkern: []
            };
            var KaTex = {
              math: [],
              annotation: [],
              semantics: [],
              mtext: [],
              mn: [],
              mo: [],
              mi: [],
              mspace: [],
              mover: [],
              munder: [],
              munderover: [],
              msup: [],
              msub: [],
              msubsup: [],
              mfrac: [],
              mroot: [],
              msqrt: [],
              mtable: [],
              mtr: [],
              mtd: [],
              mlabeledtr: [],
              mrow: [],
              menclose: [],
              mstyle: [],
              mpadded: [],
              mphantom: [],
              mglyph: []
            };
            var attrWhiteList = ["style", "align", "class", "id"];
            var prefixAttrWhiteList = ["data-"];
            var tags = {
              input: ["type"],
              ol: ["reversed", "start", "type"],
              button: ["type"],
              summary: []
            };
            var tagWhiteList = Object(esm_extends[
              "a"
              /* default */
            ])({}, tags, KaTex, svg);
            var options = {
              whiteList: Object(esm_extends[
                "a"
                /* default */
              ])({}, lib_default.a.getDefaultWhiteList(), tagWhiteList),
              onIgnoreTagAttr: function onIgnoreTagAttr(tag, name, value) {
                if (svg[tag] || KaTex[tag] || attrWhiteList.find(function(attr) {
                  return attr === name;
                }) || prefixAttrWhiteList.find(function(prefix) {
                  return name.startsWith(prefix);
                })) {
                  return name + '="' + lib_default.a.escapeAttrValue(value) + '"';
                }
              }
            };
            var xssFilterInstance = new lib_default.a.FilterXSS(options);
            xssFilterInstance.extend = function(extendOptions) {
              var instanceOptions = xssFilterInstance.options;
              Object.keys(extendOptions).forEach(function(optionName) {
                if (optionName === "whiteList") {
                  Object.keys(extendOptions.whiteList).forEach(function(tagName) {
                    var tagAttrWhiteList = extendOptions.whiteList[tagName];
                    var instanceWhiteList = instanceOptions.whiteList;
                    if (instanceWhiteList[tagName]) {
                      instanceWhiteList[tagName] = [].concat(instanceWhiteList[tagName], tagAttrWhiteList);
                    } else {
                      instanceWhiteList[tagName] = tagAttrWhiteList;
                    }
                  });
                } else if (optionName === "onIgnoreTagAttr") {
                  var oldHandler = instanceOptions.onIgnoreTagAttr;
                  instanceOptions.onIgnoreTagAttr = function() {
                    var _extendOptions$onIgno;
                    for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
                      arg[_key] = arguments[_key];
                    }
                    var oldReturnVal = oldHandler.call.apply(oldHandler, [this].concat(arg));
                    var newReturnVal = (_extendOptions$onIgno = extendOptions.onIgnoreTagAttr).call.apply(_extendOptions$onIgno, [this].concat(arg));
                    return oldReturnVal || newReturnVal;
                  };
                } else {
                  instanceOptions[optionName] = extendOptions[optionName];
                }
              });
            };
            var xss = __webpack_exports__["a"] = xssFilterInstance;
          },
          /* 8 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return smooth;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return smoothScroll;
            });
            var _scroll_top__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
            function smooth(_ref) {
              var currentScrollTop = _ref.currentScrollTop, scrollToTop = _ref.scrollToTop, scrollFn = _ref.scrollFn, _ref$percent = _ref.percent, percent = _ref$percent === void 0 ? 10 : _ref$percent, onScrollEnd = _ref.onScrollEnd;
              var scrollWay = scrollToTop > currentScrollTop ? "down" : "up";
              var step = (scrollToTop - currentScrollTop) * (percent / 100);
              var id;
              var scroll = function scroll2() {
                currentScrollTop += step;
                if (scrollWay === "down" && currentScrollTop >= scrollToTop || scrollWay === "up" && currentScrollTop <= scrollToTop) {
                  scrollFn(scrollToTop);
                  window.cancelAnimationFrame(id);
                  if (onScrollEnd)
                    window.requestAnimationFrame(onScrollEnd);
                } else {
                  scrollFn(currentScrollTop);
                  window.requestAnimationFrame(scroll2);
                }
              };
              window.requestAnimationFrame(scroll);
            }
            function smoothScroll(_ref2) {
              var scrollTarget = _ref2.scrollTarget, scrollToTop = _ref2.scrollToTop, _ref2$percent = _ref2.percent, percent = _ref2$percent === void 0 ? 10 : _ref2$percent, onScrollEnd = _ref2.onScrollEnd;
              var currentScrollTop = Object(_scroll_top__WEBPACK_IMPORTED_MODULE_0__[
                /* getScrollTop */
                "a"
              ])(scrollTarget);
              smooth({
                currentScrollTop,
                scrollToTop,
                scrollFn: function scrollFn(scrollTop) {
                  return Object(_scroll_top__WEBPACK_IMPORTED_MODULE_0__[
                    /* scrollTo */
                    "b"
                  ])(scrollTarget, scrollTop);
                },
                percent,
                onScrollEnd
              });
            }
          },
          /* 9 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_ = __webpack_require__(0);
            function render(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                "div",
                {
                  class: "v-md-editor-preview",
                  style: {
                    tabSize: _ctx.tabSize,
                    "-moz-tab-size": _ctx.tabSize,
                    "-o-tab-size": _ctx.tabSize
                  },
                  onClick: _cache[1] || (_cache[1] = function() {
                    return _ctx.handlePreviewClick.apply(_ctx, arguments);
                  })
                },
                [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  {
                    class: [_ctx.previewClass],
                    innerHTML: _ctx.html
                  },
                  null,
                  10,
                  ["innerHTML"]
                )],
                4
                /* STYLE */
              );
            }
            var xss = __webpack_require__(7);
            var lang = __webpack_require__(13);
            var v_md_parser_VMdParser = function() {
              function VMdParser() {
                this.lang = new lang[
                  "a"
                  /* default */
                ]();
              }
              var _proto = VMdParser.prototype;
              _proto.defaultMarkdownLoader = function defaultMarkdownLoader(text) {
                return text;
              };
              _proto.use = function use(optionsOrInstall, opt) {
                if (typeof optionsOrInstall === "function") {
                  optionsOrInstall(this, opt);
                } else {
                  optionsOrInstall.install(this, opt);
                }
                return this;
              };
              _proto.theme = function theme(themeConfig) {
                this.themeConfig = themeConfig;
              };
              _proto.extendMarkdown = function extendMarkdown(extender) {
                if (!this.themeConfig) {
                  return console.error("Please use theme before using plugins");
                }
                var markdownParser = this.themeConfig.markdownParser;
                extender(markdownParser);
              };
              _proto.parse = function parse2(text) {
                var _markdownParser$rende;
                var markdownParser = this.themeConfig.markdownParser;
                var markdownLoader = (markdownParser == null ? void 0 : (_markdownParser$rende = markdownParser.render) == null ? void 0 : _markdownParser$rende.bind(markdownParser)) || this.defaultMarkdownLoader;
                if (typeof markdownLoader !== "function" || markdownLoader === this.defaultMarkdownLoader) {
                  console.error("Please configure your markdown parser");
                }
                return markdownLoader(text);
              };
              return VMdParser;
            }();
            var preview = __webpack_require__(16);
            var component = {
              name: "v-md-preview",
              mixins: [preview[
                "a"
                /* default */
              ]],
              props: {
                text: {
                  type: String,
                  default: ""
                },
                theme: Object,
                beforeChange: Function
              },
              emits: ["change"],
              data: function data() {
                return {
                  html: ""
                };
              },
              watch: {
                text: function text() {
                  this.handleTextChange();
                },
                langConfig: function langConfig() {
                  this.handleTextChange();
                }
              },
              computed: {
                vMdParser: function vMdParser2() {
                  return this.$options.vMdParser;
                },
                previewClass: function previewClass() {
                  return this.vMdParser.themeConfig.previewClass;
                },
                langConfig: function langConfig() {
                  return this.vMdParser.lang.langConfig;
                }
              },
              created: function created() {
                this.handleTextChange();
              },
              methods: {
                handleTextChange: function handleTextChange() {
                  var _this = this;
                  var next = function next2(text) {
                    _this.html = xss[
                      "a"
                      /* default */
                    ].process(_this.$options.vMdParser.parse(text));
                    _this.$emit("change", text, _this.html);
                  };
                  if (this.beforeChange) {
                    this.beforeChange(this.text, next);
                  } else {
                    next(this.text);
                  }
                }
              }
            };
            var vMdParser = new v_md_parser_VMdParser();
            vMdParser.lang.config = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["reactive"])(vMdParser.lang.config);
            component.vMdParser = new v_md_parser_VMdParser();
            var previewvue_type_script_lang_js = component;
            previewvue_type_script_lang_js.render = render;
            var src_preview = previewvue_type_script_lang_js;
            var font = __webpack_require__(18);
            var version = "2.3.15";
            var preview_install = function install(app) {
              app.component(src_preview.name, src_preview);
            };
            src_preview.version = version;
            src_preview.install = preview_install;
            src_preview.xss = xss[
              "a"
              /* default */
            ];
            src_preview.use = function(optionsOrInstall, opt) {
              if (typeof optionsOrInstall === "function") {
                optionsOrInstall(src_preview, opt);
              } else {
                optionsOrInstall.install(src_preview, opt);
              }
              return src_preview;
            };
            var src_preview_0 = __webpack_exports__["default"] = src_preview;
          },
          /* 10 */
          /***/
          function(module2, exports2, __webpack_require__) {
            module2.exports = __webpack_require__(37);
          },
          /* 11 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var DEFAULT = __webpack_require__(19);
            var parser = __webpack_require__(22);
            var FilterXSS = __webpack_require__(26);
            function filterXSS(html, options) {
              var xss = new FilterXSS(options);
              return xss.process(html);
            }
            exports2 = module2.exports = filterXSS;
            exports2.filterXSS = filterXSS;
            exports2.FilterXSS = FilterXSS;
            for (var i in DEFAULT)
              exports2[i] = DEFAULT[i];
            for (var i in parser)
              exports2[i] = parser[i];
            if (typeof window !== "undefined") {
              window.filterXSS = module2.exports;
            }
            function isWorkerEnv() {
              return typeof self !== "undefined" && typeof DedicatedWorkerGlobalScope !== "undefined" && self instanceof DedicatedWorkerGlobalScope;
            }
            if (isWorkerEnv()) {
              self.filterXSS = module2.exports;
            }
          },
          /* 12 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return filesFilter;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return getFilesFromClipboardData;
            });
            function filesFilter(files, config) {
              var accept = config.accept;
              var filesKeys = Object.keys(files).filter(function(key) {
                var file = files[key];
                var type = file.type, name = file.name;
                var extension = name.indexOf(".") > -1 ? "." + name.split(".").pop() : "";
                var baseType = type.replace(/\/.*$/, "");
                return accept.split(",").map(function(type2) {
                  return type2.trim();
                }).filter(function(type2) {
                  return type2;
                }).some(function(acceptedType) {
                  if (/\..+$/.test(acceptedType)) {
                    return extension === acceptedType;
                  }
                  if (/\/\*$/.test(acceptedType)) {
                    return baseType === acceptedType.replace(/\/\*$/, "");
                  }
                  if (/^[^\/]+\/[^\/]+$/.test(acceptedType)) {
                    return type === acceptedType;
                  }
                  return false;
                });
              });
              return filesKeys.map(function(key) {
                return files[key];
              });
            }
            function getFilesFromClipboardData(clipboardData) {
              var files = [];
              Object.keys(clipboardData.items).forEach(function(key) {
                var item = clipboardData.items[key];
                if (item.kind === "file") {
                  var file = item.getAsFile();
                  if (file)
                    files.push(file);
                }
              });
              return files;
            }
          },
          /* 13 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return (
                /* binding */
                lang_Lang
              );
            });
            var util = __webpack_require__(2);
            var deep_assign_hasOwnProperty = Object.prototype.hasOwnProperty;
            function assignKey(to, from, key) {
              var val = from[key];
              if (val === void 0 || val === null) {
                return;
              }
              if (!deep_assign_hasOwnProperty.call(to, key) || !Object(util[
                "f"
                /* isObject */
              ])(val)) {
                to[key] = val;
              } else {
                to[key] = deepAssign(Object(to[key]), from[key]);
              }
            }
            function deepAssign(to, from) {
              Object.keys(from).forEach(function(key) {
                assignKey(to, from, key);
              });
              return to;
            }
            var lang_Lang = function() {
              function Lang(options) {
                if (options === void 0) {
                  options = {};
                }
                this.config = {
                  lang: "zh-CN",
                  langConfig: {
                    "zh-CN": {}
                  }
                };
                this.options = options;
              }
              var _proto = Lang.prototype;
              _proto.use = function use(lang, config) {
                var _this$add;
                this.config.lang = lang;
                this.add((_this$add = {}, _this$add[lang] = config, _this$add));
                if (this.options.afterUse)
                  this.options.afterUse(lang, config);
              };
              _proto.add = function add(config) {
                if (config === void 0) {
                  config = {};
                }
                deepAssign(this.config.langConfig, config);
              };
              return Lang;
            }();
          },
          /* 14 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var DEFAULT = __webpack_require__(20);
            var FilterCSS = __webpack_require__(24);
            function filterCSS(html, options) {
              var xss = new FilterCSS(options);
              return xss.process(html);
            }
            exports2 = module2.exports = filterCSS;
            exports2.FilterCSS = FilterCSS;
            for (var i in DEFAULT)
              exports2[i] = DEFAULT[i];
            if (typeof window !== "undefined") {
              window.filterCSS = module2.exports;
            }
          },
          /* 15 */
          /***/
          function(module2, exports2) {
            module2.exports = {
              indexOf: function(arr, item) {
                var i, j;
                if (Array.prototype.indexOf) {
                  return arr.indexOf(item);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  if (arr[i] === item) {
                    return i;
                  }
                }
                return -1;
              },
              forEach: function(arr, fn, scope) {
                var i, j;
                if (Array.prototype.forEach) {
                  return arr.forEach(fn, scope);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  fn.call(scope, arr[i], i, arr);
                }
              },
              trim: function(str) {
                if (String.prototype.trim) {
                  return str.trim();
                }
                return str.replace(/(^\s*)|(\s*$)/g, "");
              },
              spaceIndex: function(str) {
                var reg = /\s|\n|\t/;
                var match = reg.exec(str);
                return match ? match.index : -1;
              }
            };
          },
          /* 16 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _utils_scroll_top__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
            var _utils_smooth_scroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
            var _utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
            __webpack_exports__["a"] = {
              props: {
                tabSize: {
                  type: Number,
                  default: 2
                },
                scrollContainer: {
                  type: Function,
                  default: function _default() {
                    return window;
                  }
                },
                top: {
                  type: Number,
                  default: 0
                }
              },
              emits: ["image-click"],
              methods: {
                handlePreviewClick: function handlePreviewClick(e) {
                  var target = e.target;
                  if (target.tagName === "IMG") {
                    var src = target.getAttribute("src");
                    if (!src)
                      return;
                    var imageEls = Array.from(this.$el.querySelectorAll("img"));
                    var images = imageEls.map(function(el) {
                      return el.getAttribute("src");
                    }).filter(function(src2) {
                      return src2;
                    });
                    var imagePreviewInitIndex = imageEls.indexOf(target);
                    this.$emit("image-click", images, imagePreviewInitIndex);
                    return;
                  }
                  var scrollToTargetId = target.getAttribute(_utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__[
                    /* ANCHOR_MARKUP */
                    "a"
                  ]);
                  var scrollToTarget = this.$el.querySelector("[" + _utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__[
                    /* HEADING_MARKUP */
                    "b"
                  ] + '="' + scrollToTargetId + '"]');
                  if (scrollToTarget) {
                    this.scrollToTarget({
                      target: scrollToTarget
                    });
                  }
                },
                getOffsetTop: function getOffsetTop(target, container) {
                  var rect = target.getBoundingClientRect();
                  if (container === window || container === document.documentElement) {
                    return rect.top;
                  }
                  return rect.top - container.getBoundingClientRect().top;
                },
                scrollToTarget: function scrollToTarget(_ref) {
                  var target = _ref.target, _ref$scrollContainer = _ref.scrollContainer, scrollContainer = _ref$scrollContainer === void 0 ? this.scrollContainer() : _ref$scrollContainer, _ref$top = _ref.top, top = _ref$top === void 0 ? this.top : _ref$top, onScrollEnd = _ref.onScrollEnd;
                  var offsetTop = this.getOffsetTop(target, scrollContainer);
                  var scrollTop = Object(_utils_scroll_top__WEBPACK_IMPORTED_MODULE_0__[
                    /* getScrollTop */
                    "a"
                  ])(scrollContainer) + offsetTop - top;
                  Object(_utils_smooth_scroll__WEBPACK_IMPORTED_MODULE_1__[
                    /* default */
                    "a"
                  ])({
                    scrollTarget: scrollContainer,
                    scrollToTop: scrollTop,
                    onScrollEnd
                  });
                },
                scrollToLine: function scrollToLine(_ref2) {
                  var lineIndex = _ref2.lineIndex, onScrollEnd = _ref2.onScrollEnd;
                  if (lineIndex) {
                    var target = this.$el.querySelector("[" + _utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__[
                      /* LINE_MARKUP */
                      "c"
                    ] + '="' + lineIndex + '"]');
                    if (target)
                      this.scrollToTarget({
                        target,
                        onScrollEnd
                      });
                  }
                }
              }
            };
          },
          /* 17 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return _asyncToGenerator;
            });
            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
          },
          /* 18 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 19 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var FilterCSS = __webpack_require__(14).FilterCSS;
            var getDefaultCSSWhiteList = __webpack_require__(14).getDefaultWhiteList;
            var _ = __webpack_require__(15);
            function getDefaultWhiteList() {
              return {
                a: ["target", "href", "title"],
                abbr: ["title"],
                address: [],
                area: ["shape", "coords", "href", "alt"],
                article: [],
                aside: [],
                audio: [
                  "autoplay",
                  "controls",
                  "crossorigin",
                  "loop",
                  "muted",
                  "preload",
                  "src"
                ],
                b: [],
                bdi: ["dir"],
                bdo: ["dir"],
                big: [],
                blockquote: ["cite"],
                br: [],
                caption: [],
                center: [],
                cite: [],
                code: [],
                col: ["align", "valign", "span", "width"],
                colgroup: ["align", "valign", "span", "width"],
                dd: [],
                del: ["datetime"],
                details: ["open"],
                div: [],
                dl: [],
                dt: [],
                em: [],
                figcaption: [],
                figure: [],
                font: ["color", "size", "face"],
                footer: [],
                h1: [],
                h2: [],
                h3: [],
                h4: [],
                h5: [],
                h6: [],
                header: [],
                hr: [],
                i: [],
                img: ["src", "alt", "title", "width", "height"],
                ins: ["datetime"],
                li: [],
                mark: [],
                nav: [],
                ol: [],
                p: [],
                pre: [],
                s: [],
                section: [],
                small: [],
                span: [],
                sub: [],
                summary: [],
                sup: [],
                strong: [],
                strike: [],
                table: ["width", "border", "align", "valign"],
                tbody: ["align", "valign"],
                td: ["width", "rowspan", "colspan", "align", "valign"],
                tfoot: ["align", "valign"],
                th: ["width", "rowspan", "colspan", "align", "valign"],
                thead: ["align", "valign"],
                tr: ["rowspan", "align", "valign"],
                tt: [],
                u: [],
                ul: [],
                video: [
                  "autoplay",
                  "controls",
                  "crossorigin",
                  "loop",
                  "muted",
                  "playsinline",
                  "poster",
                  "preload",
                  "src",
                  "height",
                  "width"
                ]
              };
            }
            var defaultCSSFilter = new FilterCSS();
            function onTag(tag, html, options) {
            }
            function onIgnoreTag(tag, html, options) {
            }
            function onTagAttr(tag, name, value) {
            }
            function onIgnoreTagAttr(tag, name, value) {
            }
            function escapeHtml(html) {
              return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
            }
            function safeAttrValue(tag, name, value, cssFilter) {
              value = friendlyAttrValue(value);
              if (name === "href" || name === "src") {
                value = _.trim(value);
                if (value === "#")
                  return "#";
                if (!(value.substr(0, 7) === "http://" || value.substr(0, 8) === "https://" || value.substr(0, 7) === "mailto:" || value.substr(0, 4) === "tel:" || value.substr(0, 11) === "data:image/" || value.substr(0, 6) === "ftp://" || value.substr(0, 2) === "./" || value.substr(0, 3) === "../" || value[0] === "#" || value[0] === "/")) {
                  return "";
                }
              } else if (name === "background") {
                REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
                  return "";
                }
              } else if (name === "style") {
                REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
                  return "";
                }
                REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
                  REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
                  if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
                    return "";
                  }
                }
                if (cssFilter !== false) {
                  cssFilter = cssFilter || defaultCSSFilter;
                  value = cssFilter.process(value);
                }
              }
              value = escapeAttrValue(value);
              return value;
            }
            var REGEXP_LT = /</g;
            var REGEXP_GT = />/g;
            var REGEXP_QUOTE = /"/g;
            var REGEXP_QUOTE_2 = /&quot;/g;
            var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
            var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
            var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
            var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
            var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;
            function escapeQuote(str) {
              return str.replace(REGEXP_QUOTE, "&quot;");
            }
            function unescapeQuote(str) {
              return str.replace(REGEXP_QUOTE_2, '"');
            }
            function escapeHtmlEntities(str) {
              return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str2, code) {
                return code[0] === "x" || code[0] === "X" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));
              });
            }
            function escapeDangerHtml5Entities(str) {
              return str.replace(REGEXP_ATTR_VALUE_COLON, ":").replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
            }
            function clearNonPrintableCharacter(str) {
              var str2 = "";
              for (var i = 0, len = str.length; i < len; i++) {
                str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
              }
              return _.trim(str2);
            }
            function friendlyAttrValue(str) {
              str = unescapeQuote(str);
              str = escapeHtmlEntities(str);
              str = escapeDangerHtml5Entities(str);
              str = clearNonPrintableCharacter(str);
              return str;
            }
            function escapeAttrValue(str) {
              str = escapeQuote(str);
              str = escapeHtml(str);
              return str;
            }
            function onIgnoreTagStripAll() {
              return "";
            }
            function StripTagBody(tags, next) {
              if (typeof next !== "function") {
                next = function() {
                };
              }
              var isRemoveAllTag = !Array.isArray(tags);
              function isRemoveTag(tag) {
                if (isRemoveAllTag)
                  return true;
                return _.indexOf(tags, tag) !== -1;
              }
              var removeList = [];
              var posStart = false;
              return {
                onIgnoreTag: function(tag, html, options) {
                  if (isRemoveTag(tag)) {
                    if (options.isClosing) {
                      var ret = "[/removed]";
                      var end = options.position + ret.length;
                      removeList.push([
                        posStart !== false ? posStart : options.position,
                        end
                      ]);
                      posStart = false;
                      return ret;
                    } else {
                      if (!posStart) {
                        posStart = options.position;
                      }
                      return "[removed]";
                    }
                  } else {
                    return next(tag, html, options);
                  }
                },
                remove: function(html) {
                  var rethtml = "";
                  var lastPos = 0;
                  _.forEach(removeList, function(pos) {
                    rethtml += html.slice(lastPos, pos[0]);
                    lastPos = pos[1];
                  });
                  rethtml += html.slice(lastPos);
                  return rethtml;
                }
              };
            }
            function stripCommentTag(html) {
              return html.replace(STRIP_COMMENT_TAG_REGEXP, "");
            }
            var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;
            function stripBlankChar(html) {
              var chars = html.split("");
              chars = chars.filter(function(char) {
                var c = char.charCodeAt(0);
                if (c === 127)
                  return false;
                if (c <= 31) {
                  if (c === 10 || c === 13)
                    return true;
                  return false;
                }
                return true;
              });
              return chars.join("");
            }
            exports2.whiteList = getDefaultWhiteList();
            exports2.getDefaultWhiteList = getDefaultWhiteList;
            exports2.onTag = onTag;
            exports2.onIgnoreTag = onIgnoreTag;
            exports2.onTagAttr = onTagAttr;
            exports2.onIgnoreTagAttr = onIgnoreTagAttr;
            exports2.safeAttrValue = safeAttrValue;
            exports2.escapeHtml = escapeHtml;
            exports2.escapeQuote = escapeQuote;
            exports2.unescapeQuote = unescapeQuote;
            exports2.escapeHtmlEntities = escapeHtmlEntities;
            exports2.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
            exports2.clearNonPrintableCharacter = clearNonPrintableCharacter;
            exports2.friendlyAttrValue = friendlyAttrValue;
            exports2.escapeAttrValue = escapeAttrValue;
            exports2.onIgnoreTagStripAll = onIgnoreTagStripAll;
            exports2.StripTagBody = StripTagBody;
            exports2.stripCommentTag = stripCommentTag;
            exports2.stripBlankChar = stripBlankChar;
            exports2.cssFilter = defaultCSSFilter;
            exports2.getDefaultCSSWhiteList = getDefaultCSSWhiteList;
          },
          /* 20 */
          /***/
          function(module2, exports2) {
            function getDefaultWhiteList() {
              var whiteList = {};
              whiteList["align-content"] = false;
              whiteList["align-items"] = false;
              whiteList["align-self"] = false;
              whiteList["alignment-adjust"] = false;
              whiteList["alignment-baseline"] = false;
              whiteList["all"] = false;
              whiteList["anchor-point"] = false;
              whiteList["animation"] = false;
              whiteList["animation-delay"] = false;
              whiteList["animation-direction"] = false;
              whiteList["animation-duration"] = false;
              whiteList["animation-fill-mode"] = false;
              whiteList["animation-iteration-count"] = false;
              whiteList["animation-name"] = false;
              whiteList["animation-play-state"] = false;
              whiteList["animation-timing-function"] = false;
              whiteList["azimuth"] = false;
              whiteList["backface-visibility"] = false;
              whiteList["background"] = true;
              whiteList["background-attachment"] = true;
              whiteList["background-clip"] = true;
              whiteList["background-color"] = true;
              whiteList["background-image"] = true;
              whiteList["background-origin"] = true;
              whiteList["background-position"] = true;
              whiteList["background-repeat"] = true;
              whiteList["background-size"] = true;
              whiteList["baseline-shift"] = false;
              whiteList["binding"] = false;
              whiteList["bleed"] = false;
              whiteList["bookmark-label"] = false;
              whiteList["bookmark-level"] = false;
              whiteList["bookmark-state"] = false;
              whiteList["border"] = true;
              whiteList["border-bottom"] = true;
              whiteList["border-bottom-color"] = true;
              whiteList["border-bottom-left-radius"] = true;
              whiteList["border-bottom-right-radius"] = true;
              whiteList["border-bottom-style"] = true;
              whiteList["border-bottom-width"] = true;
              whiteList["border-collapse"] = true;
              whiteList["border-color"] = true;
              whiteList["border-image"] = true;
              whiteList["border-image-outset"] = true;
              whiteList["border-image-repeat"] = true;
              whiteList["border-image-slice"] = true;
              whiteList["border-image-source"] = true;
              whiteList["border-image-width"] = true;
              whiteList["border-left"] = true;
              whiteList["border-left-color"] = true;
              whiteList["border-left-style"] = true;
              whiteList["border-left-width"] = true;
              whiteList["border-radius"] = true;
              whiteList["border-right"] = true;
              whiteList["border-right-color"] = true;
              whiteList["border-right-style"] = true;
              whiteList["border-right-width"] = true;
              whiteList["border-spacing"] = true;
              whiteList["border-style"] = true;
              whiteList["border-top"] = true;
              whiteList["border-top-color"] = true;
              whiteList["border-top-left-radius"] = true;
              whiteList["border-top-right-radius"] = true;
              whiteList["border-top-style"] = true;
              whiteList["border-top-width"] = true;
              whiteList["border-width"] = true;
              whiteList["bottom"] = false;
              whiteList["box-decoration-break"] = true;
              whiteList["box-shadow"] = true;
              whiteList["box-sizing"] = true;
              whiteList["box-snap"] = true;
              whiteList["box-suppress"] = true;
              whiteList["break-after"] = true;
              whiteList["break-before"] = true;
              whiteList["break-inside"] = true;
              whiteList["caption-side"] = false;
              whiteList["chains"] = false;
              whiteList["clear"] = true;
              whiteList["clip"] = false;
              whiteList["clip-path"] = false;
              whiteList["clip-rule"] = false;
              whiteList["color"] = true;
              whiteList["color-interpolation-filters"] = true;
              whiteList["column-count"] = false;
              whiteList["column-fill"] = false;
              whiteList["column-gap"] = false;
              whiteList["column-rule"] = false;
              whiteList["column-rule-color"] = false;
              whiteList["column-rule-style"] = false;
              whiteList["column-rule-width"] = false;
              whiteList["column-span"] = false;
              whiteList["column-width"] = false;
              whiteList["columns"] = false;
              whiteList["contain"] = false;
              whiteList["content"] = false;
              whiteList["counter-increment"] = false;
              whiteList["counter-reset"] = false;
              whiteList["counter-set"] = false;
              whiteList["crop"] = false;
              whiteList["cue"] = false;
              whiteList["cue-after"] = false;
              whiteList["cue-before"] = false;
              whiteList["cursor"] = false;
              whiteList["direction"] = false;
              whiteList["display"] = true;
              whiteList["display-inside"] = true;
              whiteList["display-list"] = true;
              whiteList["display-outside"] = true;
              whiteList["dominant-baseline"] = false;
              whiteList["elevation"] = false;
              whiteList["empty-cells"] = false;
              whiteList["filter"] = false;
              whiteList["flex"] = false;
              whiteList["flex-basis"] = false;
              whiteList["flex-direction"] = false;
              whiteList["flex-flow"] = false;
              whiteList["flex-grow"] = false;
              whiteList["flex-shrink"] = false;
              whiteList["flex-wrap"] = false;
              whiteList["float"] = false;
              whiteList["float-offset"] = false;
              whiteList["flood-color"] = false;
              whiteList["flood-opacity"] = false;
              whiteList["flow-from"] = false;
              whiteList["flow-into"] = false;
              whiteList["font"] = true;
              whiteList["font-family"] = true;
              whiteList["font-feature-settings"] = true;
              whiteList["font-kerning"] = true;
              whiteList["font-language-override"] = true;
              whiteList["font-size"] = true;
              whiteList["font-size-adjust"] = true;
              whiteList["font-stretch"] = true;
              whiteList["font-style"] = true;
              whiteList["font-synthesis"] = true;
              whiteList["font-variant"] = true;
              whiteList["font-variant-alternates"] = true;
              whiteList["font-variant-caps"] = true;
              whiteList["font-variant-east-asian"] = true;
              whiteList["font-variant-ligatures"] = true;
              whiteList["font-variant-numeric"] = true;
              whiteList["font-variant-position"] = true;
              whiteList["font-weight"] = true;
              whiteList["grid"] = false;
              whiteList["grid-area"] = false;
              whiteList["grid-auto-columns"] = false;
              whiteList["grid-auto-flow"] = false;
              whiteList["grid-auto-rows"] = false;
              whiteList["grid-column"] = false;
              whiteList["grid-column-end"] = false;
              whiteList["grid-column-start"] = false;
              whiteList["grid-row"] = false;
              whiteList["grid-row-end"] = false;
              whiteList["grid-row-start"] = false;
              whiteList["grid-template"] = false;
              whiteList["grid-template-areas"] = false;
              whiteList["grid-template-columns"] = false;
              whiteList["grid-template-rows"] = false;
              whiteList["hanging-punctuation"] = false;
              whiteList["height"] = true;
              whiteList["hyphens"] = false;
              whiteList["icon"] = false;
              whiteList["image-orientation"] = false;
              whiteList["image-resolution"] = false;
              whiteList["ime-mode"] = false;
              whiteList["initial-letters"] = false;
              whiteList["inline-box-align"] = false;
              whiteList["justify-content"] = false;
              whiteList["justify-items"] = false;
              whiteList["justify-self"] = false;
              whiteList["left"] = false;
              whiteList["letter-spacing"] = true;
              whiteList["lighting-color"] = true;
              whiteList["line-box-contain"] = false;
              whiteList["line-break"] = false;
              whiteList["line-grid"] = false;
              whiteList["line-height"] = false;
              whiteList["line-snap"] = false;
              whiteList["line-stacking"] = false;
              whiteList["line-stacking-ruby"] = false;
              whiteList["line-stacking-shift"] = false;
              whiteList["line-stacking-strategy"] = false;
              whiteList["list-style"] = true;
              whiteList["list-style-image"] = true;
              whiteList["list-style-position"] = true;
              whiteList["list-style-type"] = true;
              whiteList["margin"] = true;
              whiteList["margin-bottom"] = true;
              whiteList["margin-left"] = true;
              whiteList["margin-right"] = true;
              whiteList["margin-top"] = true;
              whiteList["marker-offset"] = false;
              whiteList["marker-side"] = false;
              whiteList["marks"] = false;
              whiteList["mask"] = false;
              whiteList["mask-box"] = false;
              whiteList["mask-box-outset"] = false;
              whiteList["mask-box-repeat"] = false;
              whiteList["mask-box-slice"] = false;
              whiteList["mask-box-source"] = false;
              whiteList["mask-box-width"] = false;
              whiteList["mask-clip"] = false;
              whiteList["mask-image"] = false;
              whiteList["mask-origin"] = false;
              whiteList["mask-position"] = false;
              whiteList["mask-repeat"] = false;
              whiteList["mask-size"] = false;
              whiteList["mask-source-type"] = false;
              whiteList["mask-type"] = false;
              whiteList["max-height"] = true;
              whiteList["max-lines"] = false;
              whiteList["max-width"] = true;
              whiteList["min-height"] = true;
              whiteList["min-width"] = true;
              whiteList["move-to"] = false;
              whiteList["nav-down"] = false;
              whiteList["nav-index"] = false;
              whiteList["nav-left"] = false;
              whiteList["nav-right"] = false;
              whiteList["nav-up"] = false;
              whiteList["object-fit"] = false;
              whiteList["object-position"] = false;
              whiteList["opacity"] = false;
              whiteList["order"] = false;
              whiteList["orphans"] = false;
              whiteList["outline"] = false;
              whiteList["outline-color"] = false;
              whiteList["outline-offset"] = false;
              whiteList["outline-style"] = false;
              whiteList["outline-width"] = false;
              whiteList["overflow"] = false;
              whiteList["overflow-wrap"] = false;
              whiteList["overflow-x"] = false;
              whiteList["overflow-y"] = false;
              whiteList["padding"] = true;
              whiteList["padding-bottom"] = true;
              whiteList["padding-left"] = true;
              whiteList["padding-right"] = true;
              whiteList["padding-top"] = true;
              whiteList["page"] = false;
              whiteList["page-break-after"] = false;
              whiteList["page-break-before"] = false;
              whiteList["page-break-inside"] = false;
              whiteList["page-policy"] = false;
              whiteList["pause"] = false;
              whiteList["pause-after"] = false;
              whiteList["pause-before"] = false;
              whiteList["perspective"] = false;
              whiteList["perspective-origin"] = false;
              whiteList["pitch"] = false;
              whiteList["pitch-range"] = false;
              whiteList["play-during"] = false;
              whiteList["position"] = false;
              whiteList["presentation-level"] = false;
              whiteList["quotes"] = false;
              whiteList["region-fragment"] = false;
              whiteList["resize"] = false;
              whiteList["rest"] = false;
              whiteList["rest-after"] = false;
              whiteList["rest-before"] = false;
              whiteList["richness"] = false;
              whiteList["right"] = false;
              whiteList["rotation"] = false;
              whiteList["rotation-point"] = false;
              whiteList["ruby-align"] = false;
              whiteList["ruby-merge"] = false;
              whiteList["ruby-position"] = false;
              whiteList["shape-image-threshold"] = false;
              whiteList["shape-outside"] = false;
              whiteList["shape-margin"] = false;
              whiteList["size"] = false;
              whiteList["speak"] = false;
              whiteList["speak-as"] = false;
              whiteList["speak-header"] = false;
              whiteList["speak-numeral"] = false;
              whiteList["speak-punctuation"] = false;
              whiteList["speech-rate"] = false;
              whiteList["stress"] = false;
              whiteList["string-set"] = false;
              whiteList["tab-size"] = false;
              whiteList["table-layout"] = false;
              whiteList["text-align"] = true;
              whiteList["text-align-last"] = true;
              whiteList["text-combine-upright"] = true;
              whiteList["text-decoration"] = true;
              whiteList["text-decoration-color"] = true;
              whiteList["text-decoration-line"] = true;
              whiteList["text-decoration-skip"] = true;
              whiteList["text-decoration-style"] = true;
              whiteList["text-emphasis"] = true;
              whiteList["text-emphasis-color"] = true;
              whiteList["text-emphasis-position"] = true;
              whiteList["text-emphasis-style"] = true;
              whiteList["text-height"] = true;
              whiteList["text-indent"] = true;
              whiteList["text-justify"] = true;
              whiteList["text-orientation"] = true;
              whiteList["text-overflow"] = true;
              whiteList["text-shadow"] = true;
              whiteList["text-space-collapse"] = true;
              whiteList["text-transform"] = true;
              whiteList["text-underline-position"] = true;
              whiteList["text-wrap"] = true;
              whiteList["top"] = false;
              whiteList["transform"] = false;
              whiteList["transform-origin"] = false;
              whiteList["transform-style"] = false;
              whiteList["transition"] = false;
              whiteList["transition-delay"] = false;
              whiteList["transition-duration"] = false;
              whiteList["transition-property"] = false;
              whiteList["transition-timing-function"] = false;
              whiteList["unicode-bidi"] = false;
              whiteList["vertical-align"] = false;
              whiteList["visibility"] = false;
              whiteList["voice-balance"] = false;
              whiteList["voice-duration"] = false;
              whiteList["voice-family"] = false;
              whiteList["voice-pitch"] = false;
              whiteList["voice-range"] = false;
              whiteList["voice-rate"] = false;
              whiteList["voice-stress"] = false;
              whiteList["voice-volume"] = false;
              whiteList["volume"] = false;
              whiteList["white-space"] = false;
              whiteList["widows"] = false;
              whiteList["width"] = true;
              whiteList["will-change"] = false;
              whiteList["word-break"] = true;
              whiteList["word-spacing"] = true;
              whiteList["word-wrap"] = true;
              whiteList["wrap-flow"] = false;
              whiteList["wrap-through"] = false;
              whiteList["writing-mode"] = false;
              whiteList["z-index"] = false;
              return whiteList;
            }
            function onAttr(name, value, options) {
            }
            function onIgnoreAttr(name, value, options) {
            }
            var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;
            function safeAttrValue(name, value) {
              if (REGEXP_URL_JAVASCRIPT.test(value))
                return "";
              return value;
            }
            exports2.whiteList = getDefaultWhiteList();
            exports2.getDefaultWhiteList = getDefaultWhiteList;
            exports2.onAttr = onAttr;
            exports2.onIgnoreAttr = onIgnoreAttr;
            exports2.safeAttrValue = safeAttrValue;
          },
          /* 21 */
          /***/
          function(module2, exports2) {
            module2.exports = {
              indexOf: function(arr, item) {
                var i, j;
                if (Array.prototype.indexOf) {
                  return arr.indexOf(item);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  if (arr[i] === item) {
                    return i;
                  }
                }
                return -1;
              },
              forEach: function(arr, fn, scope) {
                var i, j;
                if (Array.prototype.forEach) {
                  return arr.forEach(fn, scope);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  fn.call(scope, arr[i], i, arr);
                }
              },
              trim: function(str) {
                if (String.prototype.trim) {
                  return str.trim();
                }
                return str.replace(/(^\s*)|(\s*$)/g, "");
              },
              trimRight: function(str) {
                if (String.prototype.trimRight) {
                  return str.trimRight();
                }
                return str.replace(/(\s*$)/g, "");
              }
            };
          },
          /* 22 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var _ = __webpack_require__(15);
            function getTagName(html) {
              var i = _.spaceIndex(html);
              if (i === -1) {
                var tagName = html.slice(1, -1);
              } else {
                var tagName = html.slice(1, i + 1);
              }
              tagName = _.trim(tagName).toLowerCase();
              if (tagName.slice(0, 1) === "/")
                tagName = tagName.slice(1);
              if (tagName.slice(-1) === "/")
                tagName = tagName.slice(0, -1);
              return tagName;
            }
            function isClosing(html) {
              return html.slice(0, 2) === "</";
            }
            function parseTag2(html, onTag, escapeHtml) {
              "use strict";
              var rethtml = "";
              var lastPos = 0;
              var tagStart = false;
              var quoteStart = false;
              var currentPos = 0;
              var len = html.length;
              var currentTagName = "";
              var currentHtml = "";
              chariterator:
                for (currentPos = 0; currentPos < len; currentPos++) {
                  var c = html.charAt(currentPos);
                  if (tagStart === false) {
                    if (c === "<") {
                      tagStart = currentPos;
                      continue;
                    }
                  } else {
                    if (quoteStart === false) {
                      if (c === "<") {
                        rethtml += escapeHtml(html.slice(lastPos, currentPos));
                        tagStart = currentPos;
                        lastPos = currentPos;
                        continue;
                      }
                      if (c === ">") {
                        rethtml += escapeHtml(html.slice(lastPos, tagStart));
                        currentHtml = html.slice(tagStart, currentPos + 1);
                        currentTagName = getTagName(currentHtml);
                        rethtml += onTag(
                          tagStart,
                          rethtml.length,
                          currentTagName,
                          currentHtml,
                          isClosing(currentHtml)
                        );
                        lastPos = currentPos + 1;
                        tagStart = false;
                        continue;
                      }
                      if (c === '"' || c === "'") {
                        var i = 1;
                        var ic = html.charAt(currentPos - i);
                        while (ic.trim() === "" || ic === "=") {
                          if (ic === "=") {
                            quoteStart = c;
                            continue chariterator;
                          }
                          ic = html.charAt(currentPos - ++i);
                        }
                      }
                    } else {
                      if (c === quoteStart) {
                        quoteStart = false;
                        continue;
                      }
                    }
                  }
                }
              if (lastPos < html.length) {
                rethtml += escapeHtml(html.substr(lastPos));
              }
              return rethtml;
            }
            var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/gim;
            function parseAttr(html, onAttr) {
              "use strict";
              var lastPos = 0;
              var retAttrs = [];
              var tmpName = false;
              var len = html.length;
              function addAttr(name, value) {
                name = _.trim(name);
                name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
                if (name.length < 1)
                  return;
                var ret = onAttr(name, value || "");
                if (ret)
                  retAttrs.push(ret);
              }
              for (var i = 0; i < len; i++) {
                var c = html.charAt(i);
                var v, j;
                if (tmpName === false && c === "=") {
                  tmpName = html.slice(lastPos, i);
                  lastPos = i + 1;
                  continue;
                }
                if (tmpName !== false) {
                  if (i === lastPos && (c === '"' || c === "'") && html.charAt(i - 1) === "=") {
                    j = html.indexOf(c, i + 1);
                    if (j === -1) {
                      break;
                    } else {
                      v = _.trim(html.slice(lastPos + 1, j));
                      addAttr(tmpName, v);
                      tmpName = false;
                      i = j;
                      lastPos = i + 1;
                      continue;
                    }
                  }
                }
                if (/\s|\n|\t/.test(c)) {
                  html = html.replace(/\s|\n|\t/g, " ");
                  if (tmpName === false) {
                    j = findNextEqual(html, i);
                    if (j === -1) {
                      v = _.trim(html.slice(lastPos, i));
                      addAttr(v);
                      tmpName = false;
                      lastPos = i + 1;
                      continue;
                    } else {
                      i = j - 1;
                      continue;
                    }
                  } else {
                    j = findBeforeEqual(html, i - 1);
                    if (j === -1) {
                      v = _.trim(html.slice(lastPos, i));
                      v = stripQuoteWrap(v);
                      addAttr(tmpName, v);
                      tmpName = false;
                      lastPos = i + 1;
                      continue;
                    } else {
                      continue;
                    }
                  }
                }
              }
              if (lastPos < html.length) {
                if (tmpName === false) {
                  addAttr(html.slice(lastPos));
                } else {
                  addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));
                }
              }
              return _.trim(retAttrs.join(" "));
            }
            function findNextEqual(str, i) {
              for (; i < str.length; i++) {
                var c = str[i];
                if (c === " ")
                  continue;
                if (c === "=")
                  return i;
                return -1;
              }
            }
            function findBeforeEqual(str, i) {
              for (; i > 0; i--) {
                var c = str[i];
                if (c === " ")
                  continue;
                if (c === "=")
                  return i;
                return -1;
              }
            }
            function isQuoteWrapString(text) {
              if (text[0] === '"' && text[text.length - 1] === '"' || text[0] === "'" && text[text.length - 1] === "'") {
                return true;
              } else {
                return false;
              }
            }
            function stripQuoteWrap(text) {
              if (isQuoteWrapString(text)) {
                return text.substr(1, text.length - 2);
              } else {
                return text;
              }
            }
            exports2.parseTag = parseTag2;
            exports2.parseAttr = parseAttr;
          },
          /* 23 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
            var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
            var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
            var _utils_file__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_2__[
                /* image */
                "l"
              ],
              icon: "v-md-icon-img",
              title: function title(editor) {
                return editor.langConfig.image.toolbar;
              },
              menus: [{
                name: "image-link",
                text: function text(editor) {
                  return editor.langConfig.imageLink.toolbar;
                },
                action: function action(editor, config) {
                  if (config == null ? void 0 : config.insertWithSize) {
                    editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_2__[
                      /* image */
                      "l"
                    ], {
                      width: "auto",
                      height: "auto"
                    });
                  } else {
                    editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_2__[
                      /* image */
                      "l"
                    ]);
                  }
                }
              }, {
                name: "upload-image",
                text: function text(editor) {
                  return editor.langConfig.uploadImage.toolbar;
                },
                action: function action(editor) {
                  editor.uploadConfig = editor.uploadImgConfig;
                  editor.$nextTick(Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[
                    /* default */
                    "a"
                  ])(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
                    var event, files;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return editor.$refs.uploadFile.upload();
                          case 2:
                            event = _context.sent;
                            files = Object(_utils_file__WEBPACK_IMPORTED_MODULE_3__[
                              /* filesFilter */
                              "a"
                            ])(event.target.files, editor.uploadImgConfig);
                            editor.emitUploadImage(event, files);
                          case 5:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  })));
                }
              }]
            };
          },
          /* 24 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var DEFAULT = __webpack_require__(20);
            var parseStyle = __webpack_require__(25);
            var _ = __webpack_require__(21);
            function isNull(obj) {
              return obj === void 0 || obj === null;
            }
            function shallowCopyObject(obj) {
              var ret = {};
              for (var i in obj) {
                ret[i] = obj[i];
              }
              return ret;
            }
            function FilterCSS(options) {
              options = shallowCopyObject(options || {});
              options.whiteList = options.whiteList || DEFAULT.whiteList;
              options.onAttr = options.onAttr || DEFAULT.onAttr;
              options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;
              options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
              this.options = options;
            }
            FilterCSS.prototype.process = function(css) {
              css = css || "";
              css = css.toString();
              if (!css)
                return "";
              var me = this;
              var options = me.options;
              var whiteList = options.whiteList;
              var onAttr = options.onAttr;
              var onIgnoreAttr = options.onIgnoreAttr;
              var safeAttrValue = options.safeAttrValue;
              var retCSS = parseStyle(css, function(sourcePosition, position, name, value, source) {
                var check = whiteList[name];
                var isWhite = false;
                if (check === true)
                  isWhite = check;
                else if (typeof check === "function")
                  isWhite = check(value);
                else if (check instanceof RegExp)
                  isWhite = check.test(value);
                if (isWhite !== true)
                  isWhite = false;
                value = safeAttrValue(name, value);
                if (!value)
                  return;
                var opts = {
                  position,
                  sourcePosition,
                  source,
                  isWhite
                };
                if (isWhite) {
                  var ret = onAttr(name, value, opts);
                  if (isNull(ret)) {
                    return name + ":" + value;
                  } else {
                    return ret;
                  }
                } else {
                  var ret = onIgnoreAttr(name, value, opts);
                  if (!isNull(ret)) {
                    return ret;
                  }
                }
              });
              return retCSS;
            };
            module2.exports = FilterCSS;
          },
          /* 25 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var _ = __webpack_require__(21);
            function parseStyle(css, onAttr) {
              css = _.trimRight(css);
              if (css[css.length - 1] !== ";")
                css += ";";
              var cssLength = css.length;
              var isParenthesisOpen = false;
              var lastPos = 0;
              var i = 0;
              var retCSS = "";
              function addNewAttr() {
                if (!isParenthesisOpen) {
                  var source = _.trim(css.slice(lastPos, i));
                  var j2 = source.indexOf(":");
                  if (j2 !== -1) {
                    var name = _.trim(source.slice(0, j2));
                    var value = _.trim(source.slice(j2 + 1));
                    if (name) {
                      var ret = onAttr(lastPos, retCSS.length, name, value, source);
                      if (ret)
                        retCSS += ret + "; ";
                    }
                  }
                }
                lastPos = i + 1;
              }
              for (; i < cssLength; i++) {
                var c = css[i];
                if (c === "/" && css[i + 1] === "*") {
                  var j = css.indexOf("*/", i + 2);
                  if (j === -1)
                    break;
                  i = j + 1;
                  lastPos = i + 1;
                  isParenthesisOpen = false;
                } else if (c === "(") {
                  isParenthesisOpen = true;
                } else if (c === ")") {
                  isParenthesisOpen = false;
                } else if (c === ";") {
                  if (isParenthesisOpen) {
                  } else {
                    addNewAttr();
                  }
                } else if (c === "\n") {
                  addNewAttr();
                }
              }
              return _.trim(retCSS);
            }
            module2.exports = parseStyle;
          },
          /* 26 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var FilterCSS = __webpack_require__(14).FilterCSS;
            var DEFAULT = __webpack_require__(19);
            var parser = __webpack_require__(22);
            var parseTag2 = parser.parseTag;
            var parseAttr = parser.parseAttr;
            var _ = __webpack_require__(15);
            function isNull(obj) {
              return obj === void 0 || obj === null;
            }
            function getAttrs(html) {
              var i = _.spaceIndex(html);
              if (i === -1) {
                return {
                  html: "",
                  closing: html[html.length - 2] === "/"
                };
              }
              html = _.trim(html.slice(i + 1, -1));
              var isClosing = html[html.length - 1] === "/";
              if (isClosing)
                html = _.trim(html.slice(0, -1));
              return {
                html,
                closing: isClosing
              };
            }
            function shallowCopyObject(obj) {
              var ret = {};
              for (var i in obj) {
                ret[i] = obj[i];
              }
              return ret;
            }
            function FilterXSS(options) {
              options = shallowCopyObject(options || {});
              if (options.stripIgnoreTag) {
                if (options.onIgnoreTag) {
                  console.error(
                    'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
                  );
                }
                options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
              }
              options.whiteList = options.whiteList || DEFAULT.whiteList;
              options.onTag = options.onTag || DEFAULT.onTag;
              options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
              options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
              options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
              options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
              options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
              this.options = options;
              if (options.css === false) {
                this.cssFilter = false;
              } else {
                options.css = options.css || {};
                this.cssFilter = new FilterCSS(options.css);
              }
            }
            FilterXSS.prototype.process = function(html) {
              html = html || "";
              html = html.toString();
              if (!html)
                return "";
              var me = this;
              var options = me.options;
              var whiteList = options.whiteList;
              var onTag = options.onTag;
              var onIgnoreTag = options.onIgnoreTag;
              var onTagAttr = options.onTagAttr;
              var onIgnoreTagAttr = options.onIgnoreTagAttr;
              var safeAttrValue = options.safeAttrValue;
              var escapeHtml = options.escapeHtml;
              var cssFilter = me.cssFilter;
              if (options.stripBlankChar) {
                html = DEFAULT.stripBlankChar(html);
              }
              if (!options.allowCommentTag) {
                html = DEFAULT.stripCommentTag(html);
              }
              var stripIgnoreTagBody = false;
              if (options.stripIgnoreTagBody) {
                var stripIgnoreTagBody = DEFAULT.StripTagBody(
                  options.stripIgnoreTagBody,
                  onIgnoreTag
                );
                onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
              }
              var retHtml = parseTag2(
                html,
                function(sourcePosition, position, tag, html2, isClosing) {
                  var info = {
                    sourcePosition,
                    position,
                    isClosing,
                    isWhite: whiteList.hasOwnProperty(tag)
                  };
                  var ret = onTag(tag, html2, info);
                  if (!isNull(ret))
                    return ret;
                  if (info.isWhite) {
                    if (info.isClosing) {
                      return "</" + tag + ">";
                    }
                    var attrs = getAttrs(html2);
                    var whiteAttrList = whiteList[tag];
                    var attrsHtml = parseAttr(attrs.html, function(name, value) {
                      var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
                      var ret2 = onTagAttr(tag, name, value, isWhiteAttr);
                      if (!isNull(ret2))
                        return ret2;
                      if (isWhiteAttr) {
                        value = safeAttrValue(tag, name, value, cssFilter);
                        if (value) {
                          return name + '="' + value + '"';
                        } else {
                          return name;
                        }
                      } else {
                        var ret2 = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
                        if (!isNull(ret2))
                          return ret2;
                        return;
                      }
                    });
                    var html2 = "<" + tag;
                    if (attrsHtml)
                      html2 += " " + attrsHtml;
                    if (attrs.closing)
                      html2 += " /";
                    html2 += ">";
                    return html2;
                  } else {
                    var ret = onIgnoreTag(tag, html2, info);
                    if (!isNull(ret))
                      return ret;
                    return escapeHtml(html2);
                  }
                },
                escapeHtml
              );
              if (stripIgnoreTagBody) {
                retHtml = stripIgnoreTagBody.remove(retHtml);
              }
              return retHtml;
            };
            module2.exports = FilterXSS;
          },
          /* 27 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 28 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 29 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 30 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 31 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 32 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 33 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 34 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            (function(global) {
              var MapShim = function() {
                if (typeof Map !== "undefined") {
                  return Map;
                }
                function getIndex(arr, key) {
                  var result = -1;
                  arr.some(function(entry, index2) {
                    if (entry[0] === key) {
                      result = index2;
                      return true;
                    }
                    return false;
                  });
                  return result;
                }
                return (
                  /** @class */
                  function() {
                    function class_1() {
                      this.__entries__ = [];
                    }
                    Object.defineProperty(class_1.prototype, "size", {
                      /**
                       * @returns {boolean}
                       */
                      get: function() {
                        return this.__entries__.length;
                      },
                      enumerable: true,
                      configurable: true
                    });
                    class_1.prototype.get = function(key) {
                      var index2 = getIndex(this.__entries__, key);
                      var entry = this.__entries__[index2];
                      return entry && entry[1];
                    };
                    class_1.prototype.set = function(key, value) {
                      var index2 = getIndex(this.__entries__, key);
                      if (~index2) {
                        this.__entries__[index2][1] = value;
                      } else {
                        this.__entries__.push([key, value]);
                      }
                    };
                    class_1.prototype.delete = function(key) {
                      var entries = this.__entries__;
                      var index2 = getIndex(entries, key);
                      if (~index2) {
                        entries.splice(index2, 1);
                      }
                    };
                    class_1.prototype.has = function(key) {
                      return !!~getIndex(this.__entries__, key);
                    };
                    class_1.prototype.clear = function() {
                      this.__entries__.splice(0);
                    };
                    class_1.prototype.forEach = function(callback, ctx) {
                      if (ctx === void 0) {
                        ctx = null;
                      }
                      for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                        var entry = _a[_i];
                        callback.call(ctx, entry[1], entry[0]);
                      }
                    };
                    return class_1;
                  }()
                );
              }();
              var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
              var global$1 = function() {
                if (typeof global !== "undefined" && global.Math === Math) {
                  return global;
                }
                if (typeof self !== "undefined" && self.Math === Math) {
                  return self;
                }
                if (typeof window !== "undefined" && window.Math === Math) {
                  return window;
                }
                return Function("return this")();
              }();
              var requestAnimationFrame$1 = function() {
                if (typeof requestAnimationFrame === "function") {
                  return requestAnimationFrame.bind(global$1);
                }
                return function(callback) {
                  return setTimeout(function() {
                    return callback(Date.now());
                  }, 1e3 / 60);
                };
              }();
              var trailingTimeout = 2;
              function throttle(callback, delay) {
                var leadingCall = false, trailingCall = false, lastCallTime = 0;
                function resolvePending() {
                  if (leadingCall) {
                    leadingCall = false;
                    callback();
                  }
                  if (trailingCall) {
                    proxy();
                  }
                }
                function timeoutCallback() {
                  requestAnimationFrame$1(resolvePending);
                }
                function proxy() {
                  var timeStamp = Date.now();
                  if (leadingCall) {
                    if (timeStamp - lastCallTime < trailingTimeout) {
                      return;
                    }
                    trailingCall = true;
                  } else {
                    leadingCall = true;
                    trailingCall = false;
                    setTimeout(timeoutCallback, delay);
                  }
                  lastCallTime = timeStamp;
                }
                return proxy;
              }
              var REFRESH_DELAY = 20;
              var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
              var mutationObserverSupported = typeof MutationObserver !== "undefined";
              var ResizeObserverController = (
                /** @class */
                function() {
                  function ResizeObserverController2() {
                    this.connected_ = false;
                    this.mutationEventsAdded_ = false;
                    this.mutationsObserver_ = null;
                    this.observers_ = [];
                    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
                    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
                  }
                  ResizeObserverController2.prototype.addObserver = function(observer) {
                    if (!~this.observers_.indexOf(observer)) {
                      this.observers_.push(observer);
                    }
                    if (!this.connected_) {
                      this.connect_();
                    }
                  };
                  ResizeObserverController2.prototype.removeObserver = function(observer) {
                    var observers2 = this.observers_;
                    var index2 = observers2.indexOf(observer);
                    if (~index2) {
                      observers2.splice(index2, 1);
                    }
                    if (!observers2.length && this.connected_) {
                      this.disconnect_();
                    }
                  };
                  ResizeObserverController2.prototype.refresh = function() {
                    var changesDetected = this.updateObservers_();
                    if (changesDetected) {
                      this.refresh();
                    }
                  };
                  ResizeObserverController2.prototype.updateObservers_ = function() {
                    var activeObservers = this.observers_.filter(function(observer) {
                      return observer.gatherActive(), observer.hasActive();
                    });
                    activeObservers.forEach(function(observer) {
                      return observer.broadcastActive();
                    });
                    return activeObservers.length > 0;
                  };
                  ResizeObserverController2.prototype.connect_ = function() {
                    if (!isBrowser || this.connected_) {
                      return;
                    }
                    document.addEventListener("transitionend", this.onTransitionEnd_);
                    window.addEventListener("resize", this.refresh);
                    if (mutationObserverSupported) {
                      this.mutationsObserver_ = new MutationObserver(this.refresh);
                      this.mutationsObserver_.observe(document, {
                        attributes: true,
                        childList: true,
                        characterData: true,
                        subtree: true
                      });
                    } else {
                      document.addEventListener("DOMSubtreeModified", this.refresh);
                      this.mutationEventsAdded_ = true;
                    }
                    this.connected_ = true;
                  };
                  ResizeObserverController2.prototype.disconnect_ = function() {
                    if (!isBrowser || !this.connected_) {
                      return;
                    }
                    document.removeEventListener("transitionend", this.onTransitionEnd_);
                    window.removeEventListener("resize", this.refresh);
                    if (this.mutationsObserver_) {
                      this.mutationsObserver_.disconnect();
                    }
                    if (this.mutationEventsAdded_) {
                      document.removeEventListener("DOMSubtreeModified", this.refresh);
                    }
                    this.mutationsObserver_ = null;
                    this.mutationEventsAdded_ = false;
                    this.connected_ = false;
                  };
                  ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
                    var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
                    var isReflowProperty = transitionKeys.some(function(key) {
                      return !!~propertyName.indexOf(key);
                    });
                    if (isReflowProperty) {
                      this.refresh();
                    }
                  };
                  ResizeObserverController2.getInstance = function() {
                    if (!this.instance_) {
                      this.instance_ = new ResizeObserverController2();
                    }
                    return this.instance_;
                  };
                  ResizeObserverController2.instance_ = null;
                  return ResizeObserverController2;
                }()
              );
              var defineConfigurable = function(target, props) {
                for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
                  var key = _a[_i];
                  Object.defineProperty(target, key, {
                    value: props[key],
                    enumerable: false,
                    writable: false,
                    configurable: true
                  });
                }
                return target;
              };
              var getWindowOf = function(target) {
                var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
                return ownerGlobal || global$1;
              };
              var emptyRect = createRectInit(0, 0, 0, 0);
              function toFloat(value) {
                return parseFloat(value) || 0;
              }
              function getBordersSize(styles) {
                var positions = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                  positions[_i - 1] = arguments[_i];
                }
                return positions.reduce(function(size, position) {
                  var value = styles["border-" + position + "-width"];
                  return size + toFloat(value);
                }, 0);
              }
              function getPaddings(styles) {
                var positions = ["top", "right", "bottom", "left"];
                var paddings = {};
                for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
                  var position = positions_1[_i];
                  var value = styles["padding-" + position];
                  paddings[position] = toFloat(value);
                }
                return paddings;
              }
              function getSVGContentRect(target) {
                var bbox = target.getBBox();
                return createRectInit(0, 0, bbox.width, bbox.height);
              }
              function getHTMLElementContentRect(target) {
                var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
                if (!clientWidth && !clientHeight) {
                  return emptyRect;
                }
                var styles = getWindowOf(target).getComputedStyle(target);
                var paddings = getPaddings(styles);
                var horizPad = paddings.left + paddings.right;
                var vertPad = paddings.top + paddings.bottom;
                var width = toFloat(styles.width), height = toFloat(styles.height);
                if (styles.boxSizing === "border-box") {
                  if (Math.round(width + horizPad) !== clientWidth) {
                    width -= getBordersSize(styles, "left", "right") + horizPad;
                  }
                  if (Math.round(height + vertPad) !== clientHeight) {
                    height -= getBordersSize(styles, "top", "bottom") + vertPad;
                  }
                }
                if (!isDocumentElement(target)) {
                  var vertScrollbar = Math.round(width + horizPad) - clientWidth;
                  var horizScrollbar = Math.round(height + vertPad) - clientHeight;
                  if (Math.abs(vertScrollbar) !== 1) {
                    width -= vertScrollbar;
                  }
                  if (Math.abs(horizScrollbar) !== 1) {
                    height -= horizScrollbar;
                  }
                }
                return createRectInit(paddings.left, paddings.top, width, height);
              }
              var isSVGGraphicsElement = function() {
                if (typeof SVGGraphicsElement !== "undefined") {
                  return function(target) {
                    return target instanceof getWindowOf(target).SVGGraphicsElement;
                  };
                }
                return function(target) {
                  return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
                };
              }();
              function isDocumentElement(target) {
                return target === getWindowOf(target).document.documentElement;
              }
              function getContentRect(target) {
                if (!isBrowser) {
                  return emptyRect;
                }
                if (isSVGGraphicsElement(target)) {
                  return getSVGContentRect(target);
                }
                return getHTMLElementContentRect(target);
              }
              function createReadOnlyRect(_a) {
                var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
                var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
                var rect = Object.create(Constr.prototype);
                defineConfigurable(rect, {
                  x,
                  y,
                  width,
                  height,
                  top: y,
                  right: x + width,
                  bottom: height + y,
                  left: x
                });
                return rect;
              }
              function createRectInit(x, y, width, height) {
                return { x, y, width, height };
              }
              var ResizeObservation = (
                /** @class */
                function() {
                  function ResizeObservation2(target) {
                    this.broadcastWidth = 0;
                    this.broadcastHeight = 0;
                    this.contentRect_ = createRectInit(0, 0, 0, 0);
                    this.target = target;
                  }
                  ResizeObservation2.prototype.isActive = function() {
                    var rect = getContentRect(this.target);
                    this.contentRect_ = rect;
                    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
                  };
                  ResizeObservation2.prototype.broadcastRect = function() {
                    var rect = this.contentRect_;
                    this.broadcastWidth = rect.width;
                    this.broadcastHeight = rect.height;
                    return rect;
                  };
                  return ResizeObservation2;
                }()
              );
              var ResizeObserverEntry = (
                /** @class */
                function() {
                  function ResizeObserverEntry2(target, rectInit) {
                    var contentRect = createReadOnlyRect(rectInit);
                    defineConfigurable(this, { target, contentRect });
                  }
                  return ResizeObserverEntry2;
                }()
              );
              var ResizeObserverSPI = (
                /** @class */
                function() {
                  function ResizeObserverSPI2(callback, controller, callbackCtx) {
                    this.activeObservations_ = [];
                    this.observations_ = new MapShim();
                    if (typeof callback !== "function") {
                      throw new TypeError("The callback provided as parameter 1 is not a function.");
                    }
                    this.callback_ = callback;
                    this.controller_ = controller;
                    this.callbackCtx_ = callbackCtx;
                  }
                  ResizeObserverSPI2.prototype.observe = function(target) {
                    if (!arguments.length) {
                      throw new TypeError("1 argument required, but only 0 present.");
                    }
                    if (typeof Element === "undefined" || !(Element instanceof Object)) {
                      return;
                    }
                    if (!(target instanceof getWindowOf(target).Element)) {
                      throw new TypeError('parameter 1 is not of type "Element".');
                    }
                    var observations = this.observations_;
                    if (observations.has(target)) {
                      return;
                    }
                    observations.set(target, new ResizeObservation(target));
                    this.controller_.addObserver(this);
                    this.controller_.refresh();
                  };
                  ResizeObserverSPI2.prototype.unobserve = function(target) {
                    if (!arguments.length) {
                      throw new TypeError("1 argument required, but only 0 present.");
                    }
                    if (typeof Element === "undefined" || !(Element instanceof Object)) {
                      return;
                    }
                    if (!(target instanceof getWindowOf(target).Element)) {
                      throw new TypeError('parameter 1 is not of type "Element".');
                    }
                    var observations = this.observations_;
                    if (!observations.has(target)) {
                      return;
                    }
                    observations.delete(target);
                    if (!observations.size) {
                      this.controller_.removeObserver(this);
                    }
                  };
                  ResizeObserverSPI2.prototype.disconnect = function() {
                    this.clearActive();
                    this.observations_.clear();
                    this.controller_.removeObserver(this);
                  };
                  ResizeObserverSPI2.prototype.gatherActive = function() {
                    var _this = this;
                    this.clearActive();
                    this.observations_.forEach(function(observation) {
                      if (observation.isActive()) {
                        _this.activeObservations_.push(observation);
                      }
                    });
                  };
                  ResizeObserverSPI2.prototype.broadcastActive = function() {
                    if (!this.hasActive()) {
                      return;
                    }
                    var ctx = this.callbackCtx_;
                    var entries = this.activeObservations_.map(function(observation) {
                      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
                    });
                    this.callback_.call(ctx, entries, ctx);
                    this.clearActive();
                  };
                  ResizeObserverSPI2.prototype.clearActive = function() {
                    this.activeObservations_.splice(0);
                  };
                  ResizeObserverSPI2.prototype.hasActive = function() {
                    return this.activeObservations_.length > 0;
                  };
                  return ResizeObserverSPI2;
                }()
              );
              var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
              var ResizeObserver = (
                /** @class */
                function() {
                  function ResizeObserver2(callback) {
                    if (!(this instanceof ResizeObserver2)) {
                      throw new TypeError("Cannot call a class as a function.");
                    }
                    if (!arguments.length) {
                      throw new TypeError("1 argument required, but only 0 present.");
                    }
                    var controller = ResizeObserverController.getInstance();
                    var observer = new ResizeObserverSPI(callback, controller, this);
                    observers.set(this, observer);
                  }
                  return ResizeObserver2;
                }()
              );
              [
                "observe",
                "unobserve",
                "disconnect"
              ].forEach(function(method) {
                ResizeObserver.prototype[method] = function() {
                  var _a;
                  return (_a = observers.get(this))[method].apply(_a, arguments);
                };
              });
              var index = function() {
                if (typeof global$1.ResizeObserver !== "undefined") {
                  return global$1.ResizeObserver;
                }
                return ResizeObserver;
              }();
              __webpack_exports__["a"] = index;
            }).call(this, __webpack_require__(86));
          },
          /* 35 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return (
                /* binding */
                createEditor
              );
            });
            var utils_lang = __webpack_require__(13);
            var zh_CN = {
              undo: {
                toolbar: "撤销"
              },
              redo: {
                toolbar: "重做"
              },
              clear: {
                toolbar: "清空"
              },
              h: {
                toolbar: "标题"
              },
              h1: {
                toolbar: "一级标题",
                placeholder: "一级标题"
              },
              h2: {
                toolbar: "二级标题",
                placeholder: "二级标题"
              },
              h3: {
                toolbar: "三级标题",
                placeholder: "三级标题"
              },
              h4: {
                toolbar: "四级标题",
                placeholder: "四级标题"
              },
              h5: {
                toolbar: "五级标题",
                placeholder: "五级标题"
              },
              h6: {
                toolbar: "六级标题",
                placeholder: "六级标题"
              },
              bold: {
                toolbar: "粗体",
                placeholder: "粗体"
              },
              italic: {
                toolbar: "斜体",
                placeholder: "斜体"
              },
              strikethrough: {
                toolbar: "删除线",
                placeholder: "删除线"
              },
              quote: {
                toolbar: "插入引用",
                placeholder: "引用"
              },
              ul: {
                toolbar: "无序列表",
                placeholder: "无序列表"
              },
              ol: {
                toolbar: "有序列表",
                placeholder: "有序列表"
              },
              table: {
                toolbar: "表格"
              },
              hr: {
                toolbar: "插入分割线"
              },
              link: {
                toolbar: "插入链接",
                descPlaceholder: "链接"
              },
              image: {
                toolbar: "插入图片"
              },
              imageLink: {
                toolbar: "添加图片链接"
              },
              uploadImage: {
                toolbar: "上传本地图片"
              },
              code: {
                toolbar: "插入代码块"
              },
              save: {
                toolbar: "保存"
              },
              preview: {
                enabled: "开启预览",
                disabled: "关闭预览"
              },
              toc: {
                title: "目录导航",
                enabled: "开启目录导航",
                disabled: "关闭目录导航"
              },
              syncScroll: {
                enabled: "开启同步滚动",
                disabled: "关闭同步滚动"
              },
              fullscreen: {
                enabled: "全屏（按ESC还原）",
                disabled: "退出全屏"
              }
            };
            var external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_ = __webpack_require__(0);
            var util = __webpack_require__(2);
            var defaultCommands = {};
            Object(util[
              "c"
              /* importAll */
            ])(defaultCommands, __webpack_require__(38));
            function command_registerCommand(target, commandName, callback) {
              if (commandName) {
                if (!target[commandName]) {
                  target[commandName] = callback;
                } else {
                  console.error("The command name is already in use: " + commandName);
                }
              } else {
                console.error("Command name is required");
              }
            }
            function commandWrapper(component) {
              component.commands = {};
              component.command = function(commandName, callback) {
                command_registerCommand(component.commands, commandName, callback);
              };
              Object.keys(defaultCommands).forEach(function(key) {
                var module3 = defaultCommands[key];
                var name = module3.name, callback = module3.default;
                component.command(name, callback);
              });
            }
            var esm_extends = __webpack_require__(5);
            var defaultToolbars = {};
            Object(util[
              "c"
              /* importAll */
            ])(defaultToolbars, __webpack_require__(61));
            function toolbar_registerToolbar(target, name, config) {
              if (name) {
                target[name] = Object(esm_extends[
                  "a"
                  /* default */
                ])({}, config);
              } else {
                console.error("Toolbar name is required");
              }
            }
            function toolbarWrapper(component) {
              component.toolbars = {};
              component.toolbar = function(name, config) {
                toolbar_registerToolbar(component.toolbars, name, config);
              };
              Object.keys(defaultToolbars).forEach(function(key) {
                var module3 = defaultToolbars[key];
                var config = module3.default;
                component.toolbar(config.name, config);
              });
            }
            var styles = __webpack_require__(81);
            var preview = __webpack_require__(9);
            var _hoisted_1 = {
              class: "v-md-editor__left-area-body"
            };
            var _hoisted_2 = {
              class: "v-md-editor__right-area"
            };
            var _hoisted_3 = {
              class: "v-md-editor__toolbar",
              ref: "toolbarWrapper"
            };
            var _hoisted_4 = {
              class: "v-md-editor__main"
            };
            var _hoisted_5 = {
              class: "v-md-editor__preview-wrapper",
              ref: "previewWrapper"
            };
            function containervue_type_template_id_e6b02356_bindings_leftToolbar_props_rightToolbar_props_toolbars_props_fullscreen_props_height_props_noresize_props_disabledMenus_props_leftAreaVisible_props_leftAreaTitle_props_leftAreaReverse_props_leftAreaWidth_props_mode_props_toolbarHeight_data_heightGetter_options_leftToolbarGroup_options_rightToolbarGroup_options_isPreviewMode_options_isEditMode_options_handleResize_options_handleToolbarWrapperResize_options_getToolbarConfig_options_handleEditorWrapperClick_options_handleToolbarItemClick_options_handleToolbarMenuClick_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              var _component_editor_toolbar = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("editor-toolbar");
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                "div",
                {
                  class: ["v-md-editor", ["v-md-editor--" + $props.mode, {
                    "v-md-editor--fullscreen": $props.fullscreen,
                    "v-md-editor--left-area-reverse": $props.leftAreaReverse
                  }]],
                  style: {
                    height: $options.heightGetter
                  }
                },
                [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  {
                    class: "v-md-editor__left-area",
                    style: {
                      width: $props.leftAreaVisible ? $props.leftAreaWidth : 0,
                      borderWidth: $props.leftAreaVisible ? "1px" : 0
                    }
                  },
                  [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                    "div",
                    {
                      class: "v-md-editor__left-area-title",
                      style: {
                        height: $data.toolbarHeight + "px",
                        lineHeight: $data.toolbarHeight + "px"
                      }
                    },
                    Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])($props.leftAreaTitle),
                    5
                    /* TEXT, STYLE */
                  ), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", _hoisted_1, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, "left-area")])],
                  4
                  /* STYLE */
                ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], !$options.isPreviewMode]]), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", _hoisted_2, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  _hoisted_3,
                  [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                    _component_editor_toolbar,
                    {
                      class: "v-md-editor__toolbar-left",
                      groups: $options.leftToolbarGroup,
                      toolbars: $props.toolbars,
                      "disabled-menus": $props.disabledMenus,
                      onItemClick: $options.handleToolbarItemClick,
                      onToolbarMenuClick: $options.handleToolbarMenuClick
                    },
                    null,
                    8,
                    ["groups", "toolbars", "disabled-menus", "onItemClick", "onToolbarMenuClick"]
                  ), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                    _component_editor_toolbar,
                    {
                      class: "v-md-editor__toolbar-right",
                      groups: $options.rightToolbarGroup,
                      toolbars: $props.toolbars,
                      "disabled-mens": $props.disabledMenus,
                      onItemClick: $options.handleToolbarItemClick,
                      onToolbarMenuClick: $options.handleToolbarMenuClick
                    },
                    null,
                    8,
                    ["groups", "toolbars", "disabled-mens", "onItemClick", "onToolbarMenuClick"]
                  )],
                  512
                  /* NEED_PATCH */
                ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], !$options.isPreviewMode]]), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", _hoisted_4, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  {
                    ref: "editorWrapper",
                    class: "v-md-editor__editor-wrapper",
                    onClick: _cache[1] || (_cache[1] = function() {
                      return $options.handleEditorWrapperClick.apply($options, arguments);
                    })
                  },
                  [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, "editor")],
                  512
                  /* NEED_PATCH */
                ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], !$options.isPreviewMode]]), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  _hoisted_5,
                  [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, "preview")],
                  512
                  /* NEED_PATCH */
                ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], !$options.isEditMode]]), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, "default")])])],
                6
                /* CLASS, STYLE */
              );
            }
            var toolbarvue_type_template_id_50c68f6d_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_hoisted_1 = {
              key: 0
            };
            var toolbarvue_type_template_id_50c68f6d_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_hoisted_2 = {
              key: 0,
              class: "v-md-editor__toolbar-divider"
            };
            function toolbarvue_type_template_id_50c68f6d_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              var _component_toolbar_item = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("toolbar-item");
              return $props.groups.length ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("ul", toolbarvue_type_template_id_50c68f6d_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_hoisted_1, [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                null,
                Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($props.groups, function(group, idx) {
                  return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                    external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                    null,
                    [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                      external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                      null,
                      Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])(group, function(toolbarName) {
                        return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                          _component_toolbar_item,
                          {
                            key: toolbarName,
                            name: toolbarName,
                            title: $options.getConfig(toolbarName, "title"),
                            icon: $options.getConfig(toolbarName, "icon"),
                            text: $options.getConfig(toolbarName, "text"),
                            active: $options.getConfig(toolbarName, "active"),
                            menus: $options.getConfig(toolbarName, "menus"),
                            "disabled-menus": $props.disabledMenus,
                            onClick: function onClick($event) {
                              return _ctx.$emit("item-click", $props.toolbars[toolbarName]);
                            },
                            onMenuClick: _cache[1] || (_cache[1] = function($event) {
                              return _ctx.$emit("toolbar-menu-click", $event);
                            })
                          },
                          null,
                          8,
                          ["name", "title", "icon", "text", "active", "menus", "disabled-menus", "onClick"]
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    )), idx !== $props.groups.length - 1 ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("li", toolbarvue_type_template_id_50c68f6d_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_hoisted_2)) : Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createCommentVNode"])("v-if", true)],
                    64
                    /* STABLE_FRAGMENT */
                  );
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))])) : Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createCommentVNode"])("v-if", true);
            }
            var toolbar_itemvue_type_template_id_30f6176d_bindings_name_props_title_props_active_props_text_props_icon_props_menus_props_disabledMenus_props_menuActive_data_hasMenu_options_menuItems_options_menuMode_options_hideMenu_options_showMenu_options_handleClick_options_showTooltip_options_handleHideTooltip_options_hoisted_1 = {
              key: 1,
              class: "v-md-icon-arrow-down v-md-editor__menu-ctrl",
              ref: "menuCtrl"
            };
            function toolbar_itemvue_type_template_id_30f6176d_bindings_name_props_title_props_active_props_text_props_icon_props_menus_props_disabledMenus_props_menuActive_data_hasMenu_options_menuItems_options_menuMode_options_hideMenu_options_showMenu_options_handleClick_options_showTooltip_options_handleHideTooltip_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              var _component_v_md_tooltip = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-tooltip");
              var _component_v_md_menu = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-menu");
              var _directive_clickoutside = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveDirective"])("clickoutside");
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])((Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                "li",
                {
                  class: ["v-md-editor__toolbar-item", [$props.icon, "v-md-editor__toolbar-item-" + $props.name, {
                    "v-md-editor__toolbar-item--active": $props.active || $data.menuActive
                  }, {
                    "v-md-editor__toolbar-item--menu": $options.hasMenu
                  }]],
                  onMousedown: _cache[3] || (_cache[3] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                  }, ["prevent"])),
                  onMouseleave: _cache[4] || (_cache[4] = function() {
                    return $options.handleHideTooltip.apply($options, arguments);
                  }),
                  onMousemove: _cache[5] || (_cache[5] = function() {
                    return $options.showTooltip.apply($options, arguments);
                  }),
                  onClick: _cache[6] || (_cache[6] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.handleClick.apply($options, arguments);
                  }, ["stop"]))
                },
                [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createTextVNode"])(
                  Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])($props.text) + " ",
                  1
                  /* TEXT */
                ), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  _component_v_md_tooltip,
                  {
                    ref: "tooltip",
                    text: $props.title
                  },
                  null,
                  8,
                  ["text"]
                ), $options.hasMenu ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                  _component_v_md_menu,
                  {
                    key: 0,
                    ref: "menu",
                    mode: $options.menuMode,
                    menus: $options.menuItems,
                    "item-width": $props.menus.itemWidth,
                    "row-num": $props.menus.rowNum,
                    visible: $data.menuActive,
                    "onUpdate:visible": _cache[1] || (_cache[1] = function($event) {
                      return $data.menuActive = $event;
                    }),
                    onItemClick: _cache[2] || (_cache[2] = function($event) {
                      return _ctx.$emit("menu-click", $event);
                    })
                  },
                  null,
                  8,
                  ["mode", "menus", "item-width", "row-num", "visible"]
                )) : Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createCommentVNode"])("v-if", true), $options.hasMenu ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                  "i",
                  toolbar_itemvue_type_template_id_30f6176d_bindings_name_props_title_props_active_props_text_props_icon_props_menus_props_disabledMenus_props_menuActive_data_hasMenu_options_menuItems_options_menuMode_options_hideMenu_options_showMenu_options_handleClick_options_showTooltip_options_handleHideTooltip_options_hoisted_1,
                  null,
                  512
                  /* NEED_PATCH */
                )) : Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createCommentVNode"])("v-if", true)],
                34
                /* CLASS, HYDRATE_EVENTS */
              )), [[_directive_clickoutside, $options.hideMenu, "hideMenu"]]);
            }
            function tooltipvue_type_template_id_047bb94e_bindings_text_props_position_data_visible_data_show_options_hide_options_calculateLayout_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Transition"], {
                name: "v-md-fade-in"
              }, {
                default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                  return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                    "div",
                    {
                      style: {
                        left: $data.position.x + "px",
                        top: $data.position.y + "px"
                      },
                      class: "v-md-editor__tooltip"
                    },
                    Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])($props.text),
                    5
                    /* TEXT, STYLE */
                  ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], $data.visible]])];
                }),
                _: 1
              });
            }
            var tooltipvue_type_script_lang_js = {
              name: "v-md-tooltip",
              props: {
                text: String
              },
              data: function data() {
                return {
                  position: {
                    x: 0,
                    y: 0
                  },
                  visible: false
                };
              },
              methods: {
                show: function show(position) {
                  this.position = {
                    x: position.x,
                    y: position.y
                  };
                  this.visible = true;
                  this.$nextTick(this.calculateLayout);
                },
                hide: function hide() {
                  this.visible = false;
                },
                calculateLayout: function calculateLayout() {
                  var _this$$el$getBounding = this.$el.getBoundingClientRect(), right = _this$$el$getBounding.right;
                  var windowWidth = document.documentElement.clientWidth;
                  if (windowWidth - right < 0) {
                    this.position.x -= right - windowWidth;
                  }
                }
              }
            };
            var tooltipvue_type_style_index_0_lang_scss = __webpack_require__(82);
            tooltipvue_type_script_lang_js.render = tooltipvue_type_template_id_047bb94e_bindings_text_props_position_data_visible_data_show_options_hide_options_calculateLayout_options_render;
            var tooltip = tooltipvue_type_script_lang_js;
            var menuvue_type_template_id_57354868_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_hoisted_1 = {
              key: 1
            };
            var menuvue_type_template_id_57354868_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_hoisted_2 = {
              class: "v-md-editor__menu-row"
            };
            function menuvue_type_template_id_57354868_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              var _component_v_md_render = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-render");
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Transition"], {
                name: "v-md-zoom-in-top"
              }, {
                default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                  return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                    "ul",
                    {
                      class: ["v-md-editor__menu", ["v-md-editor__menu--" + $props.mode]],
                      style: $data.style,
                      onMousemove: _cache[1] || (_cache[1] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                      }, ["stop"])),
                      onClick: _cache[2] || (_cache[2] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                      }, ["stop"]))
                    },
                    [$options.isListMode ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                      external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                      {
                        key: 0
                      },
                      Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($props.menus, function(item) {
                        return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                          "li",
                          {
                            key: item.name,
                            class: ["v-md-editor__menu-item", ["v-md-editor__menu-item-" + item.name, item.class]],
                            onClick: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function($event) {
                              return $options.handleClick(item);
                            }, ["stop"])
                          },
                          [item.render ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                            _component_v_md_render,
                            {
                              key: 0,
                              render: item.render,
                              editor: _ctx.$self
                            },
                            null,
                            8,
                            ["render", "editor"]
                          )) : (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                            external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                            {
                              key: 1
                            },
                            [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createTextVNode"])(
                              Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])($options.getText(item.text)),
                              1
                              /* TEXT */
                            )],
                            64
                            /* STABLE_FRAGMENT */
                          ))],
                          10,
                          ["onClick"]
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    )) : (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("li", menuvue_type_template_id_57354868_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_hoisted_1, [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                      external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                      null,
                      Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($options.rowCount, function(rowIndex) {
                        return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("div", menuvue_type_template_id_57354868_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_hoisted_2, [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                          external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                          null,
                          Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($options.getRowMenus(rowIndex), function(item) {
                            return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                              "span",
                              {
                                key: item.name,
                                style: {
                                  width: $props.itemWidth
                                },
                                class: ["v-md-editor__menu-item", ["v-md-editor__menu-item-" + item.name, item.class]],
                                onClick: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function($event) {
                                  return $options.handleClick(item);
                                }, ["stop"])
                              },
                              Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])(item.text),
                              15,
                              ["onClick"]
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))]);
                      }),
                      256
                      /* UNKEYED_FRAGMENT */
                    ))]))],
                    38
                    /* CLASS, STYLE, HYDRATE_EVENTS */
                  ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], $props.visible]])];
                }),
                _: 1
              });
            }
            var renderFn = function renderFn2(props, _ref) {
              var data = _ref.data;
              return props.render.apply(props, data.$attrs);
            };
            renderFn.props = ["render"];
            var components_render = renderFn;
            var menu_mode = {
              LIST: "list",
              PANEL: "panel"
            };
            var menuvue_type_script_lang_js = {
              name: "v-md-menu",
              components: {
                VMdRender: components_render
              },
              inject: ["markdownEditor"],
              props: {
                mode: {
                  type: String,
                  default: menu_mode.PANEL
                },
                menus: Array,
                itemWidth: {
                  type: String,
                  default: "30px"
                },
                rowNum: {
                  type: Number,
                  default: 10
                },
                visible: Boolean
              },
              emits: ["update:visible", "item-click"],
              data: function data() {
                return {
                  style: {
                    left: 0
                  }
                };
              },
              computed: {
                rowCount: function rowCount() {
                  return Math.ceil(this.menus.length / this.rowNum);
                },
                isListMode: function isListMode() {
                  return this.mode === menu_mode.LIST;
                }
              },
              watch: {
                visible: function visible() {
                  if (this.visible)
                    this.$nextTick(this.calculateLayout);
                }
              },
              methods: {
                calculateLayout: function calculateLayout() {
                  var _this$$el$getBounding = this.$el.getBoundingClientRect(), right = _this$$el$getBounding.right;
                  var windowWidth = document.documentElement.clientWidth;
                  if (windowWidth - right < 0)
                    this.style = {
                      right: 0
                    };
                },
                getRowMenus: function getRowMenus(rowIndex) {
                  var end = rowIndex * this.rowNum;
                  var start = end - this.rowNum;
                  return this.menus.slice(start, end);
                },
                getText: function getText(text) {
                  if (typeof text === "function") {
                    return text(this.markdownEditor);
                  }
                  return text;
                },
                hide: function hide() {
                  this.$emit("update:visible", false);
                },
                handleClick: function handleClick(item) {
                  this.$emit("item-click", item);
                  this.hide();
                }
              }
            };
            var menuvue_type_style_index_0_lang_scss = __webpack_require__(83);
            menuvue_type_script_lang_js.render = menuvue_type_template_id_57354868_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_render;
            var menu = menuvue_type_script_lang_js;
            var nodeList = [];
            var ctx = "@@clickoutsideContext";
            var startClick;
            var seed = 0;
            if (util[
              "d"
              /* inBrowser */
            ]) {
              document.addEventListener("mousedown", function(e) {
                startClick = e;
              });
              document.addEventListener("mouseup", function(e) {
                nodeList.forEach(function(node) {
                  return node[ctx].documentHandler(e, startClick);
                });
              });
            }
            function createDocumentHandler(el, binding, vnode) {
              return function(mouseup, mousedown) {
                if (mouseup === void 0) {
                  mouseup = {};
                }
                if (mousedown === void 0) {
                  mousedown = {};
                }
                if (!vnode || !binding || !binding.instance || !mouseup.target || !mousedown.target || el.contains(mouseup.target) || el.contains(mousedown.target) || el === mouseup.target) {
                  return;
                }
                if (binding.arg && el[ctx].methodName && binding.instance[el[ctx].methodName]) {
                  binding.instance[el[ctx].methodName]();
                } else {
                  el[ctx].bindingFn && el[ctx].bindingFn();
                }
              };
            }
            var clickoutside = {
              beforeMount: function beforeMount(el, binding, vnode) {
                nodeList.push(el);
                var id = seed++;
                el[ctx] = {
                  id,
                  documentHandler: createDocumentHandler(el, binding, vnode),
                  methodName: binding.arg,
                  bindingFn: binding.value
                };
              },
              updated: function updated(el, binding, vnode) {
                el[ctx].documentHandler = createDocumentHandler(el, binding, vnode);
                el[ctx].methodName = binding.arg;
                el[ctx].bindingFn = binding.value;
              },
              unmounted: function unmounted(el) {
                var len = nodeList.length;
                for (var i = 0; i < len; i++) {
                  if (nodeList[i][ctx].id === el[ctx].id) {
                    nodeList.splice(i, 1);
                    break;
                  }
                }
                delete el[ctx];
              }
            };
            var _components;
            var toolbar_itemvue_type_script_lang_js = {
              name: "toolbar-item",
              directives: {
                Clickoutside: clickoutside
              },
              components: (_components = {}, _components[tooltip.name] = tooltip, _components[menu.name] = menu, _components),
              props: {
                name: String,
                title: String,
                active: Boolean,
                text: String,
                icon: String,
                menus: [Array, Object],
                disabledMenus: Array
              },
              emits: ["click", "menu-click"],
              data: function data() {
                return {
                  menuActive: false
                };
              },
              computed: {
                hasMenu: function hasMenu() {
                  var _this$menuItems;
                  return (_this$menuItems = this.menuItems) == null ? void 0 : _this$menuItems.length;
                },
                menuItems: function menuItems() {
                  var _this = this;
                  var menus = Object(util[
                    "f"
                    /* isObject */
                  ])(this.menus) ? this.menus.items : this.menus;
                  return menus == null ? void 0 : menus.filter(function(_ref) {
                    var _this$disabledMenus;
                    var menuName = _ref.name;
                    return !((_this$disabledMenus = _this.disabledMenus) == null ? void 0 : _this$disabledMenus.includes(_this.name + "/" + menuName));
                  });
                },
                menuMode: function menuMode() {
                  return Object(util[
                    "f"
                    /* isObject */
                  ])(this.menus) ? this.menus.mode : menu_mode.LIST;
                }
              },
              methods: {
                hideMenu: function hideMenu() {
                  if (this.hasMenu) {
                    this.menuActive = false;
                  }
                },
                showMenu: function showMenu() {
                  if (this.hasMenu) {
                    this.menuActive = true;
                  }
                },
                handleClick: function handleClick(e) {
                  this.$emit("click");
                  this.menuActive ? this.hideMenu() : this.showMenu();
                  if (this.hasMenu) {
                    this.handleHideTooltip();
                  } else {
                    this.showTooltip(e);
                  }
                },
                showTooltip: function showTooltip(e) {
                  var _this2 = this;
                  var selfEl = this.$el;
                  var target = e.target;
                  var menuCtrl = this.$refs.menuCtrl;
                  if (target !== selfEl && target !== menuCtrl || this.menuActive) {
                    this.handleHideTooltip();
                    return;
                  }
                  if (this.timmer)
                    clearTimeout(this.timmer);
                  var selfElRect = selfEl.getBoundingClientRect();
                  var x = e.clientX - selfElRect.left;
                  var y = e.clientY - selfElRect.top;
                  this.timmer = setTimeout(function() {
                    var _this2$$refs$tooltip;
                    (_this2$$refs$tooltip = _this2.$refs.tooltip) == null ? void 0 : _this2$$refs$tooltip.show({
                      x: x - 2,
                      y: y + 20
                    });
                  }, 100);
                },
                handleHideTooltip: function handleHideTooltip() {
                  if (this.timmer)
                    clearTimeout(this.timmer);
                  this.$refs.tooltip.hide();
                }
              }
            };
            var toolbar_itemvue_type_style_index_0_lang_scss = __webpack_require__(84);
            toolbar_itemvue_type_script_lang_js.render = toolbar_itemvue_type_template_id_30f6176d_bindings_name_props_title_props_active_props_text_props_icon_props_menus_props_disabledMenus_props_menuActive_data_hasMenu_options_menuItems_options_menuMode_options_hideMenu_options_showMenu_options_handleClick_options_showTooltip_options_handleHideTooltip_options_render;
            var toolbar_item = toolbar_itemvue_type_script_lang_js;
            var toolbarvue_type_script_lang_js_components;
            var toolbarvue_type_script_lang_js = {
              name: "editor-toolbar",
              components: (toolbarvue_type_script_lang_js_components = {}, toolbarvue_type_script_lang_js_components[toolbar_item.name] = toolbar_item, toolbarvue_type_script_lang_js_components),
              inject: ["markdownEditor"],
              props: {
                groups: Array,
                toolbars: Object,
                disabledMenus: Array
              },
              emits: ["item-click", "toolbar-menu-click"],
              methods: {
                getConfig: function getConfig(toolbarName, configName) {
                  var toolbarConfig = this.toolbars[toolbarName];
                  var value = toolbarConfig[configName];
                  return typeof value === "function" ? value(this.markdownEditor) : value;
                }
              }
            };
            var toolbarvue_type_style_index_0_lang_scss = __webpack_require__(85);
            toolbarvue_type_script_lang_js.render = toolbarvue_type_template_id_50c68f6d_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_render;
            var toolbar = toolbarvue_type_script_lang_js;
            var ResizeObserver_es = __webpack_require__(34);
            var isServer = typeof window === "undefined";
            var resizeHandler = function resizeHandler2(entries) {
              entries.forEach(function(entry) {
                var listeners = entry.target.__resizeListeners__ || [];
                if (listeners.length) {
                  listeners.forEach(function(fn) {
                    fn();
                  });
                }
              });
            };
            var resize_event_addResizeListener = function addResizeListener(element, fn) {
              if (isServer)
                return;
              if (!element.__resizeListeners__) {
                element.__resizeListeners__ = [];
                element.__ro__ = new ResizeObserver_es[
                  "a"
                  /* default */
                ](resizeHandler);
                element.__ro__.observe(element);
              }
              element.__resizeListeners__.push(fn);
            };
            var removeResizeListener = function removeResizeListener2(element, fn) {
              if (!element || !element.__resizeListeners__)
                return;
              element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
              if (!element.__resizeListeners__.length) {
                element.__ro__.disconnect();
              }
            };
            var editor_mode = __webpack_require__(4);
            var containervue_type_script_lang_js_components;
            var containervue_type_script_lang_js = {
              name: "v-md-container",
              components: (containervue_type_script_lang_js_components = {}, containervue_type_script_lang_js_components[toolbar.name] = toolbar, containervue_type_script_lang_js_components),
              props: {
                leftToolbar: String,
                rightToolbar: String,
                toolbars: Object,
                fullscreen: Boolean,
                height: String,
                noresize: Boolean,
                disabledMenus: Array,
                leftAreaVisible: Boolean,
                leftAreaTitle: String,
                leftAreaReverse: Boolean,
                leftAreaWidth: {
                  type: String,
                  default: "200px"
                },
                mode: {
                  type: String,
                  default: editor_mode[
                    "a"
                    /* default */
                  ].EDITABLE
                }
              },
              emits: ["resize", "editor-wrapper-click", "toolbar-item-click", "toolbar-menu-click"],
              data: function data() {
                return {
                  toolbarHeight: 0
                };
              },
              computed: {
                heightGetter: function heightGetter() {
                  return this.fullscreen ? "auto" : this.height;
                },
                leftToolbarGroup: function leftToolbarGroup() {
                  return this.getToolbarConfig(this.leftToolbar);
                },
                rightToolbarGroup: function rightToolbarGroup() {
                  return this.getToolbarConfig(this.rightToolbar);
                },
                isPreviewMode: function isPreviewMode() {
                  return this.mode === editor_mode[
                    "a"
                    /* default */
                  ].PREVIEW;
                },
                isEditMode: function isEditMode() {
                  return this.mode === editor_mode[
                    "a"
                    /* default */
                  ].EDIT;
                }
              },
              mounted: function mounted() {
                if (!this.noresize) {
                  resize_event_addResizeListener(this.$refs.editorWrapper, this.handleResize);
                  resize_event_addResizeListener(this.$refs.toolbarWrapper, this.handleToolbarWrapperResize);
                }
              },
              beforeUnmount: function beforeUnmount() {
                if (!this.noresize) {
                  removeResizeListener(this.$refs.editorWrapper, this.handleResize);
                  removeResizeListener(this.$refs.toolbarWrapper, this.handleToolbarWrapperResize);
                }
              },
              methods: {
                handleResize: function handleResize() {
                  this.$emit("resize");
                },
                handleToolbarWrapperResize: function handleToolbarWrapperResize() {
                  var toolbarWrapper2 = this.$refs.toolbarWrapper;
                  if (toolbarWrapper2)
                    this.toolbarHeight = toolbarWrapper2.offsetHeight;
                },
                getToolbarConfig: function getToolbarConfig(toolbarStr) {
                  var _this = this;
                  return toolbarStr.split("|").map(function(group) {
                    return group.split(" ").filter(function(toolbarName) {
                      return toolbarName && _this.toolbars[toolbarName];
                    });
                  });
                },
                handleEditorWrapperClick: function handleEditorWrapperClick(e) {
                  this.$emit("editor-wrapper-click", e);
                },
                handleToolbarItemClick: function handleToolbarItemClick(toolbar2) {
                  this.$emit("toolbar-item-click", toolbar2);
                },
                handleToolbarMenuClick: function handleToolbarMenuClick(menu2) {
                  this.$emit("toolbar-menu-click", menu2);
                }
              }
            };
            var containervue_type_style_index_0_lang_scss = __webpack_require__(87);
            containervue_type_script_lang_js.render = containervue_type_template_id_e6b02356_bindings_leftToolbar_props_rightToolbar_props_toolbars_props_fullscreen_props_height_props_noresize_props_disabledMenus_props_leftAreaVisible_props_leftAreaTitle_props_leftAreaReverse_props_leftAreaWidth_props_mode_props_toolbarHeight_data_heightGetter_options_leftToolbarGroup_options_rightToolbarGroup_options_isPreviewMode_options_isEditMode_options_handleResize_options_handleToolbarWrapperResize_options_getToolbarConfig_options_handleEditorWrapperClick_options_handleToolbarItemClick_options_handleToolbarMenuClick_options_render;
            var container = containervue_type_script_lang_js;
            var scrollBarWidth;
            var scrollbar_width_isServer = typeof window === "undefined";
            var scrollbar_width = function() {
              if (scrollbar_width_isServer)
                return 0;
              if (scrollBarWidth !== void 0)
                return scrollBarWidth;
              var outer = document.createElement("div");
              outer.className = "scrollbar__wrap";
              outer.style.visibility = "hidden";
              outer.style.width = "100px";
              outer.style.position = "absolute";
              outer.style.top = "-9999px";
              document.body.appendChild(outer);
              var widthNoScroll = outer.offsetWidth;
              outer.style.overflow = "scroll";
              var inner = document.createElement("div");
              inner.style.width = "100%";
              outer.appendChild(inner);
              var widthWithScroll = inner.offsetWidth;
              outer.parentNode.removeChild(outer);
              scrollBarWidth = widthNoScroll - widthWithScroll;
              return scrollBarWidth;
            };
            var BAR_MAP = {
              vertical: {
                offset: "offsetHeight",
                scroll: "scrollTop",
                scrollSize: "scrollHeight",
                size: "height",
                key: "vertical",
                axis: "Y",
                client: "clientY",
                direction: "top"
              },
              horizontal: {
                offset: "offsetWidth",
                scroll: "scrollLeft",
                scrollSize: "scrollWidth",
                size: "width",
                key: "horizontal",
                axis: "X",
                client: "clientX",
                direction: "left"
              }
            };
            function renderThumbStyle(_ref) {
              var move = _ref.move, size = _ref.size, bar = _ref.bar;
              var style = {};
              var translate = "translate" + bar.axis + "(" + move + "%)";
              style[bar.size] = size;
              style.transform = translate;
              style.msTransform = translate;
              style.webkitTransform = translate;
              return style;
            }
            var scrollbar_bar = {
              name: "Bar",
              props: {
                vertical: Boolean,
                size: String,
                move: Number
              },
              computed: {
                bar: function bar() {
                  return BAR_MAP[this.vertical ? "vertical" : "horizontal"];
                },
                wrap: function wrap() {
                  return this.$parent.wrap;
                }
              },
              render: function render() {
                var size = this.size, move = this.move, bar = this.bar;
                return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", {
                  "class": ["scrollbar__bar", "is-" + bar.key],
                  "onMousedown": this.clickTrackHandler,
                  "onClick": function onClick(e) {
                    return e.stopPropagation();
                  }
                }, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", {
                  "ref": "thumb",
                  "class": "scrollbar__thumb",
                  "onMousedown": this.clickThumbHandler,
                  "style": renderThumbStyle({
                    size,
                    move,
                    bar
                  })
                }, null)]);
              },
              methods: {
                clickThumbHandler: function clickThumbHandler(e) {
                  if (e.ctrlKey || e.button === 2) {
                    return;
                  }
                  this.startDrag(e);
                  this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);
                },
                clickTrackHandler: function clickTrackHandler(e) {
                  var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);
                  var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;
                  var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];
                  this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
                },
                startDrag: function startDrag(e) {
                  e.stopImmediatePropagation();
                  this.cursorDown = true;
                  document.addEventListener("mousemove", this.mouseMoveDocumentHandler, false);
                  document.addEventListener("mouseup", this.mouseUpDocumentHandler, false);
                  document.onselectstart = function() {
                    return false;
                  };
                },
                mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {
                  if (this.cursorDown === false)
                    return;
                  var prevPage = this[this.bar.axis];
                  if (!prevPage)
                    return;
                  var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;
                  var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage;
                  var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];
                  this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
                },
                mouseUpDocumentHandler: function mouseUpDocumentHandler() {
                  this.cursorDown = false;
                  this[this.bar.axis] = 0;
                  document.removeEventListener("mousemove", this.mouseMoveDocumentHandler, false);
                  document.onselectstart = null;
                }
              },
              unmounted: function unmounted() {
                document.removeEventListener("mouseup", this.mouseUpDocumentHandler, false);
              }
            };
            var smooth_scroll = __webpack_require__(8);
            var scrollbarvue_type_script_lang_js = {
              name: "scrollbar",
              components: {
                Bar: scrollbar_bar
              },
              props: {
                native: Boolean,
                disabled: Boolean,
                wrapStyle: null,
                wrapClass: null,
                viewClass: null,
                viewStyle: null,
                noresize: Boolean,
                // 如果 container 尺寸不会发生变化，最好设置它可以优化性能
                tag: {
                  type: String,
                  default: "div"
                }
              },
              emits: ["scroll"],
              data: function data() {
                return {
                  sizeWidth: "0",
                  sizeHeight: "0",
                  moveX: 0,
                  moveY: 0
                };
              },
              computed: {
                wrap: function wrap() {
                  return this.$refs.wrap;
                }
              },
              mounted: function mounted() {
                if (this.native || this.disabled)
                  return;
                this.$nextTick(this.update);
                !this.noresize && resize_event_addResizeListener(this.$refs.resize, this.update);
              },
              beforeUnmount: function beforeUnmount() {
                if (this.native || this.disabled)
                  return;
                !this.noresize && removeResizeListener(this.$refs.resize, this.update);
              },
              methods: {
                getScrollInfo: function getScrollInfo() {
                  var wrap = this.wrap;
                  return {
                    left: wrap.scrollLeft,
                    top: wrap.scrollTop,
                    width: wrap.scrollWidth,
                    height: wrap.scrollHeight,
                    clientWidth: wrap.clientWidth,
                    clientHeight: wrap.clientHeight
                  };
                },
                scrollTo: function scrollTo(scrollTop) {
                  Object(smooth_scroll[
                    "a"
                    /* default */
                  ])({
                    scrollTarget: this.wrap,
                    scrollToTop: scrollTop
                  });
                },
                handleScroll: function handleScroll() {
                  var wrap = this.wrap;
                  this.moveY = wrap.scrollTop * 100 / wrap.clientHeight;
                  this.moveX = wrap.scrollLeft * 100 / wrap.clientWidth;
                  this.$emit("scroll");
                },
                update: function update() {
                  var wrap = this.wrap;
                  if (!wrap)
                    return;
                  var heightPercentage = wrap.clientHeight * 100 / wrap.scrollHeight;
                  var widthPercentage = wrap.clientWidth * 100 / wrap.scrollWidth;
                  this.sizeHeight = heightPercentage < 100 ? heightPercentage + "%" : "";
                  this.sizeWidth = widthPercentage < 100 ? widthPercentage + "%" : "";
                }
              },
              render: function render() {
                if (this.disabled)
                  return this.$slots.default();
                var gutter = scrollbar_width();
                var style = this.wrapStyle;
                if (gutter) {
                  var scrollView = this.$refs.resize;
                  var wrapper = this.$refs.wrap;
                  var scrollViewHeight = scrollView == null ? void 0 : scrollView.scrollHeight;
                  var scrollViewWidth = scrollView == null ? void 0 : scrollView.scrollWidth;
                  var wrapperHeight = wrapper == null ? void 0 : wrapper.clientHeight;
                  var wrapperWidth = wrapper == null ? void 0 : wrapper.clientWidth;
                  var gutterWith = "-" + gutter + "px";
                  var marginBottom = scrollViewWidth > wrapperWidth ? gutterWith : 0;
                  var marginRight = scrollViewHeight > wrapperHeight ? gutterWith : 0;
                  var gutterStyle = "margin-bottom: " + marginBottom + "; margin-right: " + marginRight + ";";
                  if (Array.isArray(this.wrapStyle)) {
                    style = Object(util[
                      "a"
                      /* arraytoObject */
                    ])(this.wrapStyle);
                    style.marginRight = gutterWith;
                    style.marginBottom = gutterWith;
                  } else if (typeof this.wrapStyle === "string") {
                    style += gutterStyle;
                  } else {
                    style = gutterStyle;
                  }
                }
                var view = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["h"])(this.tag, {
                  class: ["scrollbar__view", this.viewClass],
                  style: this.viewStyle,
                  ref: "resize"
                }, this.$slots.default());
                var wrap = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", {
                  "ref": "wrap",
                  "style": style,
                  "onScroll": this.handleScroll,
                  "class": [this.wrapClass, "scrollbar__wrap", gutter ? "" : "scrollbar__wrap--hidden-default"]
                }, [[view]]);
                var nodes;
                if (!this.native) {
                  nodes = [wrap, Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(scrollbar_bar, {
                    "move": this.moveX,
                    "size": this.sizeWidth
                  }, null), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(scrollbar_bar, {
                    "vertical": true,
                    "move": this.moveY,
                    "size": this.sizeHeight
                  }, null)];
                } else {
                  nodes = [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", {
                    "ref": "wrap",
                    "class": [this.wrapClass, "scrollbar__wrap"],
                    "style": style
                  }, [[view]])];
                }
                return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["h"])("div", {
                  class: "scrollbar"
                }, nodes);
              }
            };
            var scrollbarvue_type_style_index_0_lang_scss = __webpack_require__(88);
            var scrollbar = scrollbarvue_type_script_lang_js;
            var toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_hoisted_1 = {
              class: "v-md-editor__toc-nav"
            };
            var toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_hoisted_2 = {
              class: "v-md-editor__toc-nav-title"
            };
            function toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_render(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("ul", toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_hoisted_1, [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                null,
                Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($props.titles, function(item) {
                  return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                    "li",
                    {
                      style: {
                        paddingLeft: $props.indent * item.indent + "px"
                      },
                      onClick: function onClick($event) {
                        return _ctx.$emit("nav-click", item);
                      },
                      class: "v-md-editor__toc-nav-item"
                    },
                    [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                      "span",
                      toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_hoisted_2,
                      Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])(item.title),
                      1
                      /* TEXT */
                    )],
                    12,
                    ["onClick"]
                  );
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))]);
            }
            var toc_navvue_type_script_lang_js = {
              name: "toc-nav",
              props: {
                titles: Array,
                indent: {
                  type: Number,
                  default: 16
                }
              },
              emits: ["nav-click"]
            };
            var toc_navvue_type_style_index_0_lang_scss = __webpack_require__(89);
            toc_navvue_type_script_lang_js.render = toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_render;
            var toc_nav = toc_navvue_type_script_lang_js;
            var common_components;
            var common = {
              inheritAttrs: false,
              components: (common_components = {}, common_components[preview["default"].name] = preview["default"], common_components[container.name] = container, common_components[scrollbar.name] = scrollbar, common_components[toc_nav.name] = toc_nav, common_components),
              provide: function provide() {
                return {
                  markdownEditor: this
                };
              },
              props: {
                height: String,
                theme: Object,
                mode: {
                  type: String,
                  default: editor_mode[
                    "a"
                    /* default */
                  ].EDITABLE
                },
                autofocus: Boolean,
                placeholder: String,
                tocNavPositionRight: Boolean,
                tabSize: {
                  type: Number,
                  default: 2
                },
                beforePreviewChange: {
                  type: Function,
                  default: function _default(text, next) {
                    next(text);
                  }
                }
              },
              emits: ["blur", "change", "save", "image-click"],
              data: function data() {
                return {
                  currentMode: this.mode,
                  uploadConfig: {}
                };
              },
              watch: {
                mode: function mode() {
                  this.currentMode = this.mode;
                },
                currentMode: function currentMode() {
                  if (this.currentMode === editor_mode[
                    "a"
                    /* default */
                  ].EDITABLE && this.enableSyncScroll) {
                    this.$nextTick(this.previewSyncScroll);
                  }
                }
              },
              created: function created() {
                if (this.theme)
                  this.$options.use(this.theme);
              },
              computed: {
                isPreviewMode: function isPreviewMode() {
                  return this.currentMode === editor_mode[
                    "a"
                    /* default */
                  ].PREVIEW;
                },
                isEditMode: function isEditMode() {
                  return this.currentMode === editor_mode[
                    "a"
                    /* default */
                  ].EDIT;
                }
              },
              mounted: function mounted() {
                if (this.autofocus) {
                  this.$nextTick(this.setFocusEnd);
                }
              },
              methods: {
                setFocusEnd: function setFocusEnd() {
                  this.editorFocusEnd();
                  this.editorScrollToTop(9999);
                  this.previewScrollTo(9999);
                },
                // change event
                handleChange: function handleChange(text, html) {
                  this.$emit("change", text, html);
                },
                handleBlur: function handleBlur(e) {
                  this.$emit("blur", e);
                },
                handlePreviewImageClick: function handlePreviewImageClick(images, currentIndex) {
                  this.$emit("image-click", images, currentIndex);
                },
                save: function save() {
                  this.$emit("save", this.text, this.$refs.preview.html);
                },
                insert: function insert(getInsertContent) {
                  var _this = this;
                  this.focus();
                  var currentSelectedStr = this.getCurrentSelectedStr();
                  var _getInsertContent = getInsertContent(currentSelectedStr), selected = _getInsertContent.selected, text = _getInsertContent.text;
                  this.replaceSelectionText(text);
                  this.$nextTick(function() {
                    _this.changeSelctionTo(text, selected);
                  });
                }
              }
            };
            var v_model = {
              props: {
                modelValue: {
                  type: String,
                  default: ""
                }
              },
              emits: ["update:modelValue"],
              data: function data() {
                return {
                  text: this.modelValue
                };
              },
              methods: {
                handleInput: function handleInput(val) {
                  this.text = val;
                  this.$emit("update:modelValue", val);
                }
              }
            };
            var fullscreen = {
              props: {
                defaultFullscreen: Boolean
              },
              emits: ["fullscreen-change"],
              data: function data() {
                return {
                  fullscreen: false
                };
              },
              watch: {
                fullscreen: function fullscreen2() {
                  this.$emit("fullscreen-change", this.fullscreen);
                }
              },
              mounted: function mounted() {
                window.addEventListener("keyup", this.handleWindowKeyup, false);
                if (this.defaultFullscreen) {
                  this.toggleFullScreen();
                }
              },
              beforeUnmount: function beforeUnmount() {
                window.removeEventListener("keyup", this.handleWindowKeyup, false);
              },
              methods: {
                handleWindowKeyup: function handleWindowKeyup(e) {
                  if (e.keyCode === 27 && this.fullscreen) {
                    this.toggleFullScreen(false);
                  }
                },
                toggleFullScreen: function toggleFullScreen(fullscreen2) {
                  if (fullscreen2 === void 0) {
                    fullscreen2 = !this.fullscreen;
                  }
                  this.fullscreen = fullscreen2;
                  var _document$querySelect = document.querySelectorAll("html, body"), html = _document$querySelect[0], body = _document$querySelect[1];
                  var overflow = this.fullscreen ? "hidden" : null;
                  body.style.overflow = overflow;
                  html.style.overflow = overflow;
                }
              }
            };
            function upload_filevue_type_template_id_e27464d6_bindings_uploadConfig_props_handleUpload_data_key_data_upload_options_chooseFile_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                "input",
                {
                  type: "file",
                  style: {
                    "display": "none"
                  },
                  key: $data.key,
                  accept: $props.uploadConfig.accept,
                  multiple: $props.uploadConfig.multiple,
                  onInput: _cache[1] || (_cache[1] = function() {
                    return $data.handleUpload.apply($data, arguments);
                  }),
                  ref: "fileInput"
                },
                null,
                40,
                ["accept", "multiple"]
              );
            }
            var regenerator = __webpack_require__(10);
            var regenerator_default = __webpack_require__.n(regenerator);
            var asyncToGenerator = __webpack_require__(17);
            var upload_filevue_type_script_lang_js = {
              name: "v-md-upload-file",
              props: {
                uploadConfig: Object
              },
              data: function data() {
                return {
                  handleUpload: function handleUpload() {
                  },
                  key: 0
                };
              },
              methods: {
                upload: function upload() {
                  var _this = this;
                  return Object(asyncToGenerator[
                    "a"
                    /* default */
                  ])(regenerator_default.a.mark(function _callee() {
                    var event;
                    return regenerator_default.a.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return _this.chooseFile();
                          case 2:
                            event = _context.sent;
                            return _context.abrupt("return", event);
                          case 4:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }))();
                },
                chooseFile: function chooseFile() {
                  var _this2 = this;
                  return new Promise(function(resolve) {
                    _this2.handleUpload = function(e) {
                      resolve(e);
                      _this2.key++;
                    };
                    _this2.$refs.fileInput.click();
                  });
                }
              }
            };
            upload_filevue_type_script_lang_js.render = upload_filevue_type_template_id_e27464d6_bindings_uploadConfig_props_handleUpload_data_key_data_upload_options_chooseFile_options_render;
            var upload_file = upload_filevue_type_script_lang_js;
            var toolbar_image = __webpack_require__(23);
            var file = __webpack_require__(12);
            var command = __webpack_require__(1);
            var upload_image_components;
            var defaultConfig = {
              accept: "image/*",
              multiple: false
            };
            var upload_image = {
              components: (upload_image_components = {}, upload_image_components[upload_file.name] = upload_file, upload_image_components),
              props: {
                uploadImageConfig: Object
              },
              emits: ["upload-image"],
              computed: {
                uploadImgConfig: function uploadImgConfig() {
                  return Object(esm_extends[
                    "a"
                    /* default */
                  ])({}, defaultConfig, this.uploadImageConfig);
                },
                hasUploadImage: function hasUploadImage() {
                  return !this.disabledMenus.includes(toolbar_image["default"].name + "/upload-image");
                }
              },
              methods: {
                handleDrop: function handleDrop(e) {
                  var files = Object(file[
                    "a"
                    /* filesFilter */
                  ])(e.dataTransfer.files, this.uploadImgConfig);
                  this.emitUploadImage(e, files);
                },
                handlePaste: function handlePaste(e) {
                  var clipboardData = e.clipboardData;
                  if (!clipboardData)
                    return;
                  var files = Object(file[
                    "a"
                    /* filesFilter */
                  ])(Object(file[
                    "b"
                    /* getFilesFromClipboardData */
                  ])(clipboardData), this.uploadImgConfig);
                  this.emitUploadImage(e, files);
                },
                emitUploadImage: function emitUploadImage(e, files) {
                  var _this = this;
                  if (this.hasUploadImage && files.length) {
                    e.preventDefault();
                    this.$emit("upload-image", e, function(imageConfig) {
                      _this.execCommand(command[
                        "l"
                        /* image */
                      ], imageConfig);
                    }, files);
                  }
                }
              }
            };
            var markup = __webpack_require__(3);
            var sync_scroll = {
              data: function data() {
                return {
                  enableSyncScroll: true
                };
              },
              methods: {
                toggleSyncScroll: function toggleSyncScroll(isEnable) {
                  if (isEnable === void 0) {
                    isEnable = !this.enableSyncScroll;
                  }
                  this.enableSyncScroll = isEnable;
                  if (isEnable)
                    this.previewSyncScroll();
                },
                previewSyncScroll: function previewSyncScroll() {
                  if (this.isEditMode)
                    return;
                  var previewEl = this.$refs.preview.$el;
                  var previewScrollerEl = this.$refs.previewScroller.$el;
                  var previewLines = previewEl.querySelectorAll("[" + markup[
                    "c"
                    /* LINE_MARKUP */
                  ] + "]");
                  var _this$getScrollInfo = this.getScrollInfo(), editorClientHeight = _this$getScrollInfo.clientHeight, editorScrollTop = _this$getScrollInfo.top, editorScrollHeight = _this$getScrollInfo.height;
                  var previewScrollWrapper = previewScrollerEl.querySelector(".scrollbar__wrap");
                  if (editorClientHeight + editorScrollTop === editorScrollHeight) {
                    var clientHeight = previewScrollWrapper.clientHeight;
                    var scrollHeight = previewScrollWrapper.scrollHeight;
                    this.previewScrollTo(scrollHeight - clientHeight);
                  } else {
                    var currentLine;
                    var nextLine;
                    for (var i = 0; i < previewLines.length; i++) {
                      var lineNumber = previewLines[i].getAttribute(markup[
                        "c"
                        /* LINE_MARKUP */
                      ]);
                      var height = this.heightAtLine(lineNumber - 1, "local");
                      if (height < editorScrollTop) {
                        currentLine = lineNumber;
                      } else {
                        nextLine = lineNumber;
                        break;
                      }
                    }
                    var percent = 0;
                    if (currentLine && nextLine && currentLine !== nextLine) {
                      var currentLineTop = this.heightAtLine(currentLine - 1, "local");
                      var nextLineTop = this.heightAtLine(nextLine - 1, "local");
                      percent = (editorScrollTop - currentLineTop) / (nextLineTop - currentLineTop);
                    }
                    var newLineTop = 0;
                    var newNextLineTop = previewScrollWrapper.scrollHeight - previewScrollWrapper.clientHeight;
                    if (currentLine) {
                      newLineTop = previewEl.querySelector("[" + markup[
                        "c"
                        /* LINE_MARKUP */
                      ] + '="' + currentLine + '"]').offsetTop;
                    }
                    if (nextLine) {
                      newNextLineTop = previewEl.querySelector("[" + markup[
                        "c"
                        /* LINE_MARKUP */
                      ] + '="' + nextLine + '"]').offsetTop;
                    }
                    var newScrollTop = newLineTop + (newNextLineTop - newLineTop) * percent;
                    this.previewScrollTo(newScrollTop);
                  }
                },
                handleEditorScroll: function handleEditorScroll() {
                  if (!this.enableSyncScroll || this.ignoreSyncScroll)
                    return;
                  clearTimeout(this.scrollTimmer);
                  this.scrollTimmer = setTimeout(this.previewSyncScroll, 60);
                }
              }
            };
            var mixins_toolbar = function(Component) {
              return {
                props: {
                  leftToolbar: {
                    type: String,
                    default: "undo redo clear | h bold italic strikethrough quote | ul ol table hr | link image code | save"
                  },
                  rightToolbar: {
                    type: String,
                    default: "preview toc sync-scroll fullscreen"
                  },
                  toolbar: {
                    type: Object,
                    default: function _default() {
                      return {};
                    }
                  },
                  disabledMenus: {
                    type: Array,
                    default: function _default() {
                      return ["image/upload-image"];
                    }
                  },
                  toolbarConfig: {
                    type: Object,
                    default: function _default() {
                      return {};
                    }
                  }
                },
                created: function created() {
                  var _this = this;
                  var toolbars = Component.toolbars;
                  this.toolbars = {};
                  Object.keys(toolbars).forEach(function(name) {
                    _this.registerToolbar(name, toolbars[name]);
                  });
                  Object.keys(this.toolbar).forEach(function(name) {
                    _this.registerToolbar(name, _this.toolbar[name]);
                  });
                },
                methods: {
                  registerToolbar: function registerToolbar(name, config) {
                    toolbar_registerToolbar(this.toolbars, name, config);
                  },
                  handleToolbarItemClick: function handleToolbarItemClick(toolbar2) {
                    var _toolbar$menus;
                    if (toolbar2.action && !((_toolbar$menus = toolbar2.menus) == null ? void 0 : _toolbar$menus.length) && typeof toolbar2.action === "function") {
                      toolbar2.action.call(toolbar2, this, this.toolbarConfig[toolbar2.name]);
                    }
                  },
                  handleToolbarMenuClick: function handleToolbarMenuClick(menu2) {
                    if (menu2.action && typeof menu2.action === "function") {
                      menu2.action.call(menu2, this, this.toolbarConfig[menu2.name]);
                    }
                  }
                }
              };
            };
            var mixins_command = function(Component) {
              return {
                created: function created() {
                  var _this = this;
                  var commands = Component.commands;
                  this.commands = {};
                  Object.keys(commands).forEach(function(name) {
                    _this.registerCommand(name, commands[name]);
                  });
                },
                methods: {
                  registerCommand: function registerCommand(name, callback) {
                    command_registerCommand(this.commands, name, callback);
                  },
                  execCommand: function execCommand(name) {
                    var commandCallBack = this.commands[name];
                    if (commandCallBack) {
                      for (var _len = arguments.length, arg = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        arg[_key - 1] = arguments[_key];
                      }
                      commandCallBack.apply(void 0, [this].concat(arg));
                    } else {
                      console.error("Command not found: " + name);
                    }
                  }
                }
              };
            };
            var toc = {
              data: function data() {
                return {
                  tocVisible: this.defaultShowToc,
                  titles: []
                };
              },
              props: {
                includeLevel: {
                  type: Array,
                  default: function _default() {
                    return [2, 3];
                  }
                },
                defaultShowToc: Boolean
              },
              watch: {
                text: {
                  immediate: true,
                  handler: function handler(newval, oldVal) {
                    if (typeof oldVal === "undefined") {
                      this.$nextTick(this.updateTocNav);
                      return;
                    }
                    if (this.updateTocNavTimmer)
                      clearTimeout(this.updateTocNavTimmer);
                    this.updateTocNavTimmer = setTimeout(this.updateTocNav, 800);
                  }
                }
              },
              computed: {
                anchorsSelector: function anchorsSelector() {
                  return this.includeLevel.map(function(level) {
                    return "h" + level;
                  }).join(",");
                }
              },
              methods: {
                toggleToc: function toggleToc(visible) {
                  if (visible === void 0) {
                    visible = !this.tocVisible;
                  }
                  this.tocVisible = visible;
                },
                updateTocNav: function updateTocNav() {
                  var _this$$refs$preview;
                  var previewEl = (_this$$refs$preview = this.$refs.preview) == null ? void 0 : _this$$refs$preview.$el;
                  if (!previewEl)
                    return;
                  var anchors = previewEl.querySelectorAll(this.anchorsSelector);
                  var titles = Array.from(anchors).filter(function(title) {
                    return !!title.innerText.trim();
                  });
                  if (!titles.length) {
                    this.titles = [];
                    return;
                  }
                  var hTags = Array.from(new Set(titles.map(function(title) {
                    return title.tagName;
                  }))).sort();
                  this.titles = titles.map(function(el) {
                    return {
                      title: el.innerText,
                      lineIndex: el.getAttribute(markup[
                        "c"
                        /* LINE_MARKUP */
                      ]),
                      indent: hTags.indexOf(el.tagName)
                    };
                  });
                },
                handleNavClick: function handleNavClick(_ref) {
                  var lineIndex = _ref.lineIndex;
                  this.scrollToLine(lineIndex);
                }
              }
            };
            var mixins_scroll = {
              props: {
                previewScrollContainer: Function
              },
              computed: {
                getPreviewScrollContainer: function getPreviewScrollContainer() {
                  var _this = this;
                  return function() {
                    var previewScrollContainer = _this.$refs.previewScroller.$el.querySelector(".scrollbar__wrap");
                    var defaultContainer = _this.isPreviewMode ? window : previewScrollContainer;
                    return _this.previewScrollContainer ? _this.previewScrollContainer() : defaultContainer;
                  };
                }
              },
              methods: {
                previewScrollTo: function previewScrollTo(scrollTop) {
                  this.$refs.previewScroller.scrollTo(scrollTop);
                },
                scrollToLine: function scrollToLine(lineIndex) {
                  var _this2 = this;
                  if (!this.isPreviewMode) {
                    this.editorScrollToLine(lineIndex);
                  }
                  if (!this.isEditMode) {
                    this.ignoreSyncScroll = true;
                    this.previewScrollToLine({
                      lineIndex,
                      onScrollEnd: function onScrollEnd() {
                        _this2.ignoreSyncScroll = false;
                      }
                    });
                  }
                },
                editorScrollToLine: function editorScrollToLine(lineIndex) {
                  var offsetTop = this.heightAtLine(lineIndex - 1, "local");
                  this.editorScrollToTop(offsetTop);
                },
                previewScrollToTarget: function previewScrollToTarget() {
                  var _this$$refs$preview;
                  (_this$$refs$preview = this.$refs.preview).scrollToTarget.apply(_this$$refs$preview, arguments);
                },
                previewScrollToLine: function previewScrollToLine(_ref) {
                  var lineIndex = _ref.lineIndex, onScrollEnd = _ref.onScrollEnd;
                  this.$refs.preview.scrollToLine({
                    lineIndex,
                    onScrollEnd
                  });
                }
              }
            };
            var defaultHotkeys = {};
            Object(util[
              "c"
              /* importAll */
            ])(defaultHotkeys, __webpack_require__(90));
            var hotkeys = function(Component) {
              return {
                mounted: function mounted() {
                  var _this = this;
                  if (this.isPreviewMode)
                    return;
                  var hotkeys2 = Component.hotkeys;
                  Object.keys(defaultHotkeys).forEach(function(key) {
                    _this.registerHotkeys(defaultHotkeys[key].default);
                  });
                  hotkeys2.forEach(function(config) {
                    _this.registerHotkeys(config);
                  });
                },
                methods: {
                  registerHotkeys: function registerHotkeys(_ref) {
                    var _this2 = this;
                    var modifier = _ref.modifier, key = _ref.key, _action = _ref.action, _ref$preventDefault = _ref.preventDefault, preventDefault = _ref$preventDefault === void 0 ? true : _ref$preventDefault;
                    this.editorRegisterHotkeys({
                      modifier,
                      key,
                      preventDefault,
                      action: function action() {
                        for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
                          arg[_key] = arguments[_key];
                        }
                        return _action.apply(void 0, [_this2].concat(arg));
                      }
                    });
                  }
                }
              };
            };
            var ol = /^\s*([\d]+\.)( \[[ xX]])? /;
            var ul = /^\s*([-*])( \[[ xX]])? /;
            var ulSyntax = /([*-] |[\d]+\. )/;
            var olSyntax = /([\d])+\.( \[[ xX]])? /;
            var list = {
              mounted: function mounted() {
                var _this = this;
                if (this.isPreviewMode)
                  return;
                this.registerHotkeys({
                  key: "enter",
                  preventDefault: false,
                  action: function action(editor, e) {
                    if (e.isComposing)
                      return;
                    var cursorLineLeftText = _this.getCursorLineLeftText();
                    var suffix;
                    var syntax;
                    if (ol.test(cursorLineLeftText)) {
                      suffix = "x. ";
                      syntax = olSyntax;
                      e.preventDefault();
                    } else if (ul.test(cursorLineLeftText)) {
                      suffix = "- ";
                      syntax = ulSyntax;
                      e.preventDefault();
                    } else {
                      return;
                    }
                    var indent = cursorLineLeftText.search(syntax);
                    var suffixIndex = indent + suffix.length;
                    var beforeText = cursorLineLeftText.slice(0, suffixIndex);
                    var content = cursorLineLeftText.slice(suffixIndex, cursorLineLeftText.length);
                    if (content) {
                      if (suffix === "x. ") {
                        beforeText = beforeText.replace(/(\d+)/, window.parseInt(beforeText) + 1);
                      }
                      _this.replaceSelectionText("\n" + beforeText, "end");
                    } else {
                      _this.delLineLeft();
                      _this.replaceSelectionText("\n", "end");
                    }
                  }
                });
              }
            };
            var mixins_lang = {
              computed: {
                langConfig: function langConfig() {
                  var lang = this.$options.lang.config;
                  return lang.langConfig[lang.lang];
                }
              }
            };
            var create_editor_lang = new utils_lang[
              "a"
              /* default */
            ]({
              afterUse: function afterUse(lang) {
                preview["default"].vMdParser.lang.config.lang = lang;
              }
            });
            create_editor_lang.config = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["reactive"])(create_editor_lang.config);
            create_editor_lang.add({
              "zh-CN": zh_CN
            });
            function createEditor(component) {
              commandWrapper(component);
              toolbarWrapper(component);
              component.name = "v-md-editor";
              component.lang = create_editor_lang;
              component.vMdParser = preview["default"].vMdParser;
              component.Preview = preview["default"];
              component.hotkeys = [];
              component.hotkey = function(config) {
                component.hotkeys.push(config);
              };
              component.mixins = [common, v_model, mixins_toolbar(component), mixins_command(component), hotkeys(component), fullscreen, upload_image, sync_scroll, toc, mixins_scroll, list, mixins_lang];
            }
          },
          /* 36 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var keyCodesToName = {
              // Numbers and letters
              48: 0,
              49: 1,
              50: 2,
              51: 3,
              52: 4,
              53: 5,
              54: 6,
              55: 7,
              56: 8,
              57: 9,
              65: "a",
              66: "b",
              67: "c",
              68: "d",
              69: "e",
              70: "f",
              71: "g",
              72: "h",
              73: "i",
              74: "j",
              75: "k",
              76: "l",
              77: "m",
              78: "n",
              79: "o",
              80: "p",
              81: "q",
              82: "r",
              83: "s",
              84: "t",
              85: "u",
              86: "v",
              87: "w",
              88: "x",
              89: "y",
              90: "z",
              // Function keys
              112: "F1",
              113: "F2",
              114: "F3",
              115: "F4",
              116: "F5",
              117: "F6",
              118: "F7",
              119: "F8",
              120: "F9",
              121: "F10",
              122: "F11",
              123: "F12"
            };
            var keyNames = {
              esc: ["Esc", "Escape"],
              tab: "Tab",
              enter: "Enter",
              space: [" ", "Spacebar"],
              up: ["Up", "ArrowUp"],
              left: ["Left", "ArrowLeft"],
              right: ["Right", "ArrowRight"],
              down: ["Down", "ArrowDown"],
              delete: ["Backspace", "Delete", "Del"]
            };
            var hotkeys_Hotkeys = function() {
              function Hotkeys() {
                this.hotkeys = {
                  ctrl: {},
                  shift: {},
                  ctrlAlt: {},
                  ctrlShift: {},
                  keys: {}
                };
              }
              var _proto = Hotkeys.prototype;
              _proto.dispatch = function dispatch(e) {
                var keyName = this.getKeyName(e).toLowerCase();
                var opt;
                if (!keyName)
                  return;
                if (this.isKeyEnterExact(e)) {
                  opt = this.hotkeys.keys[keyName];
                } else if (this.isCtrlEnterExact(e)) {
                  opt = this.hotkeys.ctrl[keyName];
                } else if (this.isShiftEnterExact(e)) {
                  opt = this.hotkeys.shift[keyName];
                } else if (this.isCtrlAltEnterExact(e)) {
                  opt = this.hotkeys.ctrlAlt[keyName];
                } else if (this.isCtrlShiftEnterExact(e)) {
                  opt = this.hotkeys.ctrlShift[keyName];
                }
                if (opt) {
                  var _opt = opt, action = _opt.action, preventDefault = _opt.preventDefault;
                  if (preventDefault)
                    e.preventDefault();
                  action(e);
                }
              };
              _proto.isKeyEnterExact = function isKeyEnterExact(e) {
                return !this.isCtrlEnter(e) && !this.isShiftEnter(e) && !this.isAltEnter(e);
              };
              _proto.isCtrlShiftEnterExact = function isCtrlShiftEnterExact(e) {
                return this.isCtrlEnter(e) && this.isShiftEnter(e) && !this.isAltEnter(e);
              };
              _proto.isCtrlAltEnterExact = function isCtrlAltEnterExact(e) {
                return this.isCtrlEnter(e) && this.isAltEnter(e) && !this.isShiftEnter(e);
              };
              _proto.isCtrlEnterExact = function isCtrlEnterExact(e) {
                return this.isCtrlEnter(e) && !this.isShiftEnter(e) && !this.isAltEnter(e);
              };
              _proto.isShiftEnterExact = function isShiftEnterExact(e) {
                return this.isShiftEnter(e) && !this.isCtrlEnter(e) && !this.isAltEnter(e);
              };
              _proto.isCtrlEnter = function isCtrlEnter(e) {
                return e.ctrlKey || e.metaKey;
              };
              _proto.isShiftEnter = function isShiftEnter(e) {
                return e.shiftKey;
              };
              _proto.isAltEnter = function isAltEnter(e) {
                return e.altKey;
              };
              _proto.registerHotkeys = function registerHotkeys(_ref) {
                var modifier = _ref.modifier, key = _ref.key, _ref$preventDefault = _ref.preventDefault, preventDefault = _ref$preventDefault === void 0 ? true : _ref$preventDefault, action = _ref.action;
                if (modifier) {
                  this.hotkeys[modifier][key] = {
                    preventDefault,
                    action
                  };
                } else {
                  this.hotkeys.keys[key] = {
                    preventDefault,
                    action
                  };
                }
              };
              _proto.getKeyName = function getKeyName(e) {
                var key = e.key, keyCode = e.keyCode;
                if (key !== void 0) {
                  var keyName = Object.keys(keyNames).find(function(keyName2) {
                    var validNames = keyNames[keyName2];
                    return typeof validNames === "string" ? validNames === key : validNames.indexOf(key) !== -1;
                  });
                  return keyName || key;
                }
                return keyCodesToName[keyCode];
              };
              return Hotkeys;
            }();
            var hotkeys = __webpack_exports__["a"] = hotkeys_Hotkeys;
          },
          /* 37 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var runtime = function(exports3) {
              "use strict";
              var Op = Object.prototype;
              var hasOwn = Op.hasOwnProperty;
              var undefined2;
              var $Symbol = typeof Symbol === "function" ? Symbol : {};
              var iteratorSymbol = $Symbol.iterator || "@@iterator";
              var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
              var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
              function define2(obj, key, value) {
                Object.defineProperty(obj, key, {
                  value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
                return obj[key];
              }
              try {
                define2({}, "");
              } catch (err) {
                define2 = function(obj, key, value) {
                  return obj[key] = value;
                };
              }
              function wrap(innerFn, outerFn, self2, tryLocsList) {
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);
                generator._invoke = makeInvokeMethod(innerFn, self2, context);
                return generator;
              }
              exports3.wrap = wrap;
              function tryCatch(fn, obj, arg) {
                try {
                  return { type: "normal", arg: fn.call(obj, arg) };
                } catch (err) {
                  return { type: "throw", arg: err };
                }
              }
              var GenStateSuspendedStart = "suspendedStart";
              var GenStateSuspendedYield = "suspendedYield";
              var GenStateExecuting = "executing";
              var GenStateCompleted = "completed";
              var ContinueSentinel = {};
              function Generator() {
              }
              function GeneratorFunction() {
              }
              function GeneratorFunctionPrototype() {
              }
              var IteratorPrototype = {};
              IteratorPrototype[iteratorSymbol] = function() {
                return this;
              };
              var getProto = Object.getPrototypeOf;
              var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
              if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                IteratorPrototype = NativeIteratorPrototype;
              }
              var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
              GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
              GeneratorFunctionPrototype.constructor = GeneratorFunction;
              GeneratorFunction.displayName = define2(
                GeneratorFunctionPrototype,
                toStringTagSymbol,
                "GeneratorFunction"
              );
              function defineIteratorMethods(prototype) {
                ["next", "throw", "return"].forEach(function(method) {
                  define2(prototype, method, function(arg) {
                    return this._invoke(method, arg);
                  });
                });
              }
              exports3.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
                // do is to check its .name property.
                (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
              };
              exports3.mark = function(genFun) {
                if (Object.setPrototypeOf) {
                  Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                  genFun.__proto__ = GeneratorFunctionPrototype;
                  define2(genFun, toStringTagSymbol, "GeneratorFunction");
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
              };
              exports3.awrap = function(arg) {
                return { __await: arg };
              };
              function AsyncIterator(generator, PromiseImpl) {
                function invoke(method, arg, resolve, reject) {
                  var record = tryCatch(generator[method], generator, arg);
                  if (record.type === "throw") {
                    reject(record.arg);
                  } else {
                    var result = record.arg;
                    var value = result.value;
                    if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                      return PromiseImpl.resolve(value.__await).then(function(value2) {
                        invoke("next", value2, resolve, reject);
                      }, function(err) {
                        invoke("throw", err, resolve, reject);
                      });
                    }
                    return PromiseImpl.resolve(value).then(function(unwrapped) {
                      result.value = unwrapped;
                      resolve(result);
                    }, function(error) {
                      return invoke("throw", error, resolve, reject);
                    });
                  }
                }
                var previousPromise;
                function enqueue(method, arg) {
                  function callInvokeWithMethodAndArg() {
                    return new PromiseImpl(function(resolve, reject) {
                      invoke(method, arg, resolve, reject);
                    });
                  }
                  return previousPromise = // If enqueue has been called before, then we want to wait until
                  // all previous Promises have been resolved before calling invoke,
                  // so that results are always delivered in the correct order. If
                  // enqueue has not been called before, then it is important to
                  // call invoke immediately, without waiting on a callback to fire,
                  // so that the async generator function has the opportunity to do
                  // any necessary setup in a predictable way. This predictability
                  // is why the Promise constructor synchronously invokes its
                  // executor callback, and why async functions synchronously
                  // execute code before the first await. Since we implement simple
                  // async functions in terms of async generators, it is especially
                  // important to get this right, even though it requires care.
                  previousPromise ? previousPromise.then(
                    callInvokeWithMethodAndArg,
                    // Avoid propagating failures to Promises returned by later
                    // invocations of the iterator.
                    callInvokeWithMethodAndArg
                  ) : callInvokeWithMethodAndArg();
                }
                this._invoke = enqueue;
              }
              defineIteratorMethods(AsyncIterator.prototype);
              AsyncIterator.prototype[asyncIteratorSymbol] = function() {
                return this;
              };
              exports3.AsyncIterator = AsyncIterator;
              exports3.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
                if (PromiseImpl === void 0)
                  PromiseImpl = Promise;
                var iter = new AsyncIterator(
                  wrap(innerFn, outerFn, self2, tryLocsList),
                  PromiseImpl
                );
                return exports3.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                  return result.done ? result.value : iter.next();
                });
              };
              function makeInvokeMethod(innerFn, self2, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                  if (state === GenStateExecuting) {
                    throw new Error("Generator is already running");
                  }
                  if (state === GenStateCompleted) {
                    if (method === "throw") {
                      throw arg;
                    }
                    return doneResult();
                  }
                  context.method = method;
                  context.arg = arg;
                  while (true) {
                    var delegate = context.delegate;
                    if (delegate) {
                      var delegateResult = maybeInvokeDelegate(delegate, context);
                      if (delegateResult) {
                        if (delegateResult === ContinueSentinel)
                          continue;
                        return delegateResult;
                      }
                    }
                    if (context.method === "next") {
                      context.sent = context._sent = context.arg;
                    } else if (context.method === "throw") {
                      if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                      }
                      context.dispatchException(context.arg);
                    } else if (context.method === "return") {
                      context.abrupt("return", context.arg);
                    }
                    state = GenStateExecuting;
                    var record = tryCatch(innerFn, self2, context);
                    if (record.type === "normal") {
                      state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                      if (record.arg === ContinueSentinel) {
                        continue;
                      }
                      return {
                        value: record.arg,
                        done: context.done
                      };
                    } else if (record.type === "throw") {
                      state = GenStateCompleted;
                      context.method = "throw";
                      context.arg = record.arg;
                    }
                  }
                };
              }
              function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined2) {
                  context.delegate = null;
                  if (context.method === "throw") {
                    if (delegate.iterator["return"]) {
                      context.method = "return";
                      context.arg = undefined2;
                      maybeInvokeDelegate(delegate, context);
                      if (context.method === "throw") {
                        return ContinueSentinel;
                      }
                    }
                    context.method = "throw";
                    context.arg = new TypeError(
                      "The iterator does not provide a 'throw' method"
                    );
                  }
                  return ContinueSentinel;
                }
                var record = tryCatch(method, delegate.iterator, context.arg);
                if (record.type === "throw") {
                  context.method = "throw";
                  context.arg = record.arg;
                  context.delegate = null;
                  return ContinueSentinel;
                }
                var info = record.arg;
                if (!info) {
                  context.method = "throw";
                  context.arg = new TypeError("iterator result is not an object");
                  context.delegate = null;
                  return ContinueSentinel;
                }
                if (info.done) {
                  context[delegate.resultName] = info.value;
                  context.next = delegate.nextLoc;
                  if (context.method !== "return") {
                    context.method = "next";
                    context.arg = undefined2;
                  }
                } else {
                  return info;
                }
                context.delegate = null;
                return ContinueSentinel;
              }
              defineIteratorMethods(Gp);
              define2(Gp, toStringTagSymbol, "Generator");
              Gp[iteratorSymbol] = function() {
                return this;
              };
              Gp.toString = function() {
                return "[object Generator]";
              };
              function pushTryEntry(locs) {
                var entry = { tryLoc: locs[0] };
                if (1 in locs) {
                  entry.catchLoc = locs[1];
                }
                if (2 in locs) {
                  entry.finallyLoc = locs[2];
                  entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
              }
              function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
              }
              function Context(tryLocsList) {
                this.tryEntries = [{ tryLoc: "root" }];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
              }
              exports3.keys = function(object) {
                var keys = [];
                for (var key in object) {
                  keys.push(key);
                }
                keys.reverse();
                return function next() {
                  while (keys.length) {
                    var key2 = keys.pop();
                    if (key2 in object) {
                      next.value = key2;
                      next.done = false;
                      return next;
                    }
                  }
                  next.done = true;
                  return next;
                };
              };
              function values(iterable) {
                if (iterable) {
                  var iteratorMethod = iterable[iteratorSymbol];
                  if (iteratorMethod) {
                    return iteratorMethod.call(iterable);
                  }
                  if (typeof iterable.next === "function") {
                    return iterable;
                  }
                  if (!isNaN(iterable.length)) {
                    var i = -1, next = function next2() {
                      while (++i < iterable.length) {
                        if (hasOwn.call(iterable, i)) {
                          next2.value = iterable[i];
                          next2.done = false;
                          return next2;
                        }
                      }
                      next2.value = undefined2;
                      next2.done = true;
                      return next2;
                    };
                    return next.next = next;
                  }
                }
                return { next: doneResult };
              }
              exports3.values = values;
              function doneResult() {
                return { value: undefined2, done: true };
              }
              Context.prototype = {
                constructor: Context,
                reset: function(skipTempReset) {
                  this.prev = 0;
                  this.next = 0;
                  this.sent = this._sent = undefined2;
                  this.done = false;
                  this.delegate = null;
                  this.method = "next";
                  this.arg = undefined2;
                  this.tryEntries.forEach(resetTryEntry);
                  if (!skipTempReset) {
                    for (var name in this) {
                      if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                        this[name] = undefined2;
                      }
                    }
                  }
                },
                stop: function() {
                  this.done = true;
                  var rootEntry = this.tryEntries[0];
                  var rootRecord = rootEntry.completion;
                  if (rootRecord.type === "throw") {
                    throw rootRecord.arg;
                  }
                  return this.rval;
                },
                dispatchException: function(exception) {
                  if (this.done) {
                    throw exception;
                  }
                  var context = this;
                  function handle(loc, caught) {
                    record.type = "throw";
                    record.arg = exception;
                    context.next = loc;
                    if (caught) {
                      context.method = "next";
                      context.arg = undefined2;
                    }
                    return !!caught;
                  }
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    var record = entry.completion;
                    if (entry.tryLoc === "root") {
                      return handle("end");
                    }
                    if (entry.tryLoc <= this.prev) {
                      var hasCatch = hasOwn.call(entry, "catchLoc");
                      var hasFinally = hasOwn.call(entry, "finallyLoc");
                      if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        } else if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        }
                      } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else {
                        throw new Error("try statement without catch or finally");
                      }
                    }
                  }
                },
                abrupt: function(type, arg) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                      var finallyEntry = entry;
                      break;
                    }
                  }
                  if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                    finallyEntry = null;
                  }
                  var record = finallyEntry ? finallyEntry.completion : {};
                  record.type = type;
                  record.arg = arg;
                  if (finallyEntry) {
                    this.method = "next";
                    this.next = finallyEntry.finallyLoc;
                    return ContinueSentinel;
                  }
                  return this.complete(record);
                },
                complete: function(record, afterLoc) {
                  if (record.type === "throw") {
                    throw record.arg;
                  }
                  if (record.type === "break" || record.type === "continue") {
                    this.next = record.arg;
                  } else if (record.type === "return") {
                    this.rval = this.arg = record.arg;
                    this.method = "return";
                    this.next = "end";
                  } else if (record.type === "normal" && afterLoc) {
                    this.next = afterLoc;
                  }
                  return ContinueSentinel;
                },
                finish: function(finallyLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.finallyLoc === finallyLoc) {
                      this.complete(entry.completion, entry.afterLoc);
                      resetTryEntry(entry);
                      return ContinueSentinel;
                    }
                  }
                },
                "catch": function(tryLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc === tryLoc) {
                      var record = entry.completion;
                      if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                      }
                      return thrown;
                    }
                  }
                  throw new Error("illegal catch attempt");
                },
                delegateYield: function(iterable, resultName, nextLoc) {
                  this.delegate = {
                    iterator: values(iterable),
                    resultName,
                    nextLoc
                  };
                  if (this.method === "next") {
                    this.arg = undefined2;
                  }
                  return ContinueSentinel;
                }
              };
              return exports3;
            }(
              // If this script is executing as a CommonJS module, use module.exports
              // as the regeneratorRuntime namespace. Otherwise create a new empty
              // object. Either way, the resulting object will be used to initialize
              // the regeneratorRuntime variable at the top of this file.
              true ? module2.exports : void 0
            );
            try {
              regeneratorRuntime = runtime;
            } catch (accidentalStrictMode) {
              Function("r", "regeneratorRuntime = r")(runtime);
            }
          },
          /* 38 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var map = {
              "./bold.js": 39,
              "./clear.js": 40,
              "./code.js": 41,
              "./fullscreen.js": 42,
              "./h1.js": 43,
              "./h2.js": 44,
              "./h3.js": 45,
              "./h4.js": 46,
              "./h5.js": 47,
              "./h6.js": 48,
              "./hr.js": 49,
              "./image.js": 50,
              "./italic.js": 51,
              "./link.js": 52,
              "./ol.js": 53,
              "./quote.js": 54,
              "./redo.js": 55,
              "./strikethrough.js": 56,
              "./sync-scroll.js": 57,
              "./table.js": 58,
              "./ul.js": 59,
              "./undo.js": 60
            };
            function webpackContext(req) {
              var id = webpackContextResolve(req);
              return __webpack_require__(id);
            }
            function webpackContextResolve(req) {
              if (!__webpack_require__.o(map, req)) {
                var e = new Error("Cannot find module '" + req + "'");
                e.code = "MODULE_NOT_FOUND";
                throw e;
              }
              return map[req];
            }
            webpackContext.keys = function webpackContextKeys() {
              return Object.keys(map);
            };
            webpackContext.resolve = webpackContextResolve;
            module2.exports = webpackContext;
            webpackContext.id = 38;
          },
          /* 39 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["a"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "**";
                var suffix = "**";
                var placeholder = editor.langConfig.bold.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return "" + prefix + selectedGetter(selected2) + suffix;
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 40 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["b"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.clear();
            };
          },
          /* 41 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["c"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "``` language";
                var suffix = "```";
                var text = prefix + "\n" + suffix;
                if (selected) {
                  text = prefix + "\n  " + selected + "\n" + suffix;
                }
                return {
                  text,
                  selected: "language"
                };
              });
            };
          },
          /* 42 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["d"];
            });
            __webpack_exports__["default"] = function(editor, fullScreen) {
              editor.toggleFullScreen(fullScreen);
            };
          },
          /* 43 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["e"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "#";
                var placeholder = editor.langConfig.h1.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 44 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["f"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "##";
                var placeholder = editor.langConfig.h2.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 45 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["g"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "###";
                var placeholder = editor.langConfig.h3.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 46 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["h"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "####";
                var placeholder = editor.langConfig.h4.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 47 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["i"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "#####";
                var placeholder = editor.langConfig.h5.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 48 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["j"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "######";
                var placeholder = editor.langConfig.h6.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 49 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["k"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function() {
                return {
                  text: "------------------------------------"
                };
              });
            };
          },
          /* 50 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["l"];
            });
            __webpack_exports__["default"] = function(editor, _temp) {
              var _ref = _temp === void 0 ? {} : _temp, url = _ref.url, desc = _ref.desc, width = _ref.width, height = _ref.height;
              editor.insert(function() {
                var urlPlaceholder = "http://";
                var descPlaceholder = "Description";
                var selected = urlPlaceholder;
                var text = "![" + (desc || descPlaceholder) + "](" + (url || urlPlaceholder) + ")";
                var style = [];
                if (width) {
                  style.push('width="' + width + '"');
                }
                if (height) {
                  style.push('height="' + height + '"');
                }
                if (style.length) {
                  text += "{{{" + style.join(" ") + "}}}";
                }
                if (url && desc) {
                  selected = null;
                } else if (url) {
                  selected = descPlaceholder;
                } else if (desc) {
                  selected = urlPlaceholder;
                }
                return {
                  text,
                  selected
                };
              });
            };
          },
          /* 51 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["m"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "*";
                var suffix = "*";
                var placeholder = editor.langConfig.italic.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return "" + prefix + selectedGetter(selected2) + suffix;
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 52 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["n"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var descPlaceholder = editor.langConfig.link.descPlaceholder;
                var linkPlaceholder = "http://";
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return "[" + (selected2 || descPlaceholder) + "](" + linkPlaceholder + ")";
                  },
                  selectedGetter: function selectedGetter(selected2) {
                    return selected2 ? linkPlaceholder : descPlaceholder;
                  }
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 53 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["o"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var placeholder = editor.langConfig.ol.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2, rowIndex) {
                    return rowIndex + ". " + selectedGetter(selected2);
                  },
                  selectedGetter,
                  ignoreEmptyLine: false
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 54 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["p"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = ">";
                var content = selected || editor.langConfig.quote.placeholder;
                return {
                  text: prefix + " " + content,
                  selected: content
                };
              });
            };
          },
          /* 55 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["q"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.redo();
            };
          },
          /* 56 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["r"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "~~";
                var suffix = "~~";
                var placeholder = editor.langConfig.strikethrough.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return "" + prefix + selectedGetter(selected2) + suffix;
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 57 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["s"];
            });
            __webpack_exports__["default"] = function(editor, isEnable) {
              editor.toggleSyncScroll(isEnable);
            };
          },
          /* 58 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["t"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function() {
                var content = "|column1|column2|column3|\n|-|-|-|\n|content1|content2|content3|";
                return {
                  text: content,
                  selected: "column1"
                };
              });
            };
          },
          /* 59 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["u"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var placeholder = editor.langConfig.ul.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return "- " + selectedGetter(selected2);
                  },
                  selectedGetter,
                  ignoreEmptyLine: false
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 60 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["v"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.undo();
            };
          },
          /* 61 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var map = {
              "./bold.js": 62,
              "./clear.js": 63,
              "./code.js": 64,
              "./fullscreen.js": 65,
              "./h.js": 66,
              "./hr.js": 67,
              "./image.js": 23,
              "./italic.js": 68,
              "./link.js": 69,
              "./ol.js": 70,
              "./preview.js": 71,
              "./quote.js": 72,
              "./redo.js": 73,
              "./save.js": 74,
              "./strikethrough.js": 75,
              "./sync-scroll.js": 76,
              "./table.js": 77,
              "./toc.js": 78,
              "./ul.js": 79,
              "./undo.js": 80
            };
            function webpackContext(req) {
              var id = webpackContextResolve(req);
              return __webpack_require__(id);
            }
            function webpackContextResolve(req) {
              if (!__webpack_require__.o(map, req)) {
                var e = new Error("Cannot find module '" + req + "'");
                e.code = "MODULE_NOT_FOUND";
                throw e;
              }
              return map[req];
            }
            webpackContext.keys = function webpackContextKeys() {
              return Object.keys(map);
            };
            webpackContext.resolve = webpackContextResolve;
            module2.exports = webpackContext;
            webpackContext.id = 61;
          },
          /* 62 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* bold */
                "a"
              ],
              icon: "v-md-icon-bold",
              title: function title(editor) {
                return editor.langConfig.bold.toolbar + "（Ctrl+B）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* bold */
                  "a"
                ]);
              }
            };
          },
          /* 63 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* clear */
                "b"
              ],
              icon: "v-md-icon-clear",
              title: function title(editor) {
                return editor.langConfig.clear.toolbar;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* clear */
                  "b"
                ]);
              }
            };
          },
          /* 64 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* code */
                "c"
              ],
              icon: "v-md-icon-code",
              title: function title(editor) {
                return editor.langConfig.code.toolbar;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* code */
                  "c"
                ]);
              }
            };
          },
          /* 65 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* fullscreen */
                "d"
              ],
              icon: "v-md-icon-fullscreen",
              title: function title(editor) {
                var fullscreenLang = editor.langConfig.fullscreen;
                return editor.fullscreen ? fullscreenLang.disabled : fullscreenLang.enabled;
              },
              active: function active(editor) {
                return editor.fullscreen;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* fullscreen */
                  "d"
                ], !editor.fullscreen);
              }
            };
          },
          /* 66 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: "h",
              text: "H",
              title: function title(editor) {
                return editor.langConfig.h.toolbar + "（Ctrl+1~6）";
              },
              menus: [{
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h1 */
                  "e"
                ],
                text: function text(editor) {
                  return editor.langConfig.h1.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h1 */
                    "e"
                  ]);
                }
              }, {
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h2 */
                  "f"
                ],
                text: function text(editor) {
                  return editor.langConfig.h2.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h2 */
                    "f"
                  ]);
                }
              }, {
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h3 */
                  "g"
                ],
                text: function text(editor) {
                  return editor.langConfig.h3.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h3 */
                    "g"
                  ]);
                }
              }, {
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h4 */
                  "h"
                ],
                text: function text(editor) {
                  return editor.langConfig.h4.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h4 */
                    "h"
                  ]);
                }
              }, {
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h5 */
                  "i"
                ],
                text: function text(editor) {
                  return editor.langConfig.h5.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h5 */
                    "i"
                  ]);
                }
              }, {
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h6 */
                  "j"
                ],
                text: function text(editor) {
                  return editor.langConfig.h6.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h6 */
                    "j"
                  ]);
                }
              }]
            };
          },
          /* 67 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* hr */
                "k"
              ],
              icon: "v-md-icon-horizontal",
              title: function title(editor) {
                return editor.langConfig.hr.toolbar;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* hr */
                  "k"
                ]);
              }
            };
          },
          /* 68 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* italic */
                "m"
              ],
              icon: "v-md-icon-italic",
              title: function title(editor) {
                return editor.langConfig.italic.toolbar + "（Ctrl+I）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* italic */
                  "m"
                ]);
              }
            };
          },
          /* 69 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* link */
                "n"
              ],
              icon: "v-md-icon-link",
              title: function title(editor) {
                return editor.langConfig.link.toolbar + "（Ctrl+L）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* link */
                  "n"
                ]);
              }
            };
          },
          /* 70 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* ol */
                "o"
              ],
              icon: "v-md-icon-ol",
              title: function title(editor) {
                return editor.langConfig.ol.toolbar + "（Ctrl+O）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* ol */
                  "o"
                ]);
              }
            };
          },
          /* 71 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
            __webpack_exports__["default"] = {
              name: "preview",
              icon: "v-md-icon-preview",
              title: function title(editor) {
                var previewLang = editor.langConfig.preview;
                return editor.currentMode === _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__[
                  /* default */
                  "a"
                ].EDITABLE ? previewLang.disabled : previewLang.enabled;
              },
              active: function active(editor) {
                return editor.currentMode === _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__[
                  /* default */
                  "a"
                ].EDITABLE;
              },
              action: function action(editor) {
                editor.currentMode = editor.currentMode === _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__[
                  /* default */
                  "a"
                ].EDITABLE ? _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__[
                  /* default */
                  "a"
                ].EDIT : _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__[
                  /* default */
                  "a"
                ].EDITABLE;
              }
            };
          },
          /* 72 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* quote */
                "p"
              ],
              icon: "v-md-icon-quote",
              title: function title(editor) {
                return editor.langConfig.quote.toolbar + "（Ctrl+Q）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* quote */
                  "p"
                ]);
              }
            };
          },
          /* 73 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* redo */
                "q"
              ],
              icon: "v-md-icon-redo",
              title: function title(editor) {
                return editor.langConfig.redo.toolbar + "（Ctrl+Y）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* redo */
                  "q"
                ]);
              }
            };
          },
          /* 74 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_exports__["default"] = {
              name: "save",
              icon: "v-md-icon-save",
              title: function title(editor) {
                return editor.langConfig.save.toolbar + "（Ctrl+S）";
              },
              action: function action(editor) {
                editor.save();
              }
            };
          },
          /* 75 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* strikethrough */
                "r"
              ],
              icon: "v-md-icon-strikethrough",
              title: function title(editor) {
                return editor.langConfig.strikethrough.toolbar;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* strikethrough */
                  "r"
                ]);
              }
            };
          },
          /* 76 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* syncScroll */
                "s"
              ],
              icon: "v-md-icon-sync",
              title: function title(editor) {
                var syncScrollLang = editor.langConfig.syncScroll;
                return editor.enableSyncScroll ? syncScrollLang.disabled : syncScrollLang.enabled;
              },
              active: function active(editor) {
                return editor.enableSyncScroll;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* syncScroll */
                  "s"
                ], !editor.enableSyncScroll);
              }
            };
          },
          /* 77 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* table */
                "t"
              ],
              icon: "v-md-icon-table",
              title: function title(editor) {
                return editor.langConfig.table.toolbar;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* table */
                  "t"
                ]);
              }
            };
          },
          /* 78 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_exports__["default"] = {
              name: "toc",
              icon: "v-md-icon-toc",
              title: function title(editor) {
                var tocLang = editor.langConfig.toc;
                return editor.tocVisible ? tocLang.disabled : tocLang.enabled;
              },
              active: function active(editor) {
                return editor.tocVisible;
              },
              action: function action(editor) {
                editor.toggleToc();
              }
            };
          },
          /* 79 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* ul */
                "u"
              ],
              icon: "v-md-icon-ul",
              title: function title(editor) {
                return editor.langConfig.ul.toolbar + "（Ctrl+U）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* ul */
                  "u"
                ]);
              }
            };
          },
          /* 80 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* undo */
                "v"
              ],
              icon: "v-md-icon-undo",
              title: function title(editor) {
                return editor.langConfig.undo.toolbar + "（Ctrl+Z）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* undo */
                  "v"
                ]);
              }
            };
          },
          /* 81 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 82 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_tooltip_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_tooltip_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_tooltip_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 83 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_menu_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_menu_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_menu_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 84 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 85 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toolbar_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toolbar_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toolbar_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 86 */
          /***/
          function(module2, exports2) {
            var g;
            g = function() {
              return this;
            }();
            try {
              g = g || new Function("return this")();
            } catch (e) {
              if (typeof window === "object")
                g = window;
            }
            module2.exports = g;
          },
          /* 87 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_container_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(31);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_container_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_container_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 88 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 89 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toc_nav_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toc_nav_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toc_nav_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 90 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var map = {
              "./bold.js": 91,
              "./h1.js": 92,
              "./h2.js": 93,
              "./h3.js": 94,
              "./h4.js": 95,
              "./h5.js": 96,
              "./h6.js": 97,
              "./italic.js": 98,
              "./link.js": 99,
              "./ol.js": 100,
              "./quote.js": 101,
              "./save.js": 102,
              "./ul.js": 103
            };
            function webpackContext(req) {
              var id = webpackContextResolve(req);
              return __webpack_require__(id);
            }
            function webpackContextResolve(req) {
              if (!__webpack_require__.o(map, req)) {
                var e = new Error("Cannot find module '" + req + "'");
                e.code = "MODULE_NOT_FOUND";
                throw e;
              }
              return map[req];
            }
            webpackContext.keys = function webpackContextKeys() {
              return Object.keys(map);
            };
            webpackContext.resolve = webpackContextResolve;
            module2.exports = webpackContext;
            webpackContext.id = 90;
          },
          /* 91 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "b",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* bold */
                  "a"
                ]);
              }
            };
          },
          /* 92 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "1",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h1 */
                  "e"
                ]);
              }
            };
          },
          /* 93 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "2",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h2 */
                  "f"
                ]);
              }
            };
          },
          /* 94 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "3",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h3 */
                  "g"
                ]);
              }
            };
          },
          /* 95 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "4",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h4 */
                  "h"
                ]);
              }
            };
          },
          /* 96 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "5",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h5 */
                  "i"
                ]);
              }
            };
          },
          /* 97 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "6",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h6 */
                  "j"
                ]);
              }
            };
          },
          /* 98 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "i",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* italic */
                  "m"
                ]);
              }
            };
          },
          /* 99 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "l",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* link */
                  "n"
                ]);
              }
            };
          },
          /* 100 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "o",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* ol */
                  "o"
                ]);
              }
            };
          },
          /* 101 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "q",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* quote */
                  "p"
                ]);
              }
            };
          },
          /* 102 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "s",
              action: function action(editor) {
                editor.save();
              }
            };
          },
          /* 103 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "u",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* ul */
                  "u"
                ]);
              }
            };
          },
          /* 104 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          ,
          /* 106 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_textarea_editor_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(104);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_textarea_editor_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_textarea_editor_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          ,
          /* 108 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_ = __webpack_require__(0);
            function render(_ctx, _cache, $props, $setup, $data, $options) {
              var _component_toc_nav = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("toc-nav");
              var _component_scrollbar = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("scrollbar");
              var _component_v_md_textarea_editor = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-textarea-editor");
              var _component_v_md_preview = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-preview");
              var _component_v_md_upload_file = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-upload-file");
              var _component_v_md_container = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-container");
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                _component_v_md_container,
                {
                  "left-toolbar": _ctx.leftToolbar,
                  "right-toolbar": _ctx.rightToolbar,
                  toolbars: _ctx.toolbars,
                  "disabled-menus": _ctx.disabledMenus,
                  height: _ctx.height,
                  fullscreen: _ctx.fullscreen,
                  "left-area-visible": _ctx.tocVisible,
                  "left-area-title": _ctx.langConfig.toc.title,
                  "left-area-reverse": _ctx.tocNavPositionRight,
                  mode: _ctx.currentMode,
                  onEditorWrapperClick: _ctx.handleEditorWrapperClick,
                  onToolbarItemClick: _ctx.handleToolbarItemClick,
                  onToolbarMenuClick: _ctx.handleToolbarMenuClick,
                  ref: "contaner"
                },
                {
                  "left-area": Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                    return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(_component_scrollbar, null, {
                      default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                        return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                          _component_toc_nav,
                          {
                            titles: _ctx.titles,
                            onNavClick: _ctx.handleNavClick
                          },
                          null,
                          8,
                          ["titles", "onNavClick"]
                        )];
                      }),
                      _: 1
                    })];
                  }),
                  editor: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                    return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                      _component_scrollbar,
                      {
                        onScroll: _ctx.handleEditorScroll,
                        ref: "editorScroller"
                      },
                      {
                        default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                          return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                            _component_v_md_textarea_editor,
                            {
                              "model-value": _ctx.text,
                              "min-height": _ctx.textEditorMinHeight,
                              placeholder: _ctx.placeholder,
                              "onUpdate:modelValue": _ctx.handleInput,
                              onClick: _cache[1] || (_cache[1] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                              }, ["stop"])),
                              onDrop: _ctx.handleDrop,
                              onPaste: _ctx.handlePaste,
                              onBlur: _ctx.handleBlur,
                              ref: "editorEgine"
                            },
                            null,
                            8,
                            ["model-value", "min-height", "placeholder", "onUpdate:modelValue", "onDrop", "onPaste", "onBlur"]
                          )];
                        }),
                        _: 1
                      },
                      8,
                      ["onScroll"]
                    )];
                  }),
                  preview: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                    return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                      _component_scrollbar,
                      {
                        ref: "previewScroller"
                      },
                      {
                        default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                          return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                            _component_v_md_preview,
                            {
                              text: _ctx.text,
                              "tab-size": _ctx.tabSize,
                              "scroll-container": _ctx.getPreviewScrollContainer,
                              "before-change": _ctx.beforePreviewChange,
                              onChange: _ctx.handleChange,
                              onImageClick: _ctx.handlePreviewImageClick,
                              ref: "preview"
                            },
                            null,
                            8,
                            ["text", "tab-size", "scroll-container", "before-change", "onChange", "onImageClick"]
                          )];
                        }),
                        _: 1
                      },
                      512
                      /* NEED_PATCH */
                    )];
                  }),
                  default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                    return [_ctx.hasUploadImage ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                      _component_v_md_upload_file,
                      {
                        key: 0,
                        "upload-config": _ctx.uploadConfig,
                        ref: "uploadFile"
                      },
                      null,
                      8,
                      ["upload-config"]
                    )) : Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createCommentVNode"])("v-if", true)];
                  }),
                  _: 1
                },
                8,
                ["left-toolbar", "right-toolbar", "toolbars", "disabled-menus", "height", "fullscreen", "left-area-visible", "left-area-title", "left-area-reverse", "mode", "onEditorWrapperClick", "onToolbarItemClick", "onToolbarMenuClick"]
              );
            }
            var regenerator = __webpack_require__(10);
            var regenerator_default = __webpack_require__.n(regenerator);
            var asyncToGenerator = __webpack_require__(17);
            var _hoisted_1 = {
              class: "v-md-textarea-editor"
            };
            var _hoisted_2 = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
              "br",
              null,
              null,
              -1
              /* HOISTED */
            );
            function textarea_editorvue_type_template_id_31fed1ea_bindings_modelValue_props_minHeight_props_placeholder_props_historyDebounce_props_historyMax_props_isComposing_data_textareaEl_options_handleCompositionStart_options_handleCompositionUpdate_options_handleCompositionEnd_options_handlePaste_options_handleBlur_options_registerHotkeys_options_handleKeydown_options_heightAtLine_options_clearTimeout_options_updateCurrentHistoryRange_options_handleInput_options_saveHistory_options_updateHistory_options_goHistory_options_getRange_options_setRange_options_focus_options_insertText_options_undo_options_redo_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("div", _hoisted_1, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                "pre",
                {
                  style: {
                    minHeight: $props.minHeight
                  }
                },
                [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                  external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                  null,
                  Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($props.modelValue.split("\n"), function(row, idx) {
                    return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                      "section",
                      {
                        "data-line": idx + 1
                      },
                      [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createTextVNode"])(
                        Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])(row || " "),
                        1
                        /* TEXT */
                      ), _hoisted_2],
                      8,
                      ["data-line"]
                    );
                  }),
                  256
                  /* UNKEYED_FRAGMENT */
                ))],
                4
                /* STYLE */
              ), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                "textarea",
                {
                  ref: "textarea",
                  value: $props.modelValue,
                  placeholder: $props.placeholder,
                  spellcheck: "false",
                  onCompositionstart: _cache[1] || (_cache[1] = function() {
                    return $options.handleCompositionStart.apply($options, arguments);
                  }),
                  onCompositionupdate: _cache[2] || (_cache[2] = function() {
                    return $options.handleCompositionUpdate.apply($options, arguments);
                  }),
                  onCompositionend: _cache[3] || (_cache[3] = function() {
                    return $options.handleCompositionEnd.apply($options, arguments);
                  }),
                  onInput: _cache[4] || (_cache[4] = function() {
                    return $options.handleInput.apply($options, arguments);
                  }),
                  onClick: _cache[5] || (_cache[5] = function() {
                    return $options.updateCurrentHistoryRange.apply($options, arguments);
                  }),
                  onPaste: _cache[6] || (_cache[6] = function() {
                    return $options.handlePaste.apply($options, arguments);
                  }),
                  onBlur: _cache[7] || (_cache[7] = function() {
                    return $options.handleBlur.apply($options, arguments);
                  }),
                  onKeydown: [_cache[8] || (_cache[8] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                  }, ["prevent"]), ["tab"])), _cache[9] || (_cache[9] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.undo.apply($options, arguments);
                  }, ["ctrl", "prevent", "exact"]), ["z"])), _cache[10] || (_cache[10] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.undo.apply($options, arguments);
                  }, ["meta", "prevent", "exact"]), ["z"])), _cache[11] || (_cache[11] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.redo.apply($options, arguments);
                  }, ["ctrl", "prevent", "exact"]), ["y"])), _cache[12] || (_cache[12] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.redo.apply($options, arguments);
                  }, ["meta", "prevent", "exact"]), ["y"]))],
                  onKeyup: [_cache[13] || (_cache[13] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.updateCurrentHistoryRange.apply($options, arguments);
                  }, ["shift", "exact"]), ["up"])), _cache[14] || (_cache[14] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.updateCurrentHistoryRange.apply($options, arguments);
                  }, ["shift", "exact"]), ["down"])), _cache[15] || (_cache[15] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.updateCurrentHistoryRange.apply($options, arguments);
                  }, ["shift", "exact"]), ["left"])), _cache[16] || (_cache[16] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.updateCurrentHistoryRange.apply($options, arguments);
                  }, ["shift", "exact"]), ["right"]))]
                },
                null,
                40,
                ["value", "placeholder"]
              )]);
            }
            var esm_extends = __webpack_require__(5);
            var browserSupportsTextareaTextNodes;
            function canManipulateViaTextNodes(input) {
              if (input.nodeName !== "TEXTAREA") {
                return false;
              }
              if (typeof browserSupportsTextareaTextNodes === "undefined") {
                var textarea = document.createElement("textarea");
                textarea.value = 1;
                browserSupportsTextareaTextNodes = !!textarea.firstChild;
              }
              return browserSupportsTextareaTextNodes;
            }
            function index_esm_index(input, text) {
              input.focus();
              if (document.selection) {
                var ieRange = document.selection.createRange();
                ieRange.text = text;
                ieRange.collapse(
                  false
                  /* to the end */
                );
                ieRange.select();
                return;
              }
              var isSuccess = document.execCommand("insertText", false, text);
              if (!isSuccess) {
                var start = input.selectionStart;
                var end = input.selectionEnd;
                if (typeof input.setRangeText === "function") {
                  input.setRangeText(text);
                } else {
                  var range = document.createRange();
                  var textNode = document.createTextNode(text);
                  if (canManipulateViaTextNodes(input)) {
                    var node = input.firstChild;
                    if (!node) {
                      input.appendChild(textNode);
                    } else {
                      var offset = 0;
                      var startNode = null;
                      var endNode = null;
                      while (node && (startNode === null || endNode === null)) {
                        var nodeLength = node.nodeValue.length;
                        if (start >= offset && start <= offset + nodeLength) {
                          range.setStart(startNode = node, start - offset);
                        }
                        if (end >= offset && end <= offset + nodeLength) {
                          range.setEnd(endNode = node, end - offset);
                        }
                        offset += nodeLength;
                        node = node.nextSibling;
                      }
                      if (start !== end) {
                        range.deleteContents();
                      }
                    }
                  }
                  if (canManipulateViaTextNodes(input) && range.commonAncestorContainer.nodeName === "#text") {
                    range.insertNode(textNode);
                  } else {
                    var value = input.value;
                    input.value = value.slice(0, start) + text + value.slice(end);
                  }
                }
                input.setSelectionRange(start + text.length, start + text.length);
                var e = document.createEvent("UIEvent");
                e.initEvent("input", true, false);
                input.dispatchEvent(e);
              }
            }
            var index_esm = index_esm_index;
            var hotkeys = __webpack_require__(36);
            var util = __webpack_require__(2);
            var textarea_editorvue_type_script_lang_js = {
              name: "v-md-textarea-editor",
              props: {
                modelValue: String,
                minHeight: String,
                placeholder: String,
                historyDebounce: {
                  type: Number,
                  default: 400
                },
                historyMax: {
                  type: Number,
                  default: 30
                }
              },
              emits: ["blur", "paste", "update:modelValue"],
              data: function data() {
                return {
                  isComposing: false
                };
              },
              computed: {
                textareaEl: function textareaEl() {
                  return this.$refs.textarea;
                }
              },
              watch: {
                modelValue: function modelValue() {
                  var _this = this;
                  this.clearTimeout();
                  if (!this.triggerInputBySetHistory) {
                    this.timmer = setTimeout(function() {
                      _this.saveHistory();
                      _this.clearTimeout();
                    }, this.historyDebounce);
                  }
                }
              },
              created: function created() {
                this.historyStack = [];
                this.historyIndex = 0;
                this.hotkeysManager = new hotkeys[
                  "a"
                  /* default */
                ]();
              },
              mounted: function mounted() {
                this.saveHistory();
                this.textareaEl.addEventListener("keydown", this.handleKeydown, false);
              },
              beforeUnmount: function beforeUnmount() {
                this.textareaEl.removeEventListener("keydown", this.handleKeydown, false);
              },
              methods: {
                handleCompositionStart: function handleCompositionStart() {
                  this.isComposing = true;
                },
                handleCompositionUpdate: function handleCompositionUpdate(event) {
                  var text = event.target.value;
                  var lastCharacter = text[text.length - 1] || "";
                  this.isComposing = !Object(util[
                    "e"
                    /* isKorean */
                  ])(lastCharacter);
                },
                handleCompositionEnd: function handleCompositionEnd(event) {
                  if (this.isComposing) {
                    this.isComposing = false;
                    this.handleInput(event);
                  }
                },
                handlePaste: function handlePaste(e) {
                  this.$emit("paste", e);
                },
                handleBlur: function handleBlur(e) {
                  this.$emit("blur", e);
                },
                registerHotkeys: function registerHotkeys() {
                  var _this$hotkeysManager;
                  (_this$hotkeysManager = this.hotkeysManager).registerHotkeys.apply(_this$hotkeysManager, arguments);
                },
                handleKeydown: function handleKeydown(e) {
                  this.hotkeysManager.dispatch(e);
                },
                heightAtLine: function heightAtLine(lineIndex) {
                  var el = this.$el.querySelector('section[data-line="' + lineIndex + '"]');
                  return el ? el.offsetTop + el.offsetHeight : 0;
                },
                clearTimeout: function(_clearTimeout) {
                  function clearTimeout2() {
                    return _clearTimeout.apply(this, arguments);
                  }
                  clearTimeout2.toString = function() {
                    return _clearTimeout.toString();
                  };
                  return clearTimeout2;
                }(function() {
                  if (this.timmer)
                    clearTimeout(this.timmer);
                  this.timmer = null;
                }),
                updateCurrentHistoryRange: function updateCurrentHistoryRange() {
                  if (!this.timmer) {
                    this.updateHistory(this.historyIndex, {
                      range: this.getRange()
                    });
                  }
                },
                handleInput: function handleInput(e) {
                  if (this.isComposing)
                    return;
                  this.$emit("update:modelValue", e.target.value);
                },
                saveHistory: function saveHistory() {
                  var range = this.getRange();
                  var history = {
                    value: this.modelValue,
                    range
                  };
                  this.historyStack = this.historyStack.slice(0, this.historyIndex + 1);
                  this.historyStack.push(history);
                  if (this.historyStack.length > this.historyMax)
                    this.historyStack.shift();
                  this.historyIndex = this.historyStack.length - 1;
                },
                updateHistory: function updateHistory(index, data) {
                  var history = this.historyStack[index];
                  if ("value" in data)
                    history.value = data.value;
                  Object(esm_extends[
                    "a"
                    /* default */
                  ])(history.range, data.range);
                },
                goHistory: function goHistory(index) {
                  var _this2 = this;
                  var _this$historyStack$in = this.historyStack[index], value = _this$historyStack$in.value, range = _this$historyStack$in.range;
                  this.$emit("update:modelValue", value);
                  this.triggerInputBySetHistory = true;
                  this.$nextTick(function() {
                    _this2.triggerInputBySetHistory = false;
                    _this2.setRange(range);
                  });
                },
                getRange: function getRange() {
                  return {
                    start: this.textareaEl.selectionStart,
                    end: this.textareaEl.selectionEnd
                  };
                },
                setRange: function setRange(_ref) {
                  var start = _ref.start, end = _ref.end;
                  this.textareaEl.setSelectionRange(start, end);
                  this.updateCurrentHistoryRange();
                },
                focus: function focus() {
                  this.textareaEl.focus();
                },
                insertText: function insertText(text) {
                  index_esm(this.textareaEl, text);
                },
                undo: function undo() {
                  if (this.historyIndex > 0) {
                    this.historyIndex--;
                    this.goHistory(this.historyIndex);
                  }
                },
                redo: function redo() {
                  if (this.historyIndex < this.historyStack.length - 1) {
                    this.historyIndex++;
                    this.goHistory(this.historyIndex);
                  }
                }
              }
            };
            var textarea_editorvue_type_style_index_0_lang_scss = __webpack_require__(106);
            textarea_editorvue_type_script_lang_js.render = textarea_editorvue_type_template_id_31fed1ea_bindings_modelValue_props_minHeight_props_placeholder_props_historyDebounce_props_historyMax_props_isComposing_data_textareaEl_options_handleCompositionStart_options_handleCompositionUpdate_options_handleCompositionEnd_options_handlePaste_options_handleBlur_options_registerHotkeys_options_handleKeydown_options_heightAtLine_options_clearTimeout_options_updateCurrentHistoryRange_options_handleInput_options_saveHistory_options_updateHistory_options_goHistory_options_getRange_options_setRange_options_focus_options_insertText_options_undo_options_redo_options_render;
            var textarea_editor = textarea_editorvue_type_script_lang_js;
            var create_editor = __webpack_require__(35);
            var _components;
            var component = {
              components: (_components = {}, _components[textarea_editor.name] = textarea_editor, _components),
              watch: {
                modelValue: function modelValue() {
                  this.text = this.modelValue;
                },
                height: {
                  handler: function handler() {
                    var _this = this;
                    return Object(asyncToGenerator[
                      "a"
                      /* default */
                    ])(regenerator_default.a.mark(function _callee() {
                      var editorWrapper;
                      return regenerator_default.a.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              if (util[
                                "d"
                                /* inBrowser */
                              ]) {
                                _context.next = 2;
                                break;
                              }
                              return _context.abrupt("return");
                            case 2:
                              _context.next = 4;
                              return _this.$nextTick();
                            case 4:
                              if (_this.height) {
                                editorWrapper = _this.$el.querySelector(".v-md-editor__editor-wrapper");
                                _this.textEditorMinHeight = window.getComputedStyle(editorWrapper).height;
                              } else {
                                _this.textEditorMinHeight = "";
                              }
                            case 5:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }))();
                  },
                  immediate: true
                }
              },
              data: function data() {
                return {
                  textEditorMinHeight: ""
                };
              },
              methods: {
                handleEditorWrapperClick: function handleEditorWrapperClick() {
                  this.setFocusEnd();
                },
                // Must implement
                editorFocusEnd: function editorFocusEnd() {
                  this.focus();
                  this.$refs.editorEgine.setRange({
                    start: this.text.length,
                    end: this.text.length
                  });
                },
                // Must implement
                delLineLeft: function delLineLeft() {
                  var editorEgine = this.$refs.editorEgine;
                  var _editorEgine$getRange = editorEgine.getRange(), start = _editorEgine$getRange.start;
                  var leftText = this.getCursorLineLeftText();
                  editorEgine.setRange({
                    start: start - leftText.length - 1,
                    end: start
                  });
                  this.replaceSelectionText("\n");
                },
                // Must implement
                getCursorLineLeftText: function getCursorLineLeftText() {
                  var _this$$refs$editorEgi = this.$refs.editorEgine.getRange(), start = _this$$refs$editorEgi.start, end = _this$$refs$editorEgi.end;
                  return start === end ? this.text.slice(0, start).split("\n").pop() : null;
                },
                // Must implement
                editorRegisterHotkeys: function editorRegisterHotkeys() {
                  var _this$$refs$editorEgi2;
                  (_this$$refs$editorEgi2 = this.$refs.editorEgine).registerHotkeys.apply(_this$$refs$editorEgi2, arguments);
                },
                // Must implement
                editorScrollToTop: function editorScrollToTop(scrollTop) {
                  this.$refs.editorScroller.scrollTo(scrollTop);
                },
                // Must implement
                getScrollInfo: function getScrollInfo() {
                  return this.$refs.editorScroller.getScrollInfo();
                },
                // Must implement
                heightAtLine: function heightAtLine() {
                  var _this$$refs$editorEgi3;
                  return (_this$$refs$editorEgi3 = this.$refs.editorEgine).heightAtLine.apply(_this$$refs$editorEgi3, arguments);
                },
                // Must implement
                focus: function focus() {
                  this.$refs.editorEgine.focus();
                },
                // Must implement
                undo: function undo() {
                  this.$refs.editorEgine.undo();
                },
                // Must implement
                redo: function redo() {
                  this.$refs.editorEgine.redo();
                },
                // Must implement
                clear: function clear() {
                  this.focus();
                  this.handleInput("");
                },
                // Must implement
                replaceSelectionText: function replaceSelectionText(text) {
                  this.$refs.editorEgine.insertText(text);
                },
                // Must implement
                getCurrentSelectedStr: function getCurrentSelectedStr() {
                  var _this$$refs$editorEgi4 = this.$refs.editorEgine.getRange(), start = _this$$refs$editorEgi4.start, end = _this$$refs$editorEgi4.end;
                  return end > start ? this.text.slice(start, end) : null;
                },
                // Must implement
                changeSelctionTo: function changeSelctionTo(insertText, selectedText) {
                  var editorEgine = this.$refs.editorEgine;
                  var selectedIndexOfStr = insertText.indexOf(selectedText);
                  var cursorEndIndex = editorEgine.getRange().end;
                  if (selectedIndexOfStr === -1)
                    return;
                  var text = this.text.slice(0, cursorEndIndex);
                  var insertTextIndex = text.length - insertText.length;
                  var rangeStartIndex = insertTextIndex + selectedIndexOfStr;
                  var rangeEndIndex = rangeStartIndex + selectedText.length;
                  this.$refs.editorEgine.setRange({
                    start: rangeStartIndex,
                    end: rangeEndIndex
                  });
                }
              }
            };
            Object(create_editor[
              "a"
              /* default */
            ])(component);
            var base_editorvue_type_script_lang_js = component;
            base_editorvue_type_script_lang_js.render = render;
            var base_editor = base_editorvue_type_script_lang_js;
            var xss = __webpack_require__(7);
            var font = __webpack_require__(18);
            var version = "2.3.15";
            var base_editor_install = function install(app) {
              app.component(base_editor.name, base_editor);
            };
            base_editor.version = version;
            base_editor.install = base_editor_install;
            base_editor.xss = xss[
              "a"
              /* default */
            ];
            base_editor.use = function(optionsOrInstall, opt) {
              if (typeof optionsOrInstall === "function") {
                optionsOrInstall(base_editor, opt);
              } else {
                optionsOrInstall.install(base_editor, opt);
              }
              return base_editor;
            };
            var src_base_editor = __webpack_exports__["default"] = base_editor;
          }
          /******/
        ])["default"]
      );
    });
  }
});
export default require_base_editor();
//# sourceMappingURL=@kangc_v-md-editor.js.map
